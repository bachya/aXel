<?xml version="1.0"?>
<RBProject version="2011r4.2" FormatVersion="2" MinIDEVersion="20070100">
<block type="Project" ID="0">
 <ProjectSavedInVers>2011.042</ProjectSavedInVers>
 <ProjMgrUser></ProjMgrUser>
 <ProjMgrServer></ProjMgrServer>
 <MajorVersion>1</MajorVersion>
 <MinorVersion>0</MinorVersion>
 <SubVersion>0</SubVersion>
 <Release>0</Release>
 <NonRelease>0</NonRelease>
 <Region></Region>
 <ShortVersion></ShortVersion>
 <LongVersion></LongVersion>
 <InfoVersion></InfoVersion>
 <AutoIncVersion>0</AutoIncVersion>
 <DefaultViewID>531424011</DefaultViewID>
 <ProjectType>0</ProjectType>
 <DefaultLanguage>0</DefaultLanguage>
 <CurrentLanguage>0</CurrentLanguage>
 <DefaultEncoding>0</DefaultEncoding>
 <BuildFlags>16400</BuildFlags>
 <UseBuildsFolder>1</UseBuildsFolder>
 <WebApp>0</WebApp>
 <Icon>
 </Icon>
 <MacCreator></MacCreator>
 <BuildCarbonName>My Application</BuildCarbonName>
 <BuildCarbonMachOName>aXel</BuildCarbonMachOName>
 <BundleIdentifier></BundleIdentifier>
 <BuildSize>4194304</BuildSize>
 <BuildMinSize>2097152</BuildMinSize>
 <BuildSizeAsString>4096</BuildSizeAsString>
 <BuildMinSizeAsString>2048</BuildMinSizeAsString>
 <WinMDICaption></WinMDICaption>
 <BuildWinName>aXel.exe</BuildWinName>
 <BuildWinMDI>0</BuildWinMDI>
 <BuildWinCompanyName></BuildWinCompanyName>
 <BuildWinProductName></BuildWinProductName>
 <BuildWinInternalName></BuildWinInternalName>
 <UseGDIPlus>0</UseGDIPlus>
 <BuildLinuxX86Name>aXel</BuildLinuxX86Name>
 <DebuggerCommandLine></DebuggerCommandLine>
 <WebPort>0</WebPort>
 <WebProtocol>0</WebProtocol>
 <WebDebugPort>8080</WebDebugPort>
 <WebUseIntegratedBrowser>0</WebUseIntegratedBrowser>
 <WebLaunchString>Launching...</WebLaunchString>
 <WebHTMLHeader></WebHTMLHeader>
 <WebDisconnectString>The application has gone off-line. Please try again later.</WebDisconnectString>
</block>
<block type="Folder" ID="1161854083">
 <ObjName>Classes</ObjName>
 <ObjContainerID>0</ObjContainerID>
</block>
<block type="Module" ID="102159890">
 <ObjName>AlternatingListBox</ObjName>
 <ObjContainerID>1161854083</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>ListBox</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <HookInstance>
  <ItemName>CellBackgroundPaint</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CellBackgroundPaint(g As Graphics, row As Integer, column As Integer) As Boolean</SourceLine>
   <SourceLine>if alternateRows then</SourceLine>
   <SourceLine>if row mod 2=0 and not me.selected(row) then</SourceLine>
   <SourceLine>g.foreColor=alternateColor</SourceLine>
   <SourceLine>g.fillrect 0,0,g.width,g.height</SourceLine>
   <SourceLine>elseif me.selected(row) then</SourceLine>
   <SourceLine>g.foreColor=rgb(30,30,100)</SourceLine>
   <SourceLine>g.fillrect 0,0,g.width,g.height</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>cellBackgroundPaint(g,row,column)</SourceLine>
   <SourceLine>return true</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <Method>
  <ItemName>AutoSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AutoSize(myWindow As Window)</SourceLine>
   <SourceLine>Dim i, j, maxWidths(-1), numRows, numCols, txtWidth, totWidth, winWidth As Integer</SourceLine>
   <SourceLine>Dim p As Picture</SourceLine>
   <SourceLine>Dim g As Graphics</SourceLine>
   <SourceLine>Dim s, theText As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>p = new Picture(1, 1, 32)</SourceLine>
   <SourceLine>g = p.Graphics</SourceLine>
   <SourceLine>g.TextFont = me.TextFont</SourceLine>
   <SourceLine>g.TextSize = me.TextSize</SourceLine>
   <SourceLine>numCols = me.ColumnCount - 1</SourceLine>
   <SourceLine>redim maxWidths(numCols)</SourceLine>
   <SourceLine>numRows = me.ListCount - 1</SourceLine>
   <SourceLine>for i = 0 to numRows</SourceLine>
   <SourceLine>for j = 0 to numCols</SourceLine>
   <SourceLine>theText = me.cell(i, j)</SourceLine>
   <SourceLine>txtWidth = g.StringWidth(theText) + 5</SourceLine>
   <SourceLine>maxWidths(j) = Max(maxWidths(j), txtWidth)</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine>if me.HasHeading then</SourceLine>
   <SourceLine>for j = 0 to numCols</SourceLine>
   <SourceLine>theText = me.Heading(j)</SourceLine>
   <SourceLine>txtWidth = g.StringWidth(theText)</SourceLine>
   <SourceLine>maxWidths(j) = Max(maxWidths(j), txtWidth)</SourceLine>
   <SourceLine>maxWidths(j) = maxWidths(j) + 15</SourceLine>
   <SourceLine>totWidth = totWidth + maxWidths(j)</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>if numRows &gt; 16 then  // enough rows for scrollbar to show?</SourceLine>
   <SourceLine>totWidth = totwidth + 16</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>me.width = totWidth</SourceLine>
   <SourceLine>winWidth = myWindow.Width</SourceLine>
   <SourceLine>for i = 0 to numCols</SourceLine>
   <SourceLine>s = s + format(maxWidths(i), "#")</SourceLine>
   <SourceLine>if i &lt; numcols then s = s + ","</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine>me.ColumnWidths = s</SourceLine>
   <SourceLine>me.left = (winWidth - totWidth) / 2</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>myWindow As Window</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Hook>
  <ItemName>cellBackgroundPaint</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>g as graphics, row as integer, column as integer</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Property>
  <ItemName>alternateColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>alternateColor As Color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>alternateColor As Color = &amp;cF0F5FF</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>alternateRows</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>alternateRows As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>alternateRows As Boolean = True</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Width</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>100</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Height</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>100</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockLeft</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockTop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockRight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockBottom</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabPanelIndex</ObjName>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabIndex</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabStop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Visible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HelpTag</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>MultiLineEditor</EditorType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AutoDeactivate</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Enabled</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Border</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ColumnCount</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>1</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ColumnWidths</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>MultiLineEditor</EditorType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HasHeading</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>UseFocusRing</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>InitialValue</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>MultiLineEditor</EditorType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HeadingIndex</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>-1</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ScrollbarHorizontal</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ScrollBarVertical</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>GridLinesHorizontal</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <InheritsFrom>ListBox</InheritsFrom>
   <Enumeration>
    <ItemDef>0 - Default</ItemDef>
    <ItemDef>1 - None</ItemDef>
    <ItemDef>2 - ThinDotted</ItemDef>
    <ItemDef>3 - ThinSolid</ItemDef>
    <ItemDef>4 - ThickSolid</ItemDef>
    <ItemDef>5 - DoubleThinSolid</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>GridLinesVertical</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <InheritsFrom>ListBox</InheritsFrom>
   <Enumeration>
    <ItemDef>0 - Default</ItemDef>
    <ItemDef>1 - None</ItemDef>
    <ItemDef>2 - ThinDotted</ItemDef>
    <ItemDef>3 - ThinSolid</ItemDef>
    <ItemDef>4 - ThickSolid</ItemDef>
    <ItemDef>5 - DoubleThinSolid</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DefaultRowHeight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>-1</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>_ScrollWidth</ObjName>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>-1</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>_ScrollOffset</ObjName>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextFont</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Font</PropertyGroup>
   <PropertyValue>System</PropertyValue>
   <ItemType>String</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextSize</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Font</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Single</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextUnit</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Font</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>FontUnits</ItemType>
   <EditorType>Enum</EditorType>
   <InheritsFrom>ListBox</InheritsFrom>
   <Enumeration>
    <ItemDef>0 - Default</ItemDef>
    <ItemDef>1 - Pixel</ItemDef>
    <ItemDef>2 - Point</ItemDef>
    <ItemDef>3 - Inch</ItemDef>
    <ItemDef>4 - Millimeter</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Bold</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Font</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Italic</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Font</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Underline</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Font</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Hierarchical</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EnableDrag</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EnableDragReorder</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>RequiresSelection</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>SelectionType</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <InheritsFrom>ListBox</InheritsFrom>
   <Enumeration>
    <ItemDef>0 - Single</ItemDef>
    <ItemDef>1 - Multiple</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ColumnsResizable</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AutoHideScrollbars</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DataSource</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Database Binding</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>DataSource</EditorType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DataField</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Database Binding</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>DataField</EditorType>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>InitialParent</ObjName>
   <InheritsFrom>ListBox</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="1045599458">
 <ObjName>App</ObjName>
 <ObjContainerID>0</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>Application</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <IsApplicationObject>1</IsApplicationObject>
 <Compatibility></Compatibility>
 <HookInstance>
  <ItemName>Open</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Open()</SourceLine>
   <SourceLine>// function: Open</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// ----- Step #1: Determine Paths for Common Directories -----------------</SourceLine>
   <SourceLine>// These directories holds all files needed by the application (images,</SourceLine>
   <SourceLine>// databases, etc.).  When the application starts, we store this directory in an</SourceLine>
   <SourceLine>// app property so that it can be accessed from anywhere</SourceLine>
   <SourceLine>// -----------------------------------------------------------------</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Start out by creating a new FolderItem that will</SourceLine>
   <SourceLine>// hold the eventual path to the Resources directory</SourceLine>
   <SourceLine>ResourceDirectory = New FolderItem</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Depending on if we're in debug mode or production mode, set some file locations</SourceLine>
   <SourceLine>// We'll need an installer in this case...</SourceLine>
   <SourceLine>#If DebugBuild Then</SourceLine>
   <SourceLine>#If TargetMacOS Then</SourceLine>
   <SourceLine>ResourceDirectory = GetFolderItem("").Child("resources")</SourceLine>
   <SourceLine>TmpDirectory = GetFolderItem("").Child("tmp")</SourceLine>
   <SourceLine>LibDirectory = GetFolderItem("").Child("lib").Child("osx").Child("lib")</SourceLine>
   <SourceLine>#Elseif TargetWin32 Then</SourceLine>
   <SourceLine>ResourceDirectory = GetFolderItem("").Parent.Child("resources")</SourceLine>
   <SourceLine>TmpDirectory = GetFolderItem("").Parent.Child("tmp")</SourceLine>
   <SourceLine>LibDirectory = GetFolderItem("").Parent.Child("lib").Child("windows").Child("lib")</SourceLine>
   <SourceLine>#EndIf</SourceLine>
   <SourceLine>#Else</SourceLine>
   <SourceLine>// Production</SourceLine>
   <SourceLine>ResourceDirectory = SpecialFolder.Preferences.Child("aXel").Child("resources")</SourceLine>
   <SourceLine>TmpDirectory = SpecialFolder.Preferences.Child("aXel").Child("tmp")</SourceLine>
   <SourceLine>LibDirectory = SpecialFolder.Preferences.Child("aXel").Child("lib")</SourceLine>
   <SourceLine>#Endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// ----- Step #2: Load Database ---------------------------------------</SourceLine>
   <SourceLine>// We have a property on the App class that will hold our database connection </SourceLine>
   <SourceLine>// and can be accessed from anywhere in the application.  We will only connect </SourceLine>
   <SourceLine>// to the database once and then we will continue to use that same connection </SourceLine>
   <SourceLine>// throughout the entire project.</SourceLine>
   <SourceLine>// -----------------------------------------------------------------</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Create Database Object</SourceLine>
   <SourceLine>MainDB = New REALSQLDatabase</SourceLine>
   <SourceLine>MainDB.DatabaseFile = ResourceDirectory.Child("database.rsd")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Connect to the database</SourceLine>
   <SourceLine>If MainDB.DatabaseFile.Exists = True Then</SourceLine>
   <SourceLine>// The database file already exists, so we want to connect to it.</SourceLine>
   <SourceLine>If MainDB.Connect() = False Then</SourceLine>
   <SourceLine>DisplayDatabaseError( False )// there was an error connecting to the database</SourceLine>
   <SourceLine>Quit</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>// The database file does not exist so we want to create a new one.</SourceLine>
   <SourceLine>// The process of creating a database will establish a connection to it</SourceLine>
   <SourceLine>// so there isn't a need to call Database.Connect after we create it.</SourceLine>
   <SourceLine>// Create the database file</SourceLine>
   <SourceLine>If MainDB.CreateDatabaseFile = False Then</SourceLine>
   <SourceLine>// Error While Creating the Database</SourceLine>
   <SourceLine>MsgBox "Database Error" + EndOfLine + EndOfLine + "There was an error when creating the database."</SourceLine>
   <SourceLine>Quit</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Create the tables for the database</SourceLine>
   <SourceLine>MainDB.SQLExecute "CREATE TABLE " + App.DB_TABLE_XSLT_TEMPLATE + " (title VarChar, description Text, transform VarChar, id Integer NOT NULL PRIMARY KEY)"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// ----- Step #3: Load XML syntax highlighting --------------------------</SourceLine>
   <SourceLine>// Set up an instance of the HighlightDefinition class that contains info on</SourceLine>
   <SourceLine>// syntactically highlighting XML.  We set it here so that it's available all through</SourceLine>
   <SourceLine>// the app, no matter where we are.</SourceLine>
   <SourceLine>// -----------------------------------------------------------------</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Grab the definition file and create a new HighlightDefinition</SourceLine>
   <SourceLine>//dim languageDefinitionFile as FolderItem = ldf</SourceLine>
   <SourceLine>Dim xmlHighlightDefinition As HighlightDefinition = New HighlightDefinition</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// If the file exists and isn't empty, attempt to load it into the HightlightDefinition;</SourceLine>
   <SourceLine>// if that's successful, store the HighlightDefinition in a global property</SourceLine>
   <SourceLine>if ResourceDirectory.Child("Language Definitions").Child("Xml.xml") &lt;&gt; nil and ResourceDirectory.Child("Language Definitions").Child("Xml.xml").Exists Then</SourceLine>
   <SourceLine>if xmlHighlightDefinition.loadFromXml(ResourceDirectory.Child("Language Definitions").Child("Xml.xml")) Then</SourceLine>
   <SourceLine>Me.XmlHighlightDefinition = xmlHighlightDefinition</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// ----- Step #4: Load default XSLT parser ------------------------------</SourceLine>
   <SourceLine>// We default to Expat</SourceLine>
   <SourceLine>// -----------------------------------------------------------------</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.CurrentXsltParser = XsltParser.CreateParser(XsltParser.ParserType.expat)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Set the application to AutoQuit, so if all windows are closed then the application</SourceLine>
   <SourceLine>// will quit.</SourceLine>
   <SourceLine>app.autoQuit = True</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>Close</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Close()</SourceLine>
   <SourceLine>// function: Close</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Close the connection to the datbase</SourceLine>
   <SourceLine>MainDB.Close</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>UnhandledException</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function UnhandledException(error As RuntimeException) As Boolean</SourceLine>
   <SourceLine>// function: UnhandledException</SourceLine>
   <SourceLine>// parameters: error As RuntimeException</SourceLine>
   <SourceLine>// return: Boolean</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Stores a stack trace to send to me</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim md As New MessageDialog</SourceLine>
   <SourceLine>Dim trimmedStack() As String</SourceLine>
   <SourceLine>trimmedStack = error.Stack</SourceLine>
   <SourceLine>// Prepare the error dialog</SourceLine>
   <SourceLine>md.Message = "Oops??"</SourceLine>
   <SourceLine>md.Explanation = error.Message + EndOfLine + EndOfLine + _</SourceLine>
   <SourceLine>"Please send this information to the developer." + EndOfLine + _</SourceLine>
   <SourceLine>Join( trimmedStack, EndOfLine )</SourceLine>
   <SourceLine>md.ActionButton.Caption = "Quit"</SourceLine>
   <SourceLine>md.CancelButton.Caption = "Continue"</SourceLine>
   <SourceLine>md.CancelButton.Visible = True</SourceLine>
   <SourceLine>// if the user decided to quit, rather than tempt fate,</SourceLine>
   <SourceLine>// we should quit.</SourceLine>
   <SourceLine>If md.ShowModal = md.ActionButton Then</SourceLine>
   <SourceLine>Quit</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return true</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <Method>
  <ItemName>DisplayDatabaseError</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DisplayDatabaseError(doRollback As Boolean)</SourceLine>
   <SourceLine>// function: DisplayDatabaseError</SourceLine>
   <SourceLine>// parameters: doRollback As Boolean</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Display a dialog that shows information about the error that</SourceLine>
   <SourceLine>// has occurred from the database engine.  If requested a Rollback</SourceLine>
   <SourceLine>// will also happen on the database in order to undo any changes</SourceLine>
   <SourceLine>// that happened since the last commit.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>MsgBox "There was a database error. " + str(MainDB.ErrorCode) + EndOfLine + EndOfLine + MainDB.ErrorMessage</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if doRollback then</SourceLine>
   <SourceLine>MainDb.rollback</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>doRollback As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>CreateDatabaseFile</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub CreateDatabaseFile()</SourceLine>
   <SourceLine>// function: CreateDatabaseFile</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Creates an in-memory REALSQLDatabase</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Create the database file</SourceLine>
   <SourceLine>If MainDB.CreateDatabaseFile = False Then</SourceLine>
   <SourceLine>// Error While Creating the Database</SourceLine>
   <SourceLine>MsgBox "Database Error" + EndOfLine + EndOfLine + "There was an error when creating the database."</SourceLine>
   <SourceLine>Quit</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Create the tables for the database</SourceLine>
   <SourceLine>MainDB.SQLExecute "CREATE TABLE " + App.DB_TABLE_XSLT_TEMPLATE + " (title VarChar, description Text, transform VarChar, id Integer NOT NULL PRIMARY KEY)"</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>PopulateListbox</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub PopulateListbox(lb As Listbox, rs As RecordSet)</SourceLine>
   <SourceLine>// function: PopulateListbox</SourceLine>
   <SourceLine>// parameters: lb As Listbox, rs As RecordSet</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Populate the specified listbox with the data in the recordset</SourceLine>
   <SourceLine>// that is provided.  This will loop through the records in the</SourceLine>
   <SourceLine>// recordset and add rows to the listbox that contain the data</SourceLine>
   <SourceLine>// from the recordset.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim i as integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Clear the order list</SourceLine>
   <SourceLine>lb.deleteAllRows</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Loop until we reach the end of the recordset</SourceLine>
   <SourceLine>while not rs.eof</SourceLine>
   <SourceLine>lb.addRow ""// add a new row to the listbox</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Loop through all of the fields in the recordset and add the data to the correct</SourceLine>
   <SourceLine>// column in the listbox</SourceLine>
   <SourceLine>for i = 1 to rs.fieldCount</SourceLine>
   <SourceLine>// The listbox Cell property is 0-based so we need to subtract 1 from the database field</SourceLine>
   <SourceLine>// number to get the correct correct column number.  This means field 1 is in column 0 of</SourceLine>
   <SourceLine>// the listbox.</SourceLine>
   <SourceLine>lb.cell( lb.lastIndex, i-1 ) = rs.idxField( i ).stringValue</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>rs.moveNext// move to the next record</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// If the listbox is set to be sorted by a particular column then we want to</SourceLine>
   <SourceLine>// sort the listbox contents after we populate it, so that they appear in the</SourceLine>
   <SourceLine>// correct order.</SourceLine>
   <SourceLine>if lb.sortedColumn &gt; -1 then// the listbox is sorted by a column</SourceLine>
   <SourceLine>lb.sort// sort the listbox data using the current sort settings</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lb As Listbox, rs As RecordSet</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DisplayWarningMsg</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DisplayWarningMsg(msg As String)</SourceLine>
   <SourceLine>// function: DisplayErrorMsg</SourceLine>
   <SourceLine>// parameters: msg As String</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Display a message with a yellow warning icon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim returnValue As Integer = MsgBox(msg, 816)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>msg As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DisplayErrorMsg</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DisplayErrorMsg(msg As String)</SourceLine>
   <SourceLine>// function: DisplayErrorMsg</SourceLine>
   <SourceLine>// parameters: msg As String</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Display a message with a red error icon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim returnValue As Integer = MsgBox(msg, 784)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>msg As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>MainDB</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>MainDB As REALSQLDatabase</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>MainDB As REALSQLDatabase</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>XmlHighlightDefinition</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>XmlHighlightDefinition As HighlightDefinition</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>XmlHighlightDefinition As HighlightDefinition</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>ResourceDirectory</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ResourceDirectory As FolderItem</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ResourceDirectory As FolderItem</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>TmpDirectory</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TmpDirectory As FolderItem</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TmpDirectory As FolderItem</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>LibDirectory</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>LibDirectory As FolderItem</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>LibDirectory As FolderItem</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mCurrentXsltParser</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mCurrentXsltParser As XsltParser</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mCurrentXsltParser As XsltParser</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>CurrentXsltParser</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CurrentXsltParser As XsltParser</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CurrentXsltParser As XsltParser</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mCurrentXsltParser = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mCurrentXsltParser</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>myOS</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>myOS As OS</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>myOS As OS</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <PropertyVal Name="MenuBar">258881810</PropertyVal>
 <ViewBehavior>
 </ViewBehavior>
 <Constant>
  <ItemName>kFileQuitShortcut</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kFileQuitShortcut</ItemName>
  <ItemType>0</ItemType>
  <ItemDef></ItemDef>
  <ItemFlags>0</ItemFlags>
  <ConstantInstance>
   <ItemPlatform>1</ItemPlatform>
   <ItemLanguage>0</ItemLanguage>
   <ItemDef>Cmd+Q</ItemDef>
  </ConstantInstance>
  <ConstantInstance>
   <ItemPlatform>5</ItemPlatform>
   <ItemLanguage>0</ItemLanguage>
   <ItemDef>Ctrl+Q</ItemDef>
  </ConstantInstance>
 </Constant>
 <Constant>
  <ItemName>kFileQuit</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kFileQuit</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>&amp;Quit</ItemDef>
  <ItemFlags>0</ItemFlags>
  <ConstantInstance>
   <ItemPlatform>2</ItemPlatform>
   <ItemLanguage>0</ItemLanguage>
   <ItemDef>E&amp;xit</ItemDef>
  </ConstantInstance>
 </Constant>
 <Constant>
  <ItemName>kEditClear</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kEditClear</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>&amp;Delete</ItemDef>
  <ItemFlags>0</ItemFlags>
  <ConstantInstance>
   <ItemPlatform>2</ItemPlatform>
   <ItemLanguage>0</ItemLanguage>
   <ItemDef>&amp;Delete</ItemDef>
  </ConstantInstance>
  <ConstantInstance>
   <ItemPlatform>5</ItemPlatform>
   <ItemLanguage>0</ItemLanguage>
   <ItemDef>&amp;Delete</ItemDef>
  </ConstantInstance>
 </Constant>
 <Constant>
  <ItemName>DB_TABLE_XSLT_TEMPLATE</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>DB_TABLE_XSLT_TEMPLATE</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>xslt_template</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>Untitled</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>Untitled</ItemName>
  <ItemType>5</ItemType>
  <ItemDef></ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>DB_TABLE_XSLT_PARSER</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>DB_TABLE_XSLT_PARSER</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>xslt_parser</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Enumeration>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>OS</ItemName>
  <ItemFlags>0</ItemFlags>
  <ItemType>Integer</ItemType>
  <ItemName>OS</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Windows</SourceLine>
   <SourceLine>OSX</SourceLine>
   <SourceLine>Linux</SourceLine>
  </ItemSource>
 </Enumeration>
</block>
<block type="BuildAutomation" ID="224728654">
 <ObjName>Build Automation</ObjName>
 <ObjContainerID>0</ObjContainerID>
</block>
<block type="BuildStepsList" ID="1738253158">
 <ObjName>Linux</ObjName>
 <ObjContainerID>224728654</ObjContainerID>
</block>
<block type="BuildProjectStep" ID="453309524">
 <ObjName>Build</ObjName>
 <ObjContainerID>1738253158</ObjContainerID>
</block>
<block type="BuildStepsList" ID="1648690765">
 <ObjName>Mac OS X</ObjName>
 <ObjContainerID>224728654</ObjContainerID>
</block>
<block type="BuildProjectStep" ID="564206920">
 <ObjName>Build</ObjName>
 <ObjContainerID>1648690765</ObjContainerID>
</block>
<block type="BuildStepsList" ID="1485419741">
 <ObjName>Windows</ObjName>
 <ObjContainerID>224728654</ObjContainerID>
</block>
<block type="BuildProjectStep" ID="952207418">
 <ObjName>Build</ObjName>
 <ObjContainerID>1485419741</ObjContainerID>
</block>
<block type="Module" ID="292225366">
 <ObjName>MarsSplitter</ObjName>
 <ObjContainerID>1658580157</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>Canvas</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <HookInstance>
  <ItemName>MouseEnter</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub MouseEnter()</SourceLine>
   <SourceLine>PickCursor</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>MouseDown</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function MouseDown(X As Integer, Y As Integer) As Boolean</SourceLine>
   <SourceLine>if me.Enabled and me.Visible then</SourceLine>
   <SourceLine>mXAnchor = X</SourceLine>
   <SourceLine>mYAnchor = Y</SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>Open</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Open()</SourceLine>
   <SourceLine>me.dockingSide = new Dictionary</SourceLine>
   <SourceLine>PickCursor</SourceLine>
   <SourceLine>Open()</SourceLine>
   <SourceLine>Moved(0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>Paint</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Paint(g As Graphics)</SourceLine>
   <SourceLine>' Draw a little handle at the middle of the splitter region.</SourceLine>
   <SourceLine>Dim x,y As Integer</SourceLine>
   <SourceLine>If Me.Active And Me.Enabled and me.Visible Then</SourceLine>
   <SourceLine>x = Me.Width / 2</SourceLine>
   <SourceLine>y = Me.Height / 2</SourceLine>
   <SourceLine>DrawHandlePoint(g,x,y)</SourceLine>
   <SourceLine>const drawLines = false</SourceLine>
   <SourceLine>const margin = 32</SourceLine>
   <SourceLine>If IsVertical Then</SourceLine>
   <SourceLine>#if drawLines</SourceLine>
   <SourceLine>g.ForeColor = &amp;ce0e0e0</SourceLine>
   <SourceLine>g.DrawLine x, margin, x, y - margin</SourceLine>
   <SourceLine>g.DrawLine x, y + margin, x, me.Height - margin</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>DrawHandlePoint(g,x,y-4)</SourceLine>
   <SourceLine>DrawHandlePoint(g,x,y-8)</SourceLine>
   <SourceLine>DrawHandlePoint(g,x,y+4)</SourceLine>
   <SourceLine>DrawHandlePoint(g,x,y+8)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>#if drawLines</SourceLine>
   <SourceLine>g.ForeColor = &amp;ce0e0e0</SourceLine>
   <SourceLine>g.DrawLine margin, y, x - margin, y</SourceLine>
   <SourceLine>g.DrawLine x + margin, y, me.Width - margin, y</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>DrawHandlePoint(g,x+4,y)</SourceLine>
   <SourceLine>DrawHandlePoint(g,x+8,y)</SourceLine>
   <SourceLine>DrawHandlePoint(g,x-4,y)</SourceLine>
   <SourceLine>DrawHandlePoint(g,x-8,y)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>MouseDrag</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub MouseDrag(X As Integer, Y As Integer)</SourceLine>
   <SourceLine>If IsVertical Then</SourceLine>
   <SourceLine>drag x - mXAnchor</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>drag y - mYAnchor</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <Method>
  <ItemName>IsVertical</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsVertical() As Boolean</SourceLine>
   <SourceLine>Return Height &gt; Width</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>PickCursor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub PickCursor()</SourceLine>
   <SourceLine>if me.Enabled and me.Visible then</SourceLine>
   <SourceLine>If IsVertical Then</SourceLine>
   <SourceLine>Me.MouseCursor = System.Cursors.SplitterEastWest</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Me.MouseCursor = System.Cursors.SplitterNorthSouth</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>Me.MouseCursor = nil</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VerticalSplit</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VerticalSplit(distance As Integer)</SourceLine>
   <SourceLine>' Find all the controls to either side of the splitter.</SourceLine>
   <SourceLine>' Adjust their dimensions to match the specified distance.</SourceLine>
   <SourceLine>Dim ctr As Integer</SourceLine>
   <SourceLine>Dim item As Object</SourceLine>
   <SourceLine>Dim okToMove As Boolean</SourceLine>
   <SourceLine>For ctr = 0 To Me.Window.ControlCount-1</SourceLine>
   <SourceLine>item = Me.Window.Control( ctr )</SourceLine>
   <SourceLine>If item IsA RectControl or item IsA ContainerControl Then</SourceLine>
   <SourceLine>' is this within the splitter's area of influence?</SourceLine>
   <SourceLine>okToMove = Not(item Is Me)</SourceLine>
   <SourceLine>if mAttached.Ubound &gt;= 0 then</SourceLine>
   <SourceLine>okToMove = okToMove and mAttached.IndexOf(item) &gt;= 0</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>okToMove = okToMove And item.CtrlTop &gt;= Me.Top</SourceLine>
   <SourceLine>okToMove = okToMove And  (item.CtrlTop + item.CtrlHeight) &lt;= (Me.Top + Me.Height)</SourceLine>
   <SourceLine>okToMove = okToMove And item.CtrlParent = Me.Parent</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If okToMove Then</SourceLine>
   <SourceLine>' is this to the left of the splitter or the right?</SourceLine>
   <SourceLine>dim itemAfterSplitter as Boolean</SourceLine>
   <SourceLine>if dockingSide.HasKey(item) then</SourceLine>
   <SourceLine>itemAfterSplitter = dockingSide.Value(item)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>dim pos, c as Integer</SourceLine>
   <SourceLine>pos = me.Left + me.Width \ 2</SourceLine>
   <SourceLine>c = item.CtrlLeft + item.CtrlWidth \ 2</SourceLine>
   <SourceLine>itemAfterSplitter = c &gt;= pos</SourceLine>
   <SourceLine>dockingSide.Value(item) = itemAfterSplitter</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>if mCtrlsToMove.IndexOf(item) &lt; 0 then</SourceLine>
   <SourceLine>// resize the control</SourceLine>
   <SourceLine>dim w as Integer</SourceLine>
   <SourceLine>if itemAfterSplitter then</SourceLine>
   <SourceLine>w = item.CtrlWidth - distance</SourceLine>
   <SourceLine>item.CtrlSetLeft item.CtrlLeft + distance</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>w = item.CtrlWidth + distance</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>If item IsA RectControl then</SourceLine>
   <SourceLine>RectControl(item).Resize w, item.CtrlHeight</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>ContainerControl(item).Resize w, item.CtrlHeight</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>// move the control</SourceLine>
   <SourceLine>dim ofs as Integer</SourceLine>
   <SourceLine>if itemAfterSplitter then</SourceLine>
   <SourceLine>ofs = distance</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>ofs = -distance</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>If item IsA RectControl then</SourceLine>
   <SourceLine>RectControl(item).Left = RectControl(item).Left + ofs</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>ContainerControl(item).Left = ContainerControl(item).Left + ofs</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>Me.Left = Me.Left + distance</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>distance As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HorizontalSplit</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub HorizontalSplit(distance As Integer)</SourceLine>
   <SourceLine>' Find all the controls to either side of the splitter.</SourceLine>
   <SourceLine>' Adjust their dimensions to match the specified distance.</SourceLine>
   <SourceLine>Dim ctr As Integer</SourceLine>
   <SourceLine>Dim item As Object</SourceLine>
   <SourceLine>Dim okToMove As Boolean</SourceLine>
   <SourceLine>for ctr = 0 To Me.Window.ControlCount-1</SourceLine>
   <SourceLine>item = Me.Window.Control( ctr )</SourceLine>
   <SourceLine>If item IsA RectControl or item IsA ContainerControl Then</SourceLine>
   <SourceLine>' is this within the splitter's area of influence?</SourceLine>
   <SourceLine>okToMove = Not(item Is Me)</SourceLine>
   <SourceLine>if mAttached.Ubound &gt;= 0 then</SourceLine>
   <SourceLine>okToMove = okToMove and mAttached.IndexOf(item) &gt;= 0</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>okToMove = okToMove And item.CtrlLeft &gt;= Me.Left</SourceLine>
   <SourceLine>okToMove = okToMove And (item.CtrlLeft + item.CtrlWidth) &lt;= (Me.Left + Me.Width)</SourceLine>
   <SourceLine>okToMove = okToMove And item.CtrlParent = me.Parent</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If okToMove Then</SourceLine>
   <SourceLine>' is this item above the splitter or below?</SourceLine>
   <SourceLine>dim itemAfterSplitter as Boolean</SourceLine>
   <SourceLine>if dockingSide.HasKey(item) then</SourceLine>
   <SourceLine>itemAfterSplitter = dockingSide.Value(item)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>dim pos, c as Integer</SourceLine>
   <SourceLine>pos = me.Top + me.Height \ 2</SourceLine>
   <SourceLine>c = item.CtrlTop + item.CtrlHeight \ 2</SourceLine>
   <SourceLine>itemAfterSplitter = c &gt;= pos</SourceLine>
   <SourceLine>dockingSide.Value(item) = itemAfterSplitter</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>if mCtrlsToMove.IndexOf(item) &lt; 0 then</SourceLine>
   <SourceLine>// resize the control</SourceLine>
   <SourceLine>dim h as Integer</SourceLine>
   <SourceLine>if itemAfterSplitter then</SourceLine>
   <SourceLine>h = item.CtrlHeight - distance</SourceLine>
   <SourceLine>item.CtrlSetTop item.CtrlTop + distance</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>h = item.CtrlHeight + distance</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>If item IsA RectControl then</SourceLine>
   <SourceLine>RectControl(item).Resize item.CtrlWidth, h</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>ContainerControl(item).Resize item.CtrlWidth, h</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>// move the control</SourceLine>
   <SourceLine>dim ofs as Integer</SourceLine>
   <SourceLine>if itemAfterSplitter then</SourceLine>
   <SourceLine>ofs = distance</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>ofs = -distance</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>If item IsA RectControl then</SourceLine>
   <SourceLine>RectControl(item).Top = RectControl(item).Top + ofs</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>ContainerControl(item).Top = ContainerControl(item).Top + ofs</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>Me.Top = Me.Top + distance</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>distance As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DrawHandlePoint</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DrawHandlePoint(g As Graphics, x As Integer, y As Integer)</SourceLine>
   <SourceLine>g.Pixel(x,y) = &amp;c333333</SourceLine>
   <SourceLine>g.Pixel(x+1,y+1) = &amp;cFFFFFF</SourceLine>
   <SourceLine>Exception OutOfBoundsException</SourceLine>
   <SourceLine>// ignore</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>g As Graphics, x As Integer, y As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Reposition</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Reposition(topOrLeft as Integer)</SourceLine>
   <SourceLine>if me.Enabled then</SourceLine>
   <SourceLine>if IsVertical then</SourceLine>
   <SourceLine>drag topOrLeft - me.Left</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>drag topOrLeft - me.Top</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>topOrLeft as Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>drag</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub drag(distance As Integer)</SourceLine>
   <SourceLine>' Find out how many pixels the splitter must move until the mouse</SourceLine>
   <SourceLine>' is once again centered over the origin point.</SourceLine>
   <SourceLine>' Resize all the split-controls by this amount.</SourceLine>
   <SourceLine>' Move the splitter itself so it sits underneath the mouse.</SourceLine>
   <SourceLine>if me.Enabled then</SourceLine>
   <SourceLine>If IsVertical Then</SourceLine>
   <SourceLine>If Me.Left + distance &lt; MinTopLeft Then</SourceLine>
   <SourceLine>distance = MinTopLeft - Me.Left</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If Me.Left + Me.Width + distance &gt; Me.Window.Width - MinBottomRight Then</SourceLine>
   <SourceLine>distance = Me.Window.Width - MinBottomRight - Me.Left - Me.Width</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>if distance &lt;&gt; 0 then</SourceLine>
   <SourceLine>VerticalSplit distance</SourceLine>
   <SourceLine>Moved(distance)</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If Me.Top + distance &lt; MinTopLeft Then</SourceLine>
   <SourceLine>distance = MinTopLeft - Me.Top</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If Me.Top + Me.Height + distance &gt; Me.Window.Height - MinBottomRight Then</SourceLine>
   <SourceLine>distance = Me.Window.Height - MinBottomRight - Me.Top - Me.Height</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>if distance &lt;&gt; 0 then</SourceLine>
   <SourceLine>HorizontalSplit distance</SourceLine>
   <SourceLine>Moved(distance)</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>distance As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ResetDocks</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ResetDocks()</SourceLine>
   <SourceLine>me.dockingSide.Clear</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Attach</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Attach(ctrl as RectControl, moveOnly as Boolean = false)</SourceLine>
   <SourceLine>mAttached.Append ctrl</SourceLine>
   <SourceLine>if moveOnly then</SourceLine>
   <SourceLine>mCtrlsToMove.Append ctrl</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>ctrl as RectControl, moveOnly as Boolean = false</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Attach</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Attach(ctrl as ContainerControl, moveOnly as Boolean = false)</SourceLine>
   <SourceLine>mAttached.Append ctrl._Control // this undocumented "_Control" access is necessary to make it work (as of RB 2008r1)</SourceLine>
   <SourceLine>if moveOnly then</SourceLine>
   <SourceLine>mCtrlsToMove.Append ctrl</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>ctrl as ContainerControl, moveOnly as Boolean = false</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Position</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Position() As Integer</SourceLine>
   <SourceLine>if IsVertical then</SourceLine>
   <SourceLine>return me.Left</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>return me.Top</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Hook>
  <ItemName>Open</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>Moved</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>distance as Integer</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Note>
  <ItemName>About</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>About</NoteLine>
   <NoteLine>Original version by Mars Saxman: http://www.redplanetsw.com/realbasic/#splitter</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Changes by Thomas Tempelmann on 24 Nov 05:</NoteLine>
   <NoteLine>- added some checks to HorizontalSplit and VerticalSplit so that it does only affect directly neighboring controls</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Changes by Thomas Tempelmann on 20 Jan 08:</NoteLine>
   <NoteLine>- added Reposition() to move the splitter, e.g. within an Resizing event</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Changes by Thomas Tempelmann on 20 Feb 08:</NoteLine>
   <NoteLine>- added .Visible checks so that an enabled by invisible splitter still works but does not reveal itself in the GUI</NoteLine>
   <NoteLine>- deals better with negative heights caused by overflowing the splitter over a control.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Changes by Thomas Tempelmann on 10 Mar 08:</NoteLine>
   <NoteLine>- added Attach() to explicitly attach controls that are moved by the splitter</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Changes by Thomas Tempelmann on 12 Mar 08:</NoteLine>
   <NoteLine>- can now move ContainerControls as well (they're not subclasses of RectControl, sadly)</NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Note>
  <ItemName>Features</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>Features</NoteLine>
   <NoteLine>By default, this splitter moves &amp; resizes all items it finds next to itself,</NoteLine>
   <NoteLine>including ContainerControls</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>You can override this by calling the Attach method to tell the splitter</NoteLine>
   <NoteLine>not only which items are to be considered but also whether these items</NoteLine>
   <NoteLine>shall be resized or not.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>The splitter also pays attention to Locks, so make sure you check those</NoteLine>
   <NoteLine>if things don't seem to work as you expect.</NoteLine>
   <NoteLine></NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>MinTopLeft</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>MinTopLeft As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>MinTopLeft As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>MinBottomRight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>MinBottomRight As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>MinBottomRight As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mXAnchor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mXAnchor As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mXAnchor As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mYAnchor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mYAnchor As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mYAnchor As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>dockingSide</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>dockingSide As Dictionary</SourceLine>
   <SourceLine>key: control</SourceLine>
   <SourceLine>value: boolean (true: top/left, false: bottom/right)</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>dockingSide As Dictionary</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mAttached()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mAttached() As Object</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mAttached() As Object</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mCtrlsToMove()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mCtrlsToMove() As Object</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mCtrlsToMove() As Object</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>DoubleBuffer</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabStop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Width</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>100</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Height</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>100</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockLeft</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockTop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockRight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockBottom</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabPanelIndex</ObjName>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabIndex</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Visible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HelpTag</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>MultiLineEditor</EditorType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AutoDeactivate</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Enabled</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>UseFocusRing</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Backdrop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>Picture</ItemType>
   <EditorType>Picture</EditorType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AcceptFocus</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AcceptTabs</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EraseBackground</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>InitialParent</ObjName>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinTopLeft</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinBottomRight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="1257559616">
 <ObjName>TTsUITools</ObjName>
 <ObjContainerID>1658580157</ObjContainerID>
 <IsClass>0</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>CtrlBottom</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CtrlBottom(extends ctrl as Object) As Integer</SourceLine>
   <SourceLine>return ctrl.CtrlTop + ctrl.CtrlHeight</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends ctrl as Object</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Resize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Resize(extends container as ContainerControl, width as Integer, height as Integer)</SourceLine>
   <SourceLine>dim dW, dH as Integer</SourceLine>
   <SourceLine>dW = width - container.Width</SourceLine>
   <SourceLine>dH = height - container.Height</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if container isA PagePanel then</SourceLine>
   <SourceLine>// resizes the children automatically</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>for i as Integer = 0 to container.Window.ControlCount-1</SourceLine>
   <SourceLine>dim ctrl0 as Control = container.Window.Control(i)</SourceLine>
   <SourceLine>dim s as String = ctrl0.Name</SourceLine>
   <SourceLine>if ctrl0 isA RectControl then</SourceLine>
   <SourceLine>dim ctrl as RectControl = RectControl(ctrl0)</SourceLine>
   <SourceLine>if ctrl.Parent = container then</SourceLine>
   <SourceLine>dim dW2, dH2, newT, newL as Integer</SourceLine>
   <SourceLine>newT = ctrl.Top</SourceLine>
   <SourceLine>newL = ctrl.Left</SourceLine>
   <SourceLine>if ctrl.LockRight then</SourceLine>
   <SourceLine>if ctrl.LockLeft then</SourceLine>
   <SourceLine>dW2 = dW</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>newL = ctrl.Left + dW</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>if ctrl.LockBottom then</SourceLine>
   <SourceLine>if ctrl.LockTop then</SourceLine>
   <SourceLine>dH2 = dH</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>newT = ctrl.Top + dH</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>if dW2 &lt;&gt; 0 or dH2 &lt;&gt; 0 then</SourceLine>
   <SourceLine>ctrl.Resize ctrl.Width + dW2, ctrl.Height + dH2</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>ctrl.Top = newT</SourceLine>
   <SourceLine>ctrl.Left = newL</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>container.Width = width</SourceLine>
   <SourceLine>container.Height = height</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends container as ContainerControl, width as Integer, height as Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>CtrlLeft</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CtrlLeft(extends ctrl as Object) As Integer</SourceLine>
   <SourceLine>if ctrl isA RectControl then</SourceLine>
   <SourceLine>return RectControl(ctrl).Left</SourceLine>
   <SourceLine>elseif ctrl isA Window then</SourceLine>
   <SourceLine>return Window(ctrl).Left</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends ctrl as Object</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>CtrlWidth</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CtrlWidth(extends ctrl as Object) As Integer</SourceLine>
   <SourceLine>if ctrl isA RectControl then</SourceLine>
   <SourceLine>return RectControl(ctrl).Width</SourceLine>
   <SourceLine>elseif ctrl isA Window then</SourceLine>
   <SourceLine>return Window(ctrl).Width</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends ctrl as Object</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>CtrlHeight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CtrlHeight(extends ctrl as Object) As Integer</SourceLine>
   <SourceLine>if ctrl isA RectControl then</SourceLine>
   <SourceLine>return RectControl(ctrl).Height</SourceLine>
   <SourceLine>elseif ctrl isA Window then</SourceLine>
   <SourceLine>return Window(ctrl).Height</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends ctrl as Object</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>CtrlTop</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CtrlTop(extends ctrl as Object) As Integer</SourceLine>
   <SourceLine>if ctrl isA RectControl then</SourceLine>
   <SourceLine>return RectControl(ctrl).Top</SourceLine>
   <SourceLine>elseif ctrl isA Window then</SourceLine>
   <SourceLine>return Window(ctrl).Top</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends ctrl as Object</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>CtrlRight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CtrlRight(extends ctrl as Object) As Integer</SourceLine>
   <SourceLine>return ctrl.CtrlLeft + ctrl.CtrlWidth</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends ctrl as Object</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Resize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Resize(extends container as RectControl, width as Integer, height as Integer)</SourceLine>
   <SourceLine>dim dW, dH as Integer</SourceLine>
   <SourceLine>dW = width - container.Width</SourceLine>
   <SourceLine>dH = height - container.Height</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if container isA PagePanel then</SourceLine>
   <SourceLine>// resizes the children automatically</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>for i as Integer = 0 to container.Window.ControlCount-1</SourceLine>
   <SourceLine>dim ctrl0 as Control = container.Window.Control(i)</SourceLine>
   <SourceLine>dim s as String = ctrl0.Name</SourceLine>
   <SourceLine>if ctrl0 isA RectControl then</SourceLine>
   <SourceLine>dim ctrl as RectControl = RectControl(ctrl0)</SourceLine>
   <SourceLine>if ctrl.Parent = container then</SourceLine>
   <SourceLine>dim dW2, dH2, newT, newL as Integer</SourceLine>
   <SourceLine>newT = ctrl.Top</SourceLine>
   <SourceLine>newL = ctrl.Left</SourceLine>
   <SourceLine>if ctrl.LockRight then</SourceLine>
   <SourceLine>if ctrl.LockLeft then</SourceLine>
   <SourceLine>dW2 = dW</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>newL = ctrl.Left + dW</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>if ctrl.LockBottom then</SourceLine>
   <SourceLine>if ctrl.LockTop then</SourceLine>
   <SourceLine>dH2 = dH</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>newT = ctrl.Top + dH</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>if dW2 &lt;&gt; 0 or dH2 &lt;&gt; 0 then</SourceLine>
   <SourceLine>ctrl.Resize ctrl.Width + dW2, ctrl.Height + dH2</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>ctrl.Top = newT</SourceLine>
   <SourceLine>ctrl.Left = newL</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>container.Width = width</SourceLine>
   <SourceLine>container.Height = height</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends container as RectControl, width as Integer, height as Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>CtrlParent</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CtrlParent(extends ctrl as Object) As Object</SourceLine>
   <SourceLine>if ctrl isA RectControl then</SourceLine>
   <SourceLine>return RectControl(ctrl).Parent</SourceLine>
   <SourceLine>elseif ctrl isA ContainerControl then</SourceLine>
   <SourceLine>return ContainerControl(ctrl).Parent</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends ctrl as Object</ItemParams>
  <ItemResult>Object</ItemResult>
 </Method>
 <Method>
  <ItemName>CtrlSetLeft</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub CtrlSetLeft(extends ctrl as Object, v as Integer)</SourceLine>
   <SourceLine>if ctrl isA RectControl then</SourceLine>
   <SourceLine>RectControl(ctrl).Left = v</SourceLine>
   <SourceLine>elseif ctrl isA Window then</SourceLine>
   <SourceLine>Window(ctrl).Left = v</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends ctrl as Object, v as Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>CtrlSetTop</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub CtrlSetTop(extends ctrl as Object, v as Integer)</SourceLine>
   <SourceLine>if ctrl isA RectControl then</SourceLine>
   <SourceLine>RectControl(ctrl).Top = v</SourceLine>
   <SourceLine>elseif ctrl isA Window then</SourceLine>
   <SourceLine>Window(ctrl).Top = v</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends ctrl as Object, v as Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HasFocus</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function HasFocus(c as ContainerControl) As Boolean</SourceLine>
   <SourceLine>// finds out if any of the directly owned controls has the focus</SourceLine>
   <SourceLine>// unfortunately, I can't make it search embedded containers as well - those have to be checked explicitly</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for idx as Integer = 0 to c.ControlCount-1</SourceLine>
   <SourceLine>dim ctrl as Object = c.Control(idx)</SourceLine>
   <SourceLine>if c.Focus = ctrl then</SourceLine>
   <SourceLine>return true</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>c as ContainerControl</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>CtrlLockTop</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CtrlLockTop(extends ctrl as Object) As Boolean</SourceLine>
   <SourceLine>if ctrl isA RectControl then</SourceLine>
   <SourceLine>return RectControl(ctrl).LockTop</SourceLine>
   <SourceLine>elseif ctrl isA ContainerControl then</SourceLine>
   <SourceLine>return ContainerControl(ctrl).LockTop</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends ctrl as Object</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>CtrlLockBottom</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CtrlLockBottom(extends ctrl as Object) As Boolean</SourceLine>
   <SourceLine>if ctrl isA RectControl then</SourceLine>
   <SourceLine>return RectControl(ctrl).LockBottom</SourceLine>
   <SourceLine>elseif ctrl isA ContainerControl then</SourceLine>
   <SourceLine>return ContainerControl(ctrl).LockBottom</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends ctrl as Object</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>ShowMessageDialog</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ShowMessageDialog(w as Window, icon as String, actionTxt as String, cancelTxt as String, altTxt as String, msg as String, explanation as String) As Integer</SourceLine>
   <SourceLine>System.DebugLog "UITools.ShowMessageDialog "+msg+" -- "+explanation</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim d as new MessageDialog</SourceLine>
   <SourceLine>dim b as MessageDialogButton</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if icon = "ask" then</SourceLine>
   <SourceLine>d.Icon = MessageDialog.GraphicQuestion</SourceLine>
   <SourceLine>elseif icon = "note" then</SourceLine>
   <SourceLine>d.Icon = MessageDialog.GraphicNote</SourceLine>
   <SourceLine>elseif icon = "stop" then</SourceLine>
   <SourceLine>d.Icon = MessageDialog.GraphicStop</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if Len(actionTxt) &gt; 1 then</SourceLine>
   <SourceLine>d.ActionButton.Caption = actionTxt</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>d.CancelButton.Visible = cancelTxt &lt;&gt; ""</SourceLine>
   <SourceLine>if Len(cancelTxt) &gt; 1 then</SourceLine>
   <SourceLine>d.CancelButton.Caption = cancelTxt</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>d.AlternateActionButton.Visible = altTxt &lt;&gt; ""</SourceLine>
   <SourceLine>if Len(altTxt) &gt; 1 then</SourceLine>
   <SourceLine>d.AlternateActionButton.Caption = altTxt</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>d.Message = msg</SourceLine>
   <SourceLine>d.Explanation = explanation</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if w &lt;&gt; nil then</SourceLine>
   <SourceLine>w.Show // bring parent to front</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if TargetMacOS and w &lt;&gt; nil then</SourceLine>
   <SourceLine>b = d.ShowModalWithin (w)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>b = d.ShowModal () // Windows has problems with the Within() function when the win is not frontmost</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>select case b</SourceLine>
   <SourceLine>case d.ActionButton</SourceLine>
   <SourceLine>return 1</SourceLine>
   <SourceLine>case d.CancelButton</SourceLine>
   <SourceLine>return 2</SourceLine>
   <SourceLine>case d.AlternateActionButton</SourceLine>
   <SourceLine>return 3</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>w as Window, icon as String, actionTxt as String, cancelTxt as String, altTxt as String, msg as String, explanation as String</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>ShowMsg</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ShowMsg(w as Window, msg as String, more as String = "")</SourceLine>
   <SourceLine>call ShowMessageDialog (w, "note", "*", "", "", msg, more)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>w as Window, msg as String, more as String = ""</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>StringWidth</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function StringWidth(txt as String, fontName as String, fontSize as Integer) As Double</SourceLine>
   <SourceLine>dim p as Picture</SourceLine>
   <SourceLine>p = NewPicture (32, 32, 32)</SourceLine>
   <SourceLine>if fontName &lt;&gt; "" then p.Graphics.TextFont = fontName</SourceLine>
   <SourceLine>if fontSize &gt; 0 then p.Graphics.TextSize = fontSize</SourceLine>
   <SourceLine>return p.Graphics.StringWidth (txt)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>txt as String, fontName as String, fontSize as Integer</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>EnsureSheetIsResizable</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub EnsureSheetIsResizable(extends w as Window)</SourceLine>
   <SourceLine>#if TargetMacOS</SourceLine>
   <SourceLine>soft declare function ChangeWindowAttributes lib "Carbon" (window as WindowPtr, setTheseAttributes as Uint32, clearTheseAttributes as Uint32) as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>const kWindowResizableAttribute = &amp;h10 // (1L &lt;&lt; 4)</SourceLine>
   <SourceLine>const kWindowLiveResizeAttribute = &amp;h10000000 // (1L &lt;&lt; 28),</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if System.IsFunctionAvailable("ChangeWindowAttributes", "Carbon") then</SourceLine>
   <SourceLine>dim attrs as Uint32</SourceLine>
   <SourceLine>if w.Resizeable then attrs = attrs + kWindowResizableAttribute</SourceLine>
   <SourceLine>if w.LiveResize then attrs = attrs + kWindowLiveResizeAttribute</SourceLine>
   <SourceLine>if attrs &lt;&gt; 0 then</SourceLine>
   <SourceLine>dim result as integer = ChangeWindowAttributes(w, attrs, 0)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends w as Window</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Note>
  <ItemName>About</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>About</NoteLine>
   <NoteLine>Written mostly by Thomas Tempelmann, for the public domain</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Folder" ID="1418977445">
 <ObjName>Containers</ObjName>
 <ObjContainerID>0</ObjContainerID>
</block>
<block type="Window" ID="436737850">
 <ObjName>Container_TextAreaAndLabel</ObjName>
 <ObjContainerID>1418977445</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>ContainerControl</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <PropertyVal Name="EraseBackground">True</PropertyVal>
 <PropertyVal Name="AcceptTabs">True</PropertyVal>
 <PropertyVal Name="AcceptFocus"></PropertyVal>
 <PropertyVal Name="Backdrop"></PropertyVal>
 <PropertyVal Name="BackColor">16777215</PropertyVal>
 <PropertyVal Name="HasBackColor">False</PropertyVal>
 <PropertyVal Name="UseFocusRing"></PropertyVal>
 <PropertyVal Name="HelpTag"></PropertyVal>
 <PropertyVal Name="AutoDeactivate">True</PropertyVal>
 <PropertyVal Name="Enabled">True</PropertyVal>
 <PropertyVal Name="Visible">True</PropertyVal>
 <PropertyVal Name="TabStop">True</PropertyVal>
 <PropertyVal Name="TabIndex">0</PropertyVal>
 <PropertyVal Name="TabPanelIndex">0</PropertyVal>
 <PropertyVal Name="LockBottom"></PropertyVal>
 <PropertyVal Name="LockRight"></PropertyVal>
 <PropertyVal Name="LockTop"></PropertyVal>
 <PropertyVal Name="LockLeft"></PropertyVal>
 <PropertyVal Name="Height">389</PropertyVal>
 <PropertyVal Name="Width">435</PropertyVal>
 <PropertyVal Name="Top">0</PropertyVal>
 <PropertyVal Name="Left">0</PropertyVal>
 <PropertyVal Name="InitialParent"></PropertyVal>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>InitialParent</ObjName>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>String</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Width</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>300</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Height</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>300</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockLeft</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockTop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockRight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockBottom</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabPanelIndex</ObjName>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabIndex</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabStop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Visible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Enabled</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AutoDeactivate</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HelpTag</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>String</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>UseFocusRing</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HasBackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>BackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>&amp;hFFFFFF</PropertyValue>
   <ItemType>Color</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Backdrop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>Picture</ItemType>
   <EditorType>Picture</EditorType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AcceptFocus</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AcceptTabs</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EraseBackground</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
 <ControlBehavior>
  <Superclass>CustomScrollableEditField</Superclass>
  <HookInstance>
   <ItemName>TextChanged</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub TextChanged()</SourceLine>
    <SourceLine>// function: TextChanged</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// As the text in these inputs changes, monitor the text so</SourceLine>
    <SourceLine>// that certain functions get enabled/disabled</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>Window_Main.EnableFunctions()</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>Open</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Open()</SourceLine>
    <SourceLine>// function: Open</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// When this text field opens, start its SyntaxDefinition engine</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>Dim SyntaxDefinition As HighlightDefinition = App.XmlHighlightDefinition</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>If Me.SyntaxDefinition = SyntaxDefinition Then Return</SourceLine>
    <SourceLine>Me.SyntaxDefinition = SyntaxDefinition</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>Label</Superclass>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>Label</Superclass>
 </ControlBehavior>
 <Control>
  <ControlClass>CustomScrollableEditField</ControlClass>
  <ItemName>CustomScrollableEditField</ItemName>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="ThickInsertionPoint">true</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextSelectionColor">0</PropertyVal>
  <PropertyVal Name="TextLength">0</PropertyVal>
  <PropertyVal Name="TextHeight">0</PropertyVal>
  <PropertyVal Name="TextFont">Courier</PropertyVal>
  <PropertyVal Name="TextColor">0</PropertyVal>
  <PropertyVal Name="Text"></PropertyVal>
  <PropertyVal Name="TabWidth">0</PropertyVal>
  <PropertyVal Name="SelStart">0</PropertyVal>
  <PropertyVal Name="SelLength">0</PropertyVal>
  <PropertyVal Name="ScrollPositionX">0</PropertyVal>
  <PropertyVal Name="ScrollPosition">0</PropertyVal>
  <PropertyVal Name="RightMarginAtPixel">0</PropertyVal>
  <PropertyVal Name="RighScrollMargin">0</PropertyVal>
  <PropertyVal Name="MaxVisibleLines">0</PropertyVal>
  <PropertyVal Name="LineNumbersTextSize">9</PropertyVal>
  <PropertyVal Name="LineNumbersTextFont">System</PropertyVal>
  <PropertyVal Name="LineNumbersColor">8947848</PropertyVal>
  <PropertyVal Name="LeftMarginOffset">4</PropertyVal>
  <PropertyVal Name="HighlightMatchingBracketsMode">1</PropertyVal>
  <PropertyVal Name="HighlightMatchingBrackets">true</PropertyVal>
  <PropertyVal Name="GutterWidth">0</PropertyVal>
  <PropertyVal Name="GutterSeparationLineColor">8947848</PropertyVal>
  <PropertyVal Name="GutterBackgroundColor">15658734</PropertyVal>
  <PropertyVal Name="EnableLineFoldings">True</PropertyVal>
  <PropertyVal Name="EnableAutocomplete">True</PropertyVal>
  <PropertyVal Name="DisplayRightMarginMarker">false</PropertyVal>
  <PropertyVal Name="DisplayLineNumbers">true</PropertyVal>
  <PropertyVal Name="DisplayInvisibleCharacters">false</PropertyVal>
  <PropertyVal Name="DisplayDirtyLines">false</PropertyVal>
  <PropertyVal Name="DirtyLinesColor">16751001</PropertyVal>
  <PropertyVal Name="ClearHighlightedRangesOnTextChange">true</PropertyVal>
  <PropertyVal Name="CaretPos">0</PropertyVal>
  <PropertyVal Name="CaretColor">0</PropertyVal>
  <PropertyVal Name="BorderColor">8947848</PropertyVal>
  <PropertyVal Name="Border">True</PropertyVal>
  <PropertyVal Name="AutoIndentNewLines">False</PropertyVal>
  <PropertyVal Name="AutocompleteAppliesStandardCase">true</PropertyVal>
  <PropertyVal Name="AutoCloseBrackets">false</PropertyVal>
  <PropertyVal Name="EraseBackground"></PropertyVal>
  <PropertyVal Name="AcceptTabs">True</PropertyVal>
  <PropertyVal Name="AcceptFocus"></PropertyVal>
  <PropertyVal Name="UseFocusRing">False</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TabIndex">0</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="LockBottom">True</PropertyVal>
  <PropertyVal Name="LockRight">True</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="Height">369</PropertyVal>
  <PropertyVal Name="Width">435</PropertyVal>
  <PropertyVal Name="Top">20</PropertyVal>
  <PropertyVal Name="Left">0</PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Super">CustomScrollableEditField</PropertyVal>
  <PropertyVal Name="Name">TextArea_Input</PropertyVal>
  <PropertyVal Name="Backdrop"></PropertyVal>
  <PropertyVal Name="BackColor">16777215</PropertyVal>
  <PropertyVal Name="HasBackColor">False</PropertyVal>
  <ControlIndex>0</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>Label</ControlClass>
  <ItemName>Label</ItemName>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="DataField"></PropertyVal>
  <PropertyVal Name="DataSource"></PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Bold">False</PropertyVal>
  <PropertyVal Name="TextUnit">0</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="Transparent">False</PropertyVal>
  <PropertyVal Name="Selectable">False</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Multiline"></PropertyVal>
  <PropertyVal Name="TextColor">0</PropertyVal>
  <PropertyVal Name="TextAlign">0</PropertyVal>
  <PropertyVal Name="Text"></PropertyVal>
  <PropertyVal Name="TabIndex">1</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="Width">356</PropertyVal>
  <PropertyVal Name="Top">0</PropertyVal>
  <PropertyVal Name="Left">81</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Super">Label</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Name">Label_Value</PropertyVal>
  <ControlIndex>1</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>Label</ControlClass>
  <ItemName>Label</ItemName>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="DataField"></PropertyVal>
  <PropertyVal Name="DataSource"></PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Bold">True</PropertyVal>
  <PropertyVal Name="TextUnit">0</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="Transparent">False</PropertyVal>
  <PropertyVal Name="Selectable">False</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Multiline"></PropertyVal>
  <PropertyVal Name="TextColor">0</PropertyVal>
  <PropertyVal Name="TextAlign">0</PropertyVal>
  <PropertyVal Name="Text"></PropertyVal>
  <PropertyVal Name="TabIndex">2</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockTop">False</PropertyVal>
  <PropertyVal Name="LockLeft">False</PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="Width">86</PropertyVal>
  <PropertyVal Name="Top">0</PropertyVal>
  <PropertyVal Name="Left">0</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Super">Label</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Name">Label_Label</PropertyVal>
  <ControlIndex>2</ControlIndex>
  <Locked>0</Locked>
 </Control>
</block>
<block type="Window" ID="1240101391">
 <ObjName>Container_XmlXslInput</ObjName>
 <ObjContainerID>1418977445</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>ContainerControl</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <PropertyVal Name="EraseBackground">True</PropertyVal>
 <PropertyVal Name="AcceptTabs">True</PropertyVal>
 <PropertyVal Name="AcceptFocus"></PropertyVal>
 <PropertyVal Name="Backdrop"></PropertyVal>
 <PropertyVal Name="BackColor">16777215</PropertyVal>
 <PropertyVal Name="HasBackColor">False</PropertyVal>
 <PropertyVal Name="UseFocusRing"></PropertyVal>
 <PropertyVal Name="HelpTag"></PropertyVal>
 <PropertyVal Name="AutoDeactivate">True</PropertyVal>
 <PropertyVal Name="Enabled">True</PropertyVal>
 <PropertyVal Name="Visible">True</PropertyVal>
 <PropertyVal Name="TabStop">True</PropertyVal>
 <PropertyVal Name="TabIndex">0</PropertyVal>
 <PropertyVal Name="TabPanelIndex">0</PropertyVal>
 <PropertyVal Name="LockBottom">True</PropertyVal>
 <PropertyVal Name="LockRight">True</PropertyVal>
 <PropertyVal Name="LockTop">True</PropertyVal>
 <PropertyVal Name="LockLeft">True</PropertyVal>
 <PropertyVal Name="Height">632</PropertyVal>
 <PropertyVal Name="Width">882</PropertyVal>
 <PropertyVal Name="Top">0</PropertyVal>
 <PropertyVal Name="Left">0</PropertyVal>
 <PropertyVal Name="InitialParent"></PropertyVal>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>InitialParent</ObjName>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>String</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Width</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>300</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Height</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>300</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockLeft</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockTop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockRight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockBottom</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabPanelIndex</ObjName>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabIndex</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabStop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Visible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Enabled</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AutoDeactivate</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HelpTag</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>String</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>UseFocusRing</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HasBackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>BackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>&amp;hFFFFFF</PropertyValue>
   <ItemType>Color</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Backdrop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>Picture</ItemType>
   <EditorType>Picture</EditorType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AcceptFocus</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AcceptTabs</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EraseBackground</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>XML_INPUT_LABEL</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>XML_INPUT_LABEL</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>Source XML:</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>XSL_INPUT_LABEL</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>XSL_INPUT_LABEL</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>Source XSL:</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <ControlBehavior>
  <Superclass>CustomScrollableEditField</Superclass>
  <HookInstance>
   <ItemName>TextChanged</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub TextChanged()</SourceLine>
    <SourceLine>// function: TextChanged</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// As the text in these inputs changes, monitor the text so</SourceLine>
    <SourceLine>// that certain functions get enabled/disabled</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>Window_Main.EnableFunctions()</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>Open</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Open()</SourceLine>
    <SourceLine>// function: Open</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// When this text field opens, start its SyntaxDefinition engine</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>Dim SyntaxDefinition As HighlightDefinition = App.XmlHighlightDefinition</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>If Me.SyntaxDefinition = SyntaxDefinition Then Return</SourceLine>
    <SourceLine>Me.SyntaxDefinition = SyntaxDefinition</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>MarsSplitter</Superclass>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>MarsSplitter</Superclass>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>Container_TextAreaAndLabel</Superclass>
  <HookInstance>
   <ItemName>Open</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Open()</SourceLine>
    <SourceLine>// function Open</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// Set initial label text</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>Me.Label_Label.Text = XML_INPUT_LABEL</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>Container_TextAreaAndLabel</Superclass>
  <HookInstance>
   <ItemName>Open</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Open()</SourceLine>
    <SourceLine>// function Open</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// Set initial label text</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>Me.Label_Label.Text = XSL_INPUT_LABEL</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <Control>
  <ControlClass>CustomScrollableEditField</ControlClass>
  <ItemName>CustomScrollableEditField</ItemName>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="ThickInsertionPoint">true</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextSelectionColor">0</PropertyVal>
  <PropertyVal Name="TextLength">0</PropertyVal>
  <PropertyVal Name="TextHeight">0</PropertyVal>
  <PropertyVal Name="TextFont">Courier</PropertyVal>
  <PropertyVal Name="TextColor">0</PropertyVal>
  <PropertyVal Name="Text"></PropertyVal>
  <PropertyVal Name="TabWidth">0</PropertyVal>
  <PropertyVal Name="SelStart">0</PropertyVal>
  <PropertyVal Name="SelLength">0</PropertyVal>
  <PropertyVal Name="ScrollPositionX">0</PropertyVal>
  <PropertyVal Name="ScrollPosition">0</PropertyVal>
  <PropertyVal Name="RightMarginAtPixel">0</PropertyVal>
  <PropertyVal Name="RighScrollMargin">0</PropertyVal>
  <PropertyVal Name="MaxVisibleLines">0</PropertyVal>
  <PropertyVal Name="LineNumbersTextSize">9</PropertyVal>
  <PropertyVal Name="LineNumbersTextFont">System</PropertyVal>
  <PropertyVal Name="LineNumbersColor">8947848</PropertyVal>
  <PropertyVal Name="LeftMarginOffset">4</PropertyVal>
  <PropertyVal Name="HighlightMatchingBracketsMode">0</PropertyVal>
  <PropertyVal Name="HighlightMatchingBrackets">true</PropertyVal>
  <PropertyVal Name="GutterWidth">0</PropertyVal>
  <PropertyVal Name="GutterSeparationLineColor">8947848</PropertyVal>
  <PropertyVal Name="GutterBackgroundColor">15658734</PropertyVal>
  <PropertyVal Name="EnableLineFoldings">false</PropertyVal>
  <PropertyVal Name="EnableAutocomplete">false</PropertyVal>
  <PropertyVal Name="DisplayRightMarginMarker">false</PropertyVal>
  <PropertyVal Name="DisplayLineNumbers">true</PropertyVal>
  <PropertyVal Name="DisplayInvisibleCharacters">false</PropertyVal>
  <PropertyVal Name="DisplayDirtyLines">false</PropertyVal>
  <PropertyVal Name="DirtyLinesColor">16751001</PropertyVal>
  <PropertyVal Name="ClearHighlightedRangesOnTextChange">true</PropertyVal>
  <PropertyVal Name="CaretPos">0</PropertyVal>
  <PropertyVal Name="CaretColor">0</PropertyVal>
  <PropertyVal Name="BorderColor">8947848</PropertyVal>
  <PropertyVal Name="Border">True</PropertyVal>
  <PropertyVal Name="AutoIndentNewLines">true</PropertyVal>
  <PropertyVal Name="AutocompleteAppliesStandardCase">true</PropertyVal>
  <PropertyVal Name="AutoCloseBrackets">false</PropertyVal>
  <PropertyVal Name="EraseBackground"></PropertyVal>
  <PropertyVal Name="AcceptTabs"></PropertyVal>
  <PropertyVal Name="AcceptFocus"></PropertyVal>
  <PropertyVal Name="UseFocusRing">False</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="Enabled">False</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TabIndex">0</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="LockBottom">True</PropertyVal>
  <PropertyVal Name="LockRight">True</PropertyVal>
  <PropertyVal Name="LockTop">False</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="Height">231</PropertyVal>
  <PropertyVal Name="Width">882</PropertyVal>
  <PropertyVal Name="Top">401</PropertyVal>
  <PropertyVal Name="Left">0</PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Super">CustomScrollableEditField</PropertyVal>
  <PropertyVal Name="Name">TextArea_Output</PropertyVal>
  <PropertyVal Name="Backdrop"></PropertyVal>
  <PropertyVal Name="BackColor">16777215</PropertyVal>
  <PropertyVal Name="HasBackColor">False</PropertyVal>
  <ControlIndex>0</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>MarsSplitter</ControlClass>
  <ItemName>MarsSplitter</ItemName>
  <PropertyVal Name="MinBottomRight">0</PropertyVal>
  <PropertyVal Name="MinTopLeft">0</PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="EraseBackground">True</PropertyVal>
  <PropertyVal Name="AcceptTabs"></PropertyVal>
  <PropertyVal Name="AcceptFocus"></PropertyVal>
  <PropertyVal Name="Backdrop"></PropertyVal>
  <PropertyVal Name="UseFocusRing">True</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="TabIndex">1</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="LockBottom">True</PropertyVal>
  <PropertyVal Name="LockRight">True</PropertyVal>
  <PropertyVal Name="LockTop">False</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="Height">12</PropertyVal>
  <PropertyVal Name="Width">882</PropertyVal>
  <PropertyVal Name="Top">389</PropertyVal>
  <PropertyVal Name="Left">0</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Super">MarsSplitter</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Name">MarsSplitter1</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="DoubleBuffer">False</PropertyVal>
  <ControlIndex>1</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>MarsSplitter</ControlClass>
  <ItemName>MarsSplitter</ItemName>
  <PropertyVal Name="MinBottomRight">0</PropertyVal>
  <PropertyVal Name="MinTopLeft">0</PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="EraseBackground">True</PropertyVal>
  <PropertyVal Name="AcceptTabs"></PropertyVal>
  <PropertyVal Name="AcceptFocus"></PropertyVal>
  <PropertyVal Name="Backdrop"></PropertyVal>
  <PropertyVal Name="UseFocusRing">True</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="TabIndex">3</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="LockBottom">True</PropertyVal>
  <PropertyVal Name="LockRight">False</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockLeft">False</PropertyVal>
  <PropertyVal Name="Height">389</PropertyVal>
  <PropertyVal Name="Width">12</PropertyVal>
  <PropertyVal Name="Top">0</PropertyVal>
  <PropertyVal Name="Left">435</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Super">MarsSplitter</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Name">XmlXslSplitter</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="DoubleBuffer">False</PropertyVal>
  <ControlIndex>2</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>Container_TextAreaAndLabel</ControlClass>
  <ItemName>Container_TextAreaAndLabel</ItemName>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="EraseBackground">True</PropertyVal>
  <PropertyVal Name="AcceptTabs">True</PropertyVal>
  <PropertyVal Name="AcceptFocus"></PropertyVal>
  <PropertyVal Name="Backdrop"></PropertyVal>
  <PropertyVal Name="BackColor">16777215</PropertyVal>
  <PropertyVal Name="HasBackColor">False</PropertyVal>
  <PropertyVal Name="UseFocusRing"></PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TabIndex">4</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="LockBottom">True</PropertyVal>
  <PropertyVal Name="LockRight">False</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="Height">389</PropertyVal>
  <PropertyVal Name="Width">435</PropertyVal>
  <PropertyVal Name="Top">0</PropertyVal>
  <PropertyVal Name="Left">0</PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Super">Container_TextAreaAndLabel</PropertyVal>
  <PropertyVal Name="Name">Container_XmlInput</PropertyVal>
  <ControlIndex>3</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>Container_TextAreaAndLabel</ControlClass>
  <ItemName>Container_TextAreaAndLabel</ItemName>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="EraseBackground">True</PropertyVal>
  <PropertyVal Name="AcceptTabs">True</PropertyVal>
  <PropertyVal Name="AcceptFocus"></PropertyVal>
  <PropertyVal Name="Backdrop"></PropertyVal>
  <PropertyVal Name="BackColor">16777215</PropertyVal>
  <PropertyVal Name="HasBackColor">False</PropertyVal>
  <PropertyVal Name="UseFocusRing"></PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TabIndex">5</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="LockBottom">True</PropertyVal>
  <PropertyVal Name="LockRight">True</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="Height">389</PropertyVal>
  <PropertyVal Name="Width">435</PropertyVal>
  <PropertyVal Name="Top">0</PropertyVal>
  <PropertyVal Name="Left">447</PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Super">Container_TextAreaAndLabel</PropertyVal>
  <PropertyVal Name="Name">Container_XslInput</PropertyVal>
  <ControlIndex>4</ControlIndex>
  <Locked>0</Locked>
 </Control>
</block>
<block type="Folder" ID="584792787">
 <ObjName>Menus</ObjName>
 <ObjContainerID>0</ObjContainerID>
</block>
<block type="Menu" ID="258881810">
 <ObjName>Menu_MainMenu</ObjName>
 <ObjContainerID>584792787</ObjContainerID>
 <MenuItem>
  <ItemSpecialMenu>0</ItemSpecialMenu>
  <ItemName>FileMenu</ItemName>
  <ItemText>&amp;File</ItemText>
  <ItemIndex>-2147483648</ItemIndex>
  <ItemShortcut></ItemShortcut>
  <MenuAutoEnable>1</MenuAutoEnable>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>0</ItemFlags>
  <Superclass>MenuItem</Superclass>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>FileOpenXML</ItemName>
   <ItemText>Open XML...</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>1</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>FileOpenXSLT</ItemName>
   <ItemText>Open XSLT...</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>1</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>UntitledSeparator4</ItemName>
   <ItemText>-</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>1</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>FileClearAll</ItemName>
   <ItemText>Clear All</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>0</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>FileClearXML</ItemName>
   <ItemText>Clear XML</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>0</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>FileClearXSLT</ItemName>
   <ItemText>Clear XSLT</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>0</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>FileClearOutput</ItemName>
   <ItemText>Clear Output</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>0</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>UntitledSeparator</ItemName>
   <ItemText>-</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>1</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>FileSaveXML</ItemName>
   <ItemText>Save XML...</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>0</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>FileSaveXSLT</ItemName>
   <ItemText>Save XSLT...</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>0</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>FileSaveOutput</ItemName>
   <ItemText>Save Output...</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>0</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>UntitledSeparator0</ItemName>
   <ItemText>-</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>1</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>FileTransform</ItemName>
   <ItemText>Transform</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut>F9</ItemShortcut>
   <MenuShortcut>F9</MenuShortcut>
   <MenuAutoEnable>0</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>UntitledSeparator1</ItemName>
   <ItemText>-</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>1</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>FileQuit</ItemName>
   <ItemText>#App.kFileQuit</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut>#App.kFileQuitShortcut</ItemShortcut>
   <MenuShortcut>#App.kFileQuitShortcut</MenuShortcut>
   <MenuAutoEnable>1</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>QuitMenuItem</Superclass>
  </MenuItem>
 </MenuItem>
 <MenuItem>
  <ItemSpecialMenu>0</ItemSpecialMenu>
  <ItemName>EditMenu</ItemName>
  <ItemText>&amp;Edit</ItemText>
  <ItemIndex>-2147483648</ItemIndex>
  <ItemShortcut></ItemShortcut>
  <MenuAutoEnable>1</MenuAutoEnable>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>0</ItemFlags>
  <Superclass>MenuItem</Superclass>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>EditUndo</ItemName>
   <ItemText>&amp;Undo</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut>Cmd+Z</ItemShortcut>
   <MenuShortcut>Z</MenuShortcut>
   <MenuShortcutModifier>1</MenuShortcutModifier>
   <MenuAutoEnable>1</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>UntitledMenu1</ItemName>
   <ItemText>-</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>1</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>EditCut</ItemName>
   <ItemText>Cu&amp;t</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut>Cmd+X</ItemShortcut>
   <MenuShortcut>X</MenuShortcut>
   <MenuShortcutModifier>1</MenuShortcutModifier>
   <MenuAutoEnable>1</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>EditCopy</ItemName>
   <ItemText>&amp;Copy</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut>Cmd+C</ItemShortcut>
   <MenuShortcut>C</MenuShortcut>
   <MenuShortcutModifier>1</MenuShortcutModifier>
   <MenuAutoEnable>1</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>EditPaste</ItemName>
   <ItemText>&amp;Paste</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut>Cmd+V</ItemShortcut>
   <MenuShortcut>V</MenuShortcut>
   <MenuShortcutModifier>1</MenuShortcutModifier>
   <MenuAutoEnable>1</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>EditClear</ItemName>
   <ItemText>#App.kEditClear</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>1</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>UntitledMenu0</ItemName>
   <ItemText>-</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>1</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>EditSelectAll</ItemName>
   <ItemText>Select &amp;All</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut>Cmd+A</ItemShortcut>
   <MenuShortcut>A</MenuShortcut>
   <MenuShortcutModifier>1</MenuShortcutModifier>
   <MenuAutoEnable>1</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
 </MenuItem>
 <MenuItem>
  <ItemSpecialMenu>0</ItemSpecialMenu>
  <ItemName>ToolsMenu</ItemName>
  <ItemText>&amp;Tools</ItemText>
  <ItemIndex>-2147483648</ItemIndex>
  <ItemShortcut></ItemShortcut>
  <MenuAutoEnable>1</MenuAutoEnable>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>0</ItemFlags>
  <Superclass>MenuItem</Superclass>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>ToolsLoadXSLT</ItemName>
   <ItemText>XSLT Templates...</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut>Cmd+Shift+t</ItemShortcut>
   <MenuShortcut>t</MenuShortcut>
   <MenuShortcutModifier>1</MenuShortcutModifier>
   <AlternateShortcutModifier>1</AlternateShortcutModifier>
   <MenuAutoEnable>1</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>UntitledSeparator3</ItemName>
   <ItemText>-</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>1</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>ToolsXPathAnalyzer</ItemName>
   <ItemText>XPath Analyzer...</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut>Cmd+Shift+x</ItemShortcut>
   <MenuShortcut>x</MenuShortcut>
   <MenuShortcutModifier>1</MenuShortcutModifier>
   <AlternateShortcutModifier>1</AlternateShortcutModifier>
   <MenuAutoEnable>0</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>UntitledSeparator2</ItemName>
   <ItemText>-</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>1</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>ToolsTidyAll</ItemName>
   <ItemText>TIDY All</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>0</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>ToolsTidyXML</ItemName>
   <ItemText>TIDY XML</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>0</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>ToolsTidyXSL</ItemName>
   <ItemText>TIDY XSL</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>0</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
  <MenuItem>
   <ItemSpecialMenu>0</ItemSpecialMenu>
   <ItemName>ToolsTidyOutput</ItemName>
   <ItemText>TIDY Output</ItemText>
   <ItemIndex>-2147483648</ItemIndex>
   <ItemShortcut></ItemShortcut>
   <MenuAutoEnable>0</MenuAutoEnable>
   <TextEncoding>134217984</TextEncoding>
   <ItemFlags>0</ItemFlags>
   <Superclass>MenuItem</Superclass>
  </MenuItem>
 </MenuItem>
</block>
<block type="Folder" ID="1727219243">
 <ObjName>Windows</ObjName>
 <ObjContainerID>0</ObjContainerID>
</block>
<block type="Window" ID="1566538455">
 <ObjName>Window_XPathAnalyzer</ObjName>
 <ObjContainerID>1727219243</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>Window</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <HookInstance>
  <ItemName>Open</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Open()</SourceLine>
   <SourceLine>// function: Open</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// If we've entered an XPath previously, put it in the</SourceLine>
   <SourceLine>// TextArea and set the focus to be the end of the line</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Window_Main.previousXPath &lt;&gt; "" Then</SourceLine>
   <SourceLine>TextField_XPath.Text = Window_Main.previousXPath</SourceLine>
   <SourceLine>TextField_XPath.SetFocus()</SourceLine>
   <SourceLine>TextField_XPath.SelStart = TextField_XPath.Text.Len</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>TextField_XPath.Text = ""</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <PropertyVal Name="ImplicitInstance">True</PropertyVal>
 <PropertyVal Name="MenuBar"></PropertyVal>
 <PropertyVal Name="MacProcID">0</PropertyVal>
 <PropertyVal Name="MinimizeButton">True</PropertyVal>
 <PropertyVal Name="MaximizeButton">False</PropertyVal>
 <PropertyVal Name="LiveResize">True</PropertyVal>
 <PropertyVal Name="Resizeable">False</PropertyVal>
 <PropertyVal Name="CloseButton">True</PropertyVal>
 <PropertyVal Name="MenuBarVisible">True</PropertyVal>
 <PropertyVal Name="FullScreen">False</PropertyVal>
 <PropertyVal Name="Visible">True</PropertyVal>
 <PropertyVal Name="Title">XPath Analyzer</PropertyVal>
 <PropertyVal Name="Backdrop"></PropertyVal>
 <PropertyVal Name="BackColor">16777215</PropertyVal>
 <PropertyVal Name="HasBackColor">False</PropertyVal>
 <PropertyVal Name="Composite">False</PropertyVal>
 <PropertyVal Name="Frame">1</PropertyVal>
 <PropertyVal Name="MaxHeight">32000</PropertyVal>
 <PropertyVal Name="MaxWidth">32000</PropertyVal>
 <PropertyVal Name="MinHeight">64</PropertyVal>
 <PropertyVal Name="MinWidth">64</PropertyVal>
 <PropertyVal Name="Height">100</PropertyVal>
 <PropertyVal Name="Width">798</PropertyVal>
 <PropertyVal Name="Placement">0</PropertyVal>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Interfaces</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Placement</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <InheritsFrom>Window</InheritsFrom>
   <Enumeration>
    <ItemDef>0 - Default</ItemDef>
    <ItemDef>1 - Parent Window</ItemDef>
    <ItemDef>2 - Main Screen</ItemDef>
    <ItemDef>3 - Parent Window Screen</ItemDef>
    <ItemDef>4 - Stagger</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Width</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>600</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Height</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>400</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinWidth</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>64</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinHeight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>64</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaxWidth</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>32000</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaxHeight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>32000</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Frame</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <InheritsFrom>Window</InheritsFrom>
   <Enumeration>
    <ItemDef>0 - Document</ItemDef>
    <ItemDef>1 - Movable Modal</ItemDef>
    <ItemDef>2 - Modal Dialog</ItemDef>
    <ItemDef>3 - Floating Window</ItemDef>
    <ItemDef>4 - Plain Box</ItemDef>
    <ItemDef>5 - Shadowed Box</ItemDef>
    <ItemDef>6 - Rounded Window</ItemDef>
    <ItemDef>7 - Global Floating Window</ItemDef>
    <ItemDef>8 - Sheet Window</ItemDef>
    <ItemDef>9 - Metal Window</ItemDef>
    <ItemDef>10 - Drawer Window</ItemDef>
    <ItemDef>11 - Modeless Dialog</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Composite</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HasBackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>BackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>&amp;hFFFFFF</PropertyValue>
   <ItemType>Color</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Backdrop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>Picture</ItemType>
   <EditorType>Picture</EditorType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Title</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>Untitled</PropertyValue>
   <ItemType>String</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Visible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>FullScreen</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MenuBarVisible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>CloseButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Resizeable</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LiveResize</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaximizeButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinimizeButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MacProcID</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MenuBar</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>MenuBar</ItemType>
   <EditorType>MenuBar</EditorType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ImplicitInstance</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <EditorType>Boolean</EditorType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
 <ControlBehavior>
  <Superclass>Label</Superclass>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>TextField</Superclass>
  <HookInstance>
   <ItemName>TextChange</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub TextChange()</SourceLine>
    <SourceLine>// function: TextChange</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// Monitor the text in this TextField; when nonempty,</SourceLine>
    <SourceLine>// enable the "Analyze" button</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>If Me.Text &lt;&gt; "" Then</SourceLine>
    <SourceLine>Button_Analyze.Enabled = True</SourceLine>
    <SourceLine>Else</SourceLine>
    <SourceLine>Button_Analyze.Enabled = False</SourceLine>
    <SourceLine>End If</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>PushButton</Superclass>
  <HookInstance>
   <ItemName>Action</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Action()</SourceLine>
    <SourceLine>// function: Action</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// Analyze the provided XPath against the XML in the</SourceLine>
    <SourceLine>// XML input TextArea</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>Dim inputXml As CustomScrollableEditField = Window_Main.Container_InputXmlXsl.Container_XmlInput.TextArea_Input</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Run the XPath analysis and store the results</SourceLine>
    <SourceLine>Dim results As String = App.CurrentXsltParser.AnalyzeXpath(inputXml.Text, TextField_XPath.Text)</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// If the results are not Nil, put them into the output window (TIDYed)</SourceLine>
    <SourceLine>If results &lt;&gt; "" Then</SourceLine>
    <SourceLine>Window_Main.Container_InputXmlXsl.TextArea_Output.Text = results</SourceLine>
    <SourceLine>//Window_Main.Container_InputXmlXsl.Container_XmlInput.TextArea_Input.HighlightCharacterRange(first, Len(results), &amp;cFFD700)</SourceLine>
    <SourceLine>End If</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Store this XPath for later use</SourceLine>
    <SourceLine>Window_Main.previousXPath = TextField_XPath.Text</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// No matter what, close the modal window</SourceLine>
    <SourceLine>Me.Window.Close</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>PushButton</Superclass>
  <HookInstance>
   <ItemName>Action</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Action()</SourceLine>
    <SourceLine>// function: Action</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Clear the previousXPath property</SourceLine>
    <SourceLine>Window_Main.previousXPath = ""</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Close the modal window</SourceLine>
    <SourceLine>Me.Window.Close</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <Control>
  <ControlClass>Label</ControlClass>
  <ItemName>Label</ItemName>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="Name">Label_AnalyzerHeader</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Left">14</PropertyVal>
  <PropertyVal Name="Top">9</PropertyVal>
  <PropertyVal Name="Width">764</PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabIndex">0</PropertyVal>
  <PropertyVal Name="Text">XPath to analyze (on Source XML):</PropertyVal>
  <PropertyVal Name="TextAlign">0</PropertyVal>
  <PropertyVal Name="TextColor">0</PropertyVal>
  <PropertyVal Name="Multiline"></PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="Selectable">False</PropertyVal>
  <PropertyVal Name="Transparent">False</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextUnit">0</PropertyVal>
  <PropertyVal Name="Bold">True</PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="DataSource"></PropertyVal>
  <PropertyVal Name="DataField"></PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Super">Label</PropertyVal>
  <ControlIndex>0</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>TextField</ControlClass>
  <ItemName>TextField</ItemName>
  <PropertyVal Name="Name">TextField_XPath</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Left">14</PropertyVal>
  <PropertyVal Name="Top">34</PropertyVal>
  <PropertyVal Name="Width">770</PropertyVal>
  <PropertyVal Name="Height">22</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabIndex">1</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="Border">True</PropertyVal>
  <PropertyVal Name="Password"></PropertyVal>
  <PropertyVal Name="UseFocusRing">True</PropertyVal>
  <PropertyVal Name="TextColor">0</PropertyVal>
  <PropertyVal Name="BackColor">16777215</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Format"></PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextUnit">0</PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="CueText"></PropertyVal>
  <PropertyVal Name="Text"></PropertyVal>
  <PropertyVal Name="Mask"></PropertyVal>
  <PropertyVal Name="ReadOnly"></PropertyVal>
  <PropertyVal Name="LimitText">0</PropertyVal>
  <PropertyVal Name="AcceptTabs"></PropertyVal>
  <PropertyVal Name="Alignment">0</PropertyVal>
  <PropertyVal Name="AutomaticallyCheckSpelling">False</PropertyVal>
  <PropertyVal Name="DataSource"></PropertyVal>
  <PropertyVal Name="DataField"></PropertyVal>
  <PropertyVal Name="Super">TextField</PropertyVal>
  <ControlIndex>1</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>PushButton</ControlClass>
  <ItemName>PushButton</ItemName>
  <PropertyVal Name="Name">Button_Analyze</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Left">704</PropertyVal>
  <PropertyVal Name="Top">68</PropertyVal>
  <PropertyVal Name="Width">80</PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabIndex">2</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="Caption">Analyze</PropertyVal>
  <PropertyVal Name="Default">True</PropertyVal>
  <PropertyVal Name="Cancel"></PropertyVal>
  <PropertyVal Name="Enabled">False</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="ButtonStyle">0</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextUnit">0</PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Super">PushButton</PropertyVal>
  <ControlIndex>2</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>PushButton</ControlClass>
  <ItemName>PushButton</ItemName>
  <PropertyVal Name="Name">Button_Cancel</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Left">14</PropertyVal>
  <PropertyVal Name="Top">68</PropertyVal>
  <PropertyVal Name="Width">80</PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabIndex">3</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="Caption">Close</PropertyVal>
  <PropertyVal Name="Default">False</PropertyVal>
  <PropertyVal Name="Cancel">True</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="ButtonStyle">0</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextUnit">0</PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Super">PushButton</PropertyVal>
  <ControlIndex>3</ControlIndex>
  <Locked>0</Locked>
 </Control>
</block>
<block type="Window" ID="1442849415">
 <ObjName>Window_XsltTemplates</ObjName>
 <ObjContainerID>1727219243</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>Window</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <HookInstance>
  <ItemName>Open</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Open()</SourceLine>
   <SourceLine>// function: Open</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// When the window opens, populate the Listbox with</SourceLine>
   <SourceLine>// all XSLT templates saved in the DB</SourceLine>
   <SourceLine>Me.PopulateXsltTemplates()</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <Method>
  <ItemName>PopulateXsltTemplates</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub PopulateXsltTemplates()</SourceLine>
   <SourceLine>// function: PopulateXsltTemplates</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Populate the template Listbox with the data</SourceLine>
   <SourceLine>// from the database</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim sql As string</SourceLine>
   <SourceLine>Dim rs As RecordSet</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Select all templates from the DB and insert them into the Listbox</SourceLine>
   <SourceLine>sql = "SELECT id, title, description, transform FROM " + App.DB_TABLE_XSLT_TEMPLATE</SourceLine>
   <SourceLine>rs = App.MainDB.SQLSelect(sql)</SourceLine>
   <SourceLine>App.PopulateListbox(Listbox_TemplateList, rs)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <PropertyVal Name="ImplicitInstance">True</PropertyVal>
 <PropertyVal Name="MenuBar"></PropertyVal>
 <PropertyVal Name="MacProcID">0</PropertyVal>
 <PropertyVal Name="MinimizeButton">True</PropertyVal>
 <PropertyVal Name="MaximizeButton">False</PropertyVal>
 <PropertyVal Name="LiveResize">False</PropertyVal>
 <PropertyVal Name="Resizeable">False</PropertyVal>
 <PropertyVal Name="CloseButton">True</PropertyVal>
 <PropertyVal Name="MenuBarVisible">True</PropertyVal>
 <PropertyVal Name="FullScreen">False</PropertyVal>
 <PropertyVal Name="Visible">True</PropertyVal>
 <PropertyVal Name="Title">Pick an XSLT template to load into editor</PropertyVal>
 <PropertyVal Name="Backdrop"></PropertyVal>
 <PropertyVal Name="BackColor">16777215</PropertyVal>
 <PropertyVal Name="HasBackColor">False</PropertyVal>
 <PropertyVal Name="Composite">True</PropertyVal>
 <PropertyVal Name="Frame">1</PropertyVal>
 <PropertyVal Name="MaxHeight">32000</PropertyVal>
 <PropertyVal Name="MaxWidth">32000</PropertyVal>
 <PropertyVal Name="MinHeight">64</PropertyVal>
 <PropertyVal Name="MinWidth">64</PropertyVal>
 <PropertyVal Name="Height">400</PropertyVal>
 <PropertyVal Name="Width">600</PropertyVal>
 <PropertyVal Name="Placement">0</PropertyVal>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Interfaces</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Placement</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <InheritsFrom>Window</InheritsFrom>
   <Enumeration>
    <ItemDef>0 - Default</ItemDef>
    <ItemDef>1 - Parent Window</ItemDef>
    <ItemDef>2 - Main Screen</ItemDef>
    <ItemDef>3 - Parent Window Screen</ItemDef>
    <ItemDef>4 - Stagger</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Width</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>600</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Height</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>400</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinWidth</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>64</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinHeight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>64</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaxWidth</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>32000</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaxHeight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>32000</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Frame</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <InheritsFrom>Window</InheritsFrom>
   <Enumeration>
    <ItemDef>0 - Document</ItemDef>
    <ItemDef>1 - Movable Modal</ItemDef>
    <ItemDef>2 - Modal Dialog</ItemDef>
    <ItemDef>3 - Floating Window</ItemDef>
    <ItemDef>4 - Plain Box</ItemDef>
    <ItemDef>5 - Shadowed Box</ItemDef>
    <ItemDef>6 - Rounded Window</ItemDef>
    <ItemDef>7 - Global Floating Window</ItemDef>
    <ItemDef>8 - Sheet Window</ItemDef>
    <ItemDef>9 - Metal Window</ItemDef>
    <ItemDef>10 - Drawer Window</ItemDef>
    <ItemDef>11 - Modeless Dialog</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Composite</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HasBackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>BackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>&amp;hFFFFFF</PropertyValue>
   <ItemType>Color</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Backdrop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>Picture</ItemType>
   <EditorType>Picture</EditorType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Title</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>Untitled</PropertyValue>
   <ItemType>String</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Visible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>FullScreen</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MenuBarVisible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>CloseButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Resizeable</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LiveResize</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaximizeButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinimizeButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MacProcID</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MenuBar</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>MenuBar</ItemType>
   <EditorType>MenuBar</EditorType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ImplicitInstance</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <EditorType>Boolean</EditorType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
 <ControlBehavior>
  <Superclass>AlternatingListBox</Superclass>
  <HookInstance>
   <ItemName>Open</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Open()</SourceLine>
    <SourceLine>// function: Open</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// Set some opening properties for this Listbox</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// When opening this Listbox, set the header values</SourceLine>
    <SourceLine>Me.Heading(0) = "ID"</SourceLine>
    <SourceLine>Me.Heading(1) = "Name"</SourceLine>
    <SourceLine>Me.Heading(2) = "Description"</SourceLine>
    <SourceLine>Me.Heading(3) = "Transform"</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Allow the columns to be resized</SourceLine>
    <SourceLine>me.ColumnsResizable = True</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>Change</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Change()</SourceLine>
    <SourceLine>// function: Change</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Enable the "Load" and "Delete" buttons only when we've selected a row</SourceLine>
    <SourceLine>if Listbox_TemplateList.ListIndex &lt;&gt; -1 then</SourceLine>
    <SourceLine>Button_Load.Enabled = true</SourceLine>
    <SourceLine>Button_Delete.Enabled = true</SourceLine>
    <SourceLine>end if</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>DoubleClick</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub DoubleClick()</SourceLine>
    <SourceLine>// function: DoubleClick</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// Load the selected template into the XSL input TextArea</SourceLine>
    <SourceLine>// and close the modal window</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Populate the XSLT TextArea with the selected XSLT</SourceLine>
    <SourceLine>dim xslToLoad as String = Listbox_TemplateList.Cell(Listbox_TemplateList.ListIndex, 3)</SourceLine>
    <SourceLine>dim textAreaToPopulate as CustomScrollableEditField = Window_Main.Container_InputXmlXsl.Container_XslInput.TextArea_Input</SourceLine>
    <SourceLine>textAreaToPopulate.Text = App.CurrentXsltParser.Tidy(xslToLoad)</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Close the modal window</SourceLine>
    <SourceLine>Me.Window.Close</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>PushButton</Superclass>
  <HookInstance>
   <ItemName>Action</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Action()</SourceLine>
    <SourceLine>// function: Action</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// Close this window</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Close the modal window</SourceLine>
    <SourceLine>Me.Window.Close</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>PushButton</Superclass>
  <HookInstance>
   <ItemName>Action</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Action()</SourceLine>
    <SourceLine>// function: Action</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// Load the selected template into the XSL input TextArea</SourceLine>
    <SourceLine>// and close the modal window</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Populate the XSLT TextArea with the selected XSLT</SourceLine>
    <SourceLine>dim xslToLoad as String = Listbox_TemplateList.Cell(Listbox_TemplateList.ListIndex, 3)</SourceLine>
    <SourceLine>dim textAreaToPopulate as CustomScrollableEditField = Window_Main.Container_InputXmlXsl.Container_XslInput.TextArea_Input</SourceLine>
    <SourceLine>textAreaToPopulate.Text = App.CurrentXsltParser.Tidy(xslToLoad)</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Close the modal window</SourceLine>
    <SourceLine>Me.Window.Close</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>PushButton</Superclass>
  <HookInstance>
   <ItemName>Action</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Action()</SourceLine>
    <SourceLine>// function: Action</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// Show the Window_ImportXsl window</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Show the modal window that allows</SourceLine>
    <SourceLine>// the user to import XSLT templates</SourceLine>
    <SourceLine>Window_ImportXsl.Show()</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>PushButton</Superclass>
  <HookInstance>
   <ItemName>Action</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Action()</SourceLine>
    <SourceLine>// function: Action</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// Deletes the selected record from the database</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>dim idToDelete as String = Listbox_TemplateList.Cell(Listbox_TemplateList.ListIndex, 0)</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Attempt to delete the selected record</SourceLine>
    <SourceLine>App.MainDB.SQLExecute("DELETE FROM " + App.DB_TABLE_XSLT_TEMPLATE + " WHERE id = '" + idToDelete + "'")</SourceLine>
    <SourceLine>If App.MainDB.Error Then</SourceLine>
    <SourceLine>// If there is some sort of DB error, show it and return</SourceLine>
    <SourceLine>App.DisplayDatabaseError(True)</SourceLine>
    <SourceLine>Return</SourceLine>
    <SourceLine>Else</SourceLine>
    <SourceLine>// If no error, commit the changes to the database and</SourceLine>
    <SourceLine>// repopulate the template Listbox</SourceLine>
    <SourceLine>App.MainDB.Commit()</SourceLine>
    <SourceLine>Window_XsltTemplates.PopulateXsltTemplates()</SourceLine>
    <SourceLine>End If</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <Control>
  <ControlClass>AlternatingListBox</ControlClass>
  <ItemName>AlternatingListBox</ItemName>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="DataField"></PropertyVal>
  <PropertyVal Name="DataSource"></PropertyVal>
  <PropertyVal Name="AutoHideScrollbars">True</PropertyVal>
  <PropertyVal Name="ColumnsResizable"></PropertyVal>
  <PropertyVal Name="SelectionType">0</PropertyVal>
  <PropertyVal Name="RequiresSelection"></PropertyVal>
  <PropertyVal Name="EnableDragReorder"></PropertyVal>
  <PropertyVal Name="EnableDrag"></PropertyVal>
  <PropertyVal Name="Hierarchical"></PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="TextUnit">0</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="_ScrollWidth">-1</PropertyVal>
  <PropertyVal Name="DefaultRowHeight">-1</PropertyVal>
  <PropertyVal Name="GridLinesVertical">0</PropertyVal>
  <PropertyVal Name="GridLinesHorizontal">0</PropertyVal>
  <PropertyVal Name="ScrollBarVertical">True</PropertyVal>
  <PropertyVal Name="ScrollbarHorizontal"></PropertyVal>
  <PropertyVal Name="HeadingIndex">-1</PropertyVal>
  <PropertyVal Name="InitialValue"></PropertyVal>
  <PropertyVal Name="UseFocusRing">True</PropertyVal>
  <PropertyVal Name="HasHeading">True</PropertyVal>
  <PropertyVal Name="ColumnWidths">10%,20%,30%,40%</PropertyVal>
  <PropertyVal Name="ColumnCount">4</PropertyVal>
  <PropertyVal Name="Border">True</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TabIndex">0</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="Height">296</PropertyVal>
  <PropertyVal Name="Width">560</PropertyVal>
  <PropertyVal Name="Top">52</PropertyVal>
  <PropertyVal Name="Left">20</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Name">Listbox_TemplateList</PropertyVal>
  <PropertyVal Name="Super">AlternatingListBox</PropertyVal>
  <ControlIndex>0</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>PushButton</ControlClass>
  <ItemName>PushButton</ItemName>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="TextUnit">0</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="ButtonStyle">0</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Cancel">True</PropertyVal>
  <PropertyVal Name="Default"></PropertyVal>
  <PropertyVal Name="Caption">Close</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TabIndex">1</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="Width">80</PropertyVal>
  <PropertyVal Name="Top">363</PropertyVal>
  <PropertyVal Name="Left">20</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Name">Button_Cancel</PropertyVal>
  <PropertyVal Name="Super">PushButton</PropertyVal>
  <ControlIndex>1</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>PushButton</ControlClass>
  <ItemName>PushButton</ItemName>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="TextUnit">0</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="ButtonStyle">0</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="Enabled">False</PropertyVal>
  <PropertyVal Name="Cancel"></PropertyVal>
  <PropertyVal Name="Default"></PropertyVal>
  <PropertyVal Name="Caption">Load</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TabIndex">2</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="Width">80</PropertyVal>
  <PropertyVal Name="Top">363</PropertyVal>
  <PropertyVal Name="Left">500</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Name">Button_Load</PropertyVal>
  <PropertyVal Name="Super">PushButton</PropertyVal>
  <ControlIndex>2</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>PushButton</ControlClass>
  <ItemName>PushButton</ItemName>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="TextUnit">0</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="ButtonStyle">0</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Cancel"></PropertyVal>
  <PropertyVal Name="Default">False</PropertyVal>
  <PropertyVal Name="Caption">New</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TabIndex">3</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="Width">80</PropertyVal>
  <PropertyVal Name="Top">18</PropertyVal>
  <PropertyVal Name="Left">20</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Name">Button_Define</PropertyVal>
  <PropertyVal Name="Super">PushButton</PropertyVal>
  <ControlIndex>3</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>PushButton</ControlClass>
  <ItemName>PushButton</ItemName>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="TextUnit">0</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="ButtonStyle">0</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="Enabled">False</PropertyVal>
  <PropertyVal Name="Cancel"></PropertyVal>
  <PropertyVal Name="Default">False</PropertyVal>
  <PropertyVal Name="Caption">Delete</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TabIndex">4</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="Width">80</PropertyVal>
  <PropertyVal Name="Top">18</PropertyVal>
  <PropertyVal Name="Left">112</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Name">Button_Delete</PropertyVal>
  <PropertyVal Name="Super">PushButton</PropertyVal>
  <ControlIndex>4</ControlIndex>
  <Locked>0</Locked>
 </Control>
</block>
<block type="Window" ID="531424011">
 <ObjName>Window_Main</ObjName>
 <ObjContainerID>1727219243</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>Window</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <HookInstance>
  <ItemName>EnableMenuItems</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub EnableMenuItems()</SourceLine>
   <SourceLine>// function: EnableMenuItems</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Determines what menu options to enable/disable in the Window_Main window</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>EnableFunctions()</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <MenuHandler>
  <ItemName>FileTransform</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function FileTransform() As Boolean</SourceLine>
   <SourceLine>// function: FileTransform</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>TransformData()</SourceLine>
   <SourceLine>return true</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </MenuHandler>
 <MenuHandler>
  <ItemName>ToolsTidyXML</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ToolsTidyXML() As Boolean</SourceLine>
   <SourceLine>// function: ToolsTidyXML</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>TidyXml()</SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </MenuHandler>
 <MenuHandler>
  <ItemName>ToolsTidyXSL</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ToolsTidyXSL() As Boolean</SourceLine>
   <SourceLine>// function: ToolsTidyXSL</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>TidyXsl()</SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </MenuHandler>
 <MenuHandler>
  <ItemName>FileOpenXML</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function FileOpenXML() As Boolean</SourceLine>
   <SourceLine>// function: FileOpenXML</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.OpenXmlFile()</SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </MenuHandler>
 <MenuHandler>
  <ItemName>FileOpenXSLT</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function FileOpenXSLT() As Boolean</SourceLine>
   <SourceLine>// function: FileOpenXMLT</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.OpenXsltFile()</SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </MenuHandler>
 <MenuHandler>
  <ItemName>ToolsTidyOutput</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ToolsTidyOutput() As Boolean</SourceLine>
   <SourceLine>// function: ToolsTidyOutput</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>TidyOutput()</SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </MenuHandler>
 <MenuHandler>
  <ItemName>FileSaveXML</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function FileSaveXML() As Boolean</SourceLine>
   <SourceLine>// function: FileSaveXML</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>SaveXmlFile()</SourceLine>
   <SourceLine>return true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </MenuHandler>
 <MenuHandler>
  <ItemName>FileSaveXSLT</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function FileSaveXSLT() As Boolean</SourceLine>
   <SourceLine>// function: FileSaveXSLT</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>SaveXsltFile()</SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </MenuHandler>
 <MenuHandler>
  <ItemName>FileSaveOutput</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function FileSaveOutput() As Boolean</SourceLine>
   <SourceLine>// function: FileSaveOutput</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>SaveOutputFile()</SourceLine>
   <SourceLine>return true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </MenuHandler>
 <MenuHandler>
  <ItemName>FileQuit</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function FileQuit() As Boolean</SourceLine>
   <SourceLine>// function: FileQuit</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Quit</SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </MenuHandler>
 <MenuHandler>
  <ItemName>ToolsLoadXSLT</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ToolsLoadXSLT() As Boolean</SourceLine>
   <SourceLine>// function: ToolsLoadXSLT</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Window_XSLTTemplates.Show()</SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </MenuHandler>
 <MenuHandler>
  <ItemName>ToolsXPathAnalyzer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ToolsXPathAnalyzer() As Boolean</SourceLine>
   <SourceLine>// function: ToolsXPathAnalyzer</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Window_XPathAnalyzer.Show()</SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </MenuHandler>
 <MenuHandler>
  <ItemName>ToolsTidyAll</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ToolsTidyAll() As Boolean</SourceLine>
   <SourceLine>// function: ToolsTidyAll</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>TidyAll()</SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </MenuHandler>
 <Method>
  <ItemName>OpenXmlFile</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub OpenXmlFile()</SourceLine>
   <SourceLine>// function OpenXmlFile</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Opens an XML file and places its contents in the XML input TextArea;</SourceLine>
   <SourceLine>// also change the label</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim inputToPopulate As CustomScrollableEditField = Container_InputXmlXsl.Container_XmlInput.TextArea_Input</SourceLine>
   <SourceLine>Dim labelValue As Label = Container_InputXmlXsl.Container_XmlInput.Label_Value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me._PopulateTextAndLabel(inputToPopulate, labelValue)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>OpenXsltFile</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub OpenXsltFile()</SourceLine>
   <SourceLine>// function OpenXmlFile</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Opens an XSLT file and places its contents in the XSL input TextArea;</SourceLine>
   <SourceLine>// also change the label</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim inputToPopulate As CustomScrollableEditField = Container_InputXmlXsl.Container_XslInput.TextArea_Input</SourceLine>
   <SourceLine>Dim labelValue As Label = Container_InputXmlXsl.Container_XslInput.Label_Value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me._PopulateTextAndLabel(inputToPopulate, labelValue)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SaveXmlFile</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SaveXmlFile()</SourceLine>
   <SourceLine>// function: SaveXmlFile</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Save the text in the Output TextArea to a file</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>FileIO.SaveXmlViaDialog(Container_InputXmlXsl.Container_XmlInput.TextArea_Input.Text, "Source XML.xml")</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SaveXsltFile</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SaveXsltFile()</SourceLine>
   <SourceLine>// function: SaveXsltFile</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Save the text in the Output TextArea to a file</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>FileIO.SaveXmlViaDialog(Container_InputXmlXsl.Container_XslInput.TextArea_Input.Text, "Source XSL.xml")</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>TransformData</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub TransformData()</SourceLine>
   <SourceLine>// function:TransformData</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Create a new XML document, load the sourced XML into it,</SourceLine>
   <SourceLine>// and run the provided XSLT against it</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim xmlTextArea As CustomScrollableEditField = Container_InputXmlXsl.Container_XmlInput.TextArea_Input</SourceLine>
   <SourceLine>Dim xslTextArea As CustomScrollableEditField = Container_InputXmlXsl.Container_XslInput.TextArea_Input</SourceLine>
   <SourceLine>Dim outputTextArea As CustomScrollableEditField = Container_InputXmlXsl.TextArea_Output</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>outputTextArea.Text = App.CurrentXsltParser.Transform(xmlTextArea.Text, xslTextArea.Text)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SaveOutputFile</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SaveOutputFile()</SourceLine>
   <SourceLine>// function: SaveOutputFile</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Save the text in the Output TextArea to a file</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>FileIO.SaveXmlViaDialog(Container_InputXmlXsl.TextArea_Output.Text, "Output.xml")</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>TidyXml</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub TidyXml()</SourceLine>
   <SourceLine>// function: TidyXml</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// TIDY the XML in the XML input TextArea</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim OutputTextArea As CustomScrollableEditField = Container_InputXmlXsl.Container_XmlInput.TextArea_Input</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If OutputTextArea.Text &lt;&gt; "" Then</SourceLine>
   <SourceLine>Try</SourceLine>
   <SourceLine>OutputTextArea.Text = App.CurrentXsltParser.Tidy(OutputTextArea.Text)</SourceLine>
   <SourceLine>Catch err As UnsupportedFormatException</SourceLine>
   <SourceLine>App.DisplayWarningMsg("Unsupported XSLT parser." + EndOfLine + EndOfLine + err.Message)</SourceLine>
   <SourceLine>OutputTextArea.Text = OutputTextArea.Text</SourceLine>
   <SourceLine>End Try</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>App.DisplayWarningMsg("No XML data to TIDY." + EndOfLine + EndOfLine + "Please input some valid XML before TIDYing.")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>TidyXsl</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub TidyXsl()</SourceLine>
   <SourceLine>// function: TidyXsl</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// TIDY the XSLT in the XSL input TextArea</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim OutputTextArea As CustomScrollableEditField = Container_InputXmlXsl.Container_XslInput.TextArea_Input</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If OutputTextArea.Text &lt;&gt; "" Then</SourceLine>
   <SourceLine>Try</SourceLine>
   <SourceLine>OutputTextArea.Text = App.CurrentXsltParser.Tidy(OutputTextArea.Text)</SourceLine>
   <SourceLine>Catch err As UnsupportedFormatException</SourceLine>
   <SourceLine>App.DisplayWarningMsg("Unsupported XSLT parser." + EndOfLine + EndOfLine + err.Message)</SourceLine>
   <SourceLine>OutputTextArea.Text = OutputTextArea.Text</SourceLine>
   <SourceLine>End Try</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>App.DisplayWarningMsg("No XSL data to TIDY." + EndOfLine + EndOfLine + "Please input some valid XSL before TIDYing.")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>TidyOutput</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub TidyOutput()</SourceLine>
   <SourceLine>// function: TidyOutput</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// TIDY the XML in the Output TextArea</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Container_InputXmlXsl.TextArea_Output.Text &lt;&gt; "" Then</SourceLine>
   <SourceLine>Container_InputXmlXsl.TextArea_Output.Text = App.CurrentXsltParser.Tidy(Container_InputXmlXsl.TextArea_Output.Text)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>App.DisplayWarningMsg("No XML data to TIDY." + EndOfLine + EndOfLine + "Please run the Transform operation (with valid XML and XSL) before attempting to TIDY the output.")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>_PopulateTextAndLabel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub _PopulateTextAndLabel(targetTextArea As CustomScrollableEditField, targetLabel As Label)</SourceLine>
   <SourceLine>// function: _PopulateTextAndLabel</SourceLine>
   <SourceLine>// parameters: targetTextArea As TextArea, targetLabel As Label</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Populate a text area with a file's contents and change its label</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Define the input area, the label to affect, and the filetypes</SourceLine>
   <SourceLine>Dim xmlFiletypes As FileType = FileTypes_XmlFiletypes.TextXml</SourceLine>
   <SourceLine>Dim fileInfo() As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Prompt the user to open a file and use its values</SourceLine>
   <SourceLine>fileInfo = FileIO.OpenViaDialog(xmlFiletypes)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If fileInfo &lt;&gt; Nil Then</SourceLine>
   <SourceLine>targetTextArea.Text = fileInfo(1)</SourceLine>
   <SourceLine>targetLabel.Text = fileInfo(0)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>targetTextArea As CustomScrollableEditField, targetLabel As Label</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>EnableFunctions</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub EnableFunctions(forMenu As Boolean = True, forToolbar As Boolean = True)</SourceLine>
   <SourceLine>// function: EnableFunctions</SourceLine>
   <SourceLine>// parameters: forMenu As Boolean = True, forToolbar As Boolean = True</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Determines what functions to enable.  Can handle both ToolbarItems and</SourceLine>
   <SourceLine>// MenuItems</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Container_InputXmlXsl.Container_XmlInput.TextArea_Input.Text &lt;&gt; "" Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// In this case, we have enough data to enable the following functions:</SourceLine>
   <SourceLine>//    1. Clear All</SourceLine>
   <SourceLine>//    2. TIDY All</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If forMenu Then</SourceLine>
   <SourceLine>FileClearAll.Enable</SourceLine>
   <SourceLine>ToolsTidyAll.Enable</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if Container_InputXmlXsl.Container_XslInput.TextArea_Input.Text &lt;&gt; "" Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// In this case, we have enough data to enable the following functions:</SourceLine>
   <SourceLine>//    1. Save XSLT</SourceLine>
   <SourceLine>//    2. Clear XSLT</SourceLine>
   <SourceLine>//    3. TIDY XSLT</SourceLine>
   <SourceLine>//    4. Transform</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If forMenu Then</SourceLine>
   <SourceLine>FileSaveXSLT.Enable</SourceLine>
   <SourceLine>FileClearXSLT.Enable</SourceLine>
   <SourceLine>ToolsTidyXSL.Enable</SourceLine>
   <SourceLine>FileTransform.Enable</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// In this case, we have enough data to enable the following functions:</SourceLine>
   <SourceLine>//    1. Save XML</SourceLine>
   <SourceLine>//    2. Clear XML</SourceLine>
   <SourceLine>//    3. TIDY XML</SourceLine>
   <SourceLine>//    4. XPath Analyzer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If forMenu Then</SourceLine>
   <SourceLine>FileSaveXML.Enable</SourceLine>
   <SourceLine>FileClearXML.Enable</SourceLine>
   <SourceLine>ToolsTidyXML.Enable</SourceLine>
   <SourceLine>ToolsXPathAnalyzer.Enable</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf Container_InputXmlXsl.Container_XslInput.TextArea_Input.Text &lt;&gt; "" Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// In this case, we have enough data to enable the following functions:</SourceLine>
   <SourceLine>//    1. Save XSLT</SourceLine>
   <SourceLine>//    2. Clear All</SourceLine>
   <SourceLine>//    3. Clear XSLT</SourceLine>
   <SourceLine>//    4. TIDY All</SourceLine>
   <SourceLine>//    5. TIDY XSLT</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If forMenu Then</SourceLine>
   <SourceLine>FileSaveXSLT.Enable</SourceLine>
   <SourceLine>FileClearAll.Enable</SourceLine>
   <SourceLine>FileClearXSLT.Enable</SourceLine>
   <SourceLine>ToolsTidyAll.Enable</SourceLine>
   <SourceLine>ToolsTidyXSL.Enable</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Container_InputXmlXsl.TextArea_Output.Text &lt;&gt; "" Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// In this case, we have enough data to enable the following functions:</SourceLine>
   <SourceLine>//    1. Save Output</SourceLine>
   <SourceLine>//    2. Clear All</SourceLine>
   <SourceLine>//    3. Clear Output</SourceLine>
   <SourceLine>//    4. TIDY All</SourceLine>
   <SourceLine>//    5. TIDY Output</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If forMenu Then</SourceLine>
   <SourceLine>FileSaveOutput.Enable</SourceLine>
   <SourceLine>FileClearAll.Enable</SourceLine>
   <SourceLine>FileClearOutput.Enable</SourceLine>
   <SourceLine>ToolsTidyAll.Enable</SourceLine>
   <SourceLine>ToolsTidyOutput.Enable</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>forMenu As Boolean = True, forToolbar As Boolean = True</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>TidyAll</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub TidyAll()</SourceLine>
   <SourceLine>// function: TidyAll</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// TIDYs all editors with text</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim xmlTextArea As CustomScrollableEditField = Container_InputXmlXsl.Container_XmlInput.TextArea_Input</SourceLine>
   <SourceLine>Dim xsltTextArea As CustomScrollableEditField = Container_InputXmlXsl.Container_XslInput.TextArea_Input</SourceLine>
   <SourceLine>Dim outputTextArea As CustomScrollableEditField = Container_InputXmlXsl.TextArea_Output</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If xmlTextArea.Text &lt;&gt; "" Then</SourceLine>
   <SourceLine>xmlTextArea.Text = App.CurrentXsltParser.Tidy(xmlTextArea.Text)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If xsltTextArea.Text &lt;&gt; "" Then</SourceLine>
   <SourceLine>xsltTextArea.Text = App.CurrentXsltParser.Tidy(xsltTextArea.Text)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If outputTextArea.Text &lt;&gt; "" Then</SourceLine>
   <SourceLine>outputTextArea.Text = App.CurrentXsltParser.Tidy(outputTextArea.Text)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>previousXPath</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>previousXPath As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>previousXPath As String</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <PropertyVal Name="ImplicitInstance">True</PropertyVal>
 <PropertyVal Name="MenuBar">258881810</PropertyVal>
 <PropertyVal Name="MacProcID">0</PropertyVal>
 <PropertyVal Name="MinimizeButton">True</PropertyVal>
 <PropertyVal Name="MaximizeButton">True</PropertyVal>
 <PropertyVal Name="LiveResize">True</PropertyVal>
 <PropertyVal Name="Resizeable">True</PropertyVal>
 <PropertyVal Name="CloseButton">True</PropertyVal>
 <PropertyVal Name="MenuBarVisible">True</PropertyVal>
 <PropertyVal Name="FullScreen">False</PropertyVal>
 <PropertyVal Name="Visible">True</PropertyVal>
 <PropertyVal Name="Title">aXel - Aaron's XSLT Editor/Library</PropertyVal>
 <PropertyVal Name="Backdrop"></PropertyVal>
 <PropertyVal Name="BackColor">16777215</PropertyVal>
 <PropertyVal Name="HasBackColor">False</PropertyVal>
 <PropertyVal Name="Composite">False</PropertyVal>
 <PropertyVal Name="Frame">0</PropertyVal>
 <PropertyVal Name="MaxHeight">32000</PropertyVal>
 <PropertyVal Name="MaxWidth">32000</PropertyVal>
 <PropertyVal Name="MinHeight">64</PropertyVal>
 <PropertyVal Name="MinWidth">64</PropertyVal>
 <PropertyVal Name="Height">770</PropertyVal>
 <PropertyVal Name="Width">1142</PropertyVal>
 <PropertyVal Name="Placement">0</PropertyVal>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Interfaces</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Placement</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <InheritsFrom>Window</InheritsFrom>
   <Enumeration>
    <ItemDef>0 - Default</ItemDef>
    <ItemDef>1 - Parent Window</ItemDef>
    <ItemDef>2 - Main Screen</ItemDef>
    <ItemDef>3 - Parent Window Screen</ItemDef>
    <ItemDef>4 - Stagger</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Width</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>600</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Height</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>400</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinWidth</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>64</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinHeight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>64</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaxWidth</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>32000</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaxHeight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>32000</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Frame</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <InheritsFrom>Window</InheritsFrom>
   <Enumeration>
    <ItemDef>0 - Document</ItemDef>
    <ItemDef>1 - Movable Modal</ItemDef>
    <ItemDef>2 - Modal Dialog</ItemDef>
    <ItemDef>3 - Floating Window</ItemDef>
    <ItemDef>4 - Plain Box</ItemDef>
    <ItemDef>5 - Shadowed Box</ItemDef>
    <ItemDef>6 - Rounded Window</ItemDef>
    <ItemDef>7 - Global Floating Window</ItemDef>
    <ItemDef>8 - Sheet Window</ItemDef>
    <ItemDef>9 - Metal Window</ItemDef>
    <ItemDef>10 - Drawer Window</ItemDef>
    <ItemDef>11 - Modeless Dialog</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Composite</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HasBackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>BackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>&amp;hFFFFFF</PropertyValue>
   <ItemType>Color</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Backdrop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>Picture</ItemType>
   <EditorType>Picture</EditorType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Title</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>Untitled</PropertyValue>
   <ItemType>String</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Visible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>FullScreen</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MenuBarVisible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>CloseButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Resizeable</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LiveResize</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaximizeButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinimizeButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MacProcID</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MenuBar</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>MenuBar</ItemType>
   <EditorType>MenuBar</EditorType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ImplicitInstance</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <EditorType>Boolean</EditorType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>previousXPath</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
 </ViewBehavior>
 <ControlBehavior>
  <Superclass>Container_XmlXslInput</Superclass>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>MainToolbar</Superclass>
  <HookInstance>
   <ItemName>Open</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Open()</SourceLine>
    <SourceLine>// function: Open</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// Add dynamic buttons to the toolbar</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// ---------- OPEN OPTIONS ------------------------------------</SourceLine>
    <SourceLine>Dim openMainToolButton As New ToolButton</SourceLine>
    <SourceLine>Dim openSubMenu As New MenuItem</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Create a new drop-down ToolButton for Open..., assign it a default</SourceLine>
    <SourceLine>// caption and give it an icon</SourceLine>
    <SourceLine>openMainToolButton.Style = ToolButton.ToolStyleDropDown</SourceLine>
    <SourceLine>openMainToolButton.Caption = "Open..."</SourceLine>
    <SourceLine>openMainToolButton.Icon = Icon_Open</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>openSubMenu.Append(New MenuItem("Open XML"))</SourceLine>
    <SourceLine>openSubMenu.Append(New MenuItem("Open XSLT"))</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>openMainToolButton.DropDownMenu = openSubMenu</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// ---------- SAVE OPTIONS ------------------------------------</SourceLine>
    <SourceLine>Dim saveMainToolButton As New ToolButton</SourceLine>
    <SourceLine>Dim saveSubMenu As New MenuItem</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Create a new drop-down ToolButton for Save..., assign it a default</SourceLine>
    <SourceLine>// caption and give it an icon</SourceLine>
    <SourceLine>saveMainToolButton.Style = ToolButton.ToolStyleDropDown</SourceLine>
    <SourceLine>saveMainToolButton.Caption = "Save.."</SourceLine>
    <SourceLine>saveMainToolButton.Icon = Icon_Save</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>saveSubMenu.Append(New MenuItem("Save XML"))</SourceLine>
    <SourceLine>saveSubMenu.Append(New MenuItem("Save XSLT"))</SourceLine>
    <SourceLine>saveSubMenu.Append(New MenuItem("Save Output"))</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>saveMainToolButton.DropDownMenu = saveSubMenu</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// ---------- TIDY OPTIONS ------------------------------------</SourceLine>
    <SourceLine>Dim tidyMainToolButton As New ToolButton</SourceLine>
    <SourceLine>Dim tidySubMenu As New MenuItem</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Create a new drop-down ToolButton for TIDY..., assign it a default</SourceLine>
    <SourceLine>// caption and give it an icon</SourceLine>
    <SourceLine>tidyMainToolButton.Style = ToolButton.ToolStyleDropDown</SourceLine>
    <SourceLine>tidyMainToolButton.Caption = "TIDY.."</SourceLine>
    <SourceLine>tidyMainToolButton.Icon = Icon_Tidy</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>tidySubMenu.Append(New MenuItem("TIDY All"))</SourceLine>
    <SourceLine>tidySubMenu.Append(New MenuItem("TIDY XML"))</SourceLine>
    <SourceLine>tidySubMenu.Append(New MenuItem("TIDY XSLT"))</SourceLine>
    <SourceLine>tidySubMenu.Append(New MenuItem("TIDY Output"))</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>tidyMainToolButton.DropDownMenu = tidySubMenu</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// ---------- XSLT PARSER OPTIONS ------------------------------</SourceLine>
    <SourceLine>Dim parserMainToolButton As New ToolButton</SourceLine>
    <SourceLine>Dim parserSubMenu As New MenuItem</SourceLine>
    <SourceLine>Dim sql As string</SourceLine>
    <SourceLine>Dim rs As RecordSet</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Create a new drop-down ToolButton for XSLT Parser, assign it a default</SourceLine>
    <SourceLine>// caption and give it an icon</SourceLine>
    <SourceLine>parserMainToolButton.Style = ToolButton.ToolStyleDropDown</SourceLine>
    <SourceLine>parserMainToolButton.Caption = "Expat"</SourceLine>
    <SourceLine>parserMainToolButton.Icon = Icon_ChooseParser</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Select all parser names from the database</SourceLine>
    <SourceLine>sql = "SELECT name FROM " + App.DB_TABLE_XSLT_PARSER</SourceLine>
    <SourceLine>rs = App.MainDB.SQLSelect(sql)</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Dynamically create new sub-MenuItems</SourceLine>
    <SourceLine>While Not rs.eof</SourceLine>
    <SourceLine>parserSubMenu.Append(New MenuItem(rs.Field("name").StringValue))</SourceLine>
    <SourceLine>rs.moveNext</SourceLine>
    <SourceLine>Wend</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>parserMainToolButton.DropDownMenu = parserSubMenu</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// ---------- TRANSFORM OPTIONS ------------------------------</SourceLine>
    <SourceLine>Dim transformMainToolButton As ToolButton = New ToolButton</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Create a new drop-down ToolButton for Transform, assign it a default</SourceLine>
    <SourceLine>// caption and give it an icon</SourceLine>
    <SourceLine>transformMainToolButton.Style = ToolButton.ToolStylePushButton</SourceLine>
    <SourceLine>transformMainToolButton.Caption = "Transform"</SourceLine>
    <SourceLine>transformMainToolButton.Icon = Icon_Transform</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// ---------- SPACERS -----------------------------------------</SourceLine>
    <SourceLine>Dim flexSpace1 As ToolButton = New ToolButton</SourceLine>
    <SourceLine>flexSpace1.Style = ToolButton.ToolStyleFlexibleSpace</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// ---------- ADD TO TOOLBAR ---------------------------------</SourceLine>
    <SourceLine>Me.Append(openMainToolButton)</SourceLine>
    <SourceLine>Me.Append(saveMainToolButton)</SourceLine>
    <SourceLine>Me.Append(tidyMainToolButton)</SourceLine>
    <SourceLine>Me.Append(parserMainToolButton)</SourceLine>
    <SourceLine>Me.Append(flexSpace1)</SourceLine>
    <SourceLine>Me.Append(transformMainToolButton)</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>DropDownMenuAction</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub DropDownMenuAction(item As ToolItem, hitItem As MenuItem)</SourceLine>
    <SourceLine>// function DropDownMenuAction</SourceLine>
    <SourceLine>// parameters: item As ToolItem, hitItem As MenuItem</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// When a drop-down menu item is selected, do the appropriate action</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>Select Case hitItem.Text</SourceLine>
    <SourceLine>Case "Open XML"</SourceLine>
    <SourceLine>OpenXmlFile()</SourceLine>
    <SourceLine>Case "Open XSLT"</SourceLine>
    <SourceLine>OpenXsltFile()</SourceLine>
    <SourceLine>Case "Save XML"</SourceLine>
    <SourceLine>SaveXmlFile()</SourceLine>
    <SourceLine>Case "Save XSLT"</SourceLine>
    <SourceLine>SaveXsltFile()</SourceLine>
    <SourceLine>Case "Save Output"</SourceLine>
    <SourceLine>SaveOutputFile()</SourceLine>
    <SourceLine>Case "TIDY All"</SourceLine>
    <SourceLine>Window_Main.TidyAll()</SourceLine>
    <SourceLine>Case "TIDY XML"</SourceLine>
    <SourceLine>Window_Main.TidyXml()</SourceLine>
    <SourceLine>Case "TIDY XSLT"</SourceLine>
    <SourceLine>Window_Main.TidyXsl()</SourceLine>
    <SourceLine>Case "Tidy Output"</SourceLine>
    <SourceLine>Window_Main.TidyOutput()</SourceLine>
    <SourceLine>Case "Expat"</SourceLine>
    <SourceLine>App.CurrentXsltParser = XsltParser.CreateParser(XsltParser.ParserType.expat)</SourceLine>
    <SourceLine>Item.Caption = "Expat"</SourceLine>
    <SourceLine>Case "XML Starlet"</SourceLine>
    <SourceLine>App.CurrentXsltParser = XsltParser.CreateParser(XsltParser.ParserType.libxslt)</SourceLine>
    <SourceLine>Item.Caption = "XML Starlet"</SourceLine>
    <SourceLine>Case "Saxon"</SourceLine>
    <SourceLine>App.CurrentXsltParser = XsltParser.CreateParser(XsltParser.ParserType.saxon)</SourceLine>
    <SourceLine>Item.Caption = "Saxon"</SourceLine>
    <SourceLine>Case "Xalan"</SourceLine>
    <SourceLine>App.CurrentXsltParser = XsltParser.CreateParser(XsltParser.ParserType.xalan)</SourceLine>
    <SourceLine>Item.Caption = "Xalan"</SourceLine>
    <SourceLine>End Select</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>Action</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Action(item As ToolItem)</SourceLine>
    <SourceLine>// function Action</SourceLine>
    <SourceLine>// parameters: item As ToolItem</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// When a button item is selected, do the appropriate action</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>Select Case item.Caption</SourceLine>
    <SourceLine>Case "Transform"</SourceLine>
    <SourceLine>Window_Main.TransformData()</SourceLine>
    <SourceLine>End Select</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <Control>
  <ControlClass>Container_XmlXslInput</ControlClass>
  <ItemName>Container_XmlXslInput</ItemName>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="EraseBackground">True</PropertyVal>
  <PropertyVal Name="AcceptTabs">True</PropertyVal>
  <PropertyVal Name="AcceptFocus"></PropertyVal>
  <PropertyVal Name="Backdrop"></PropertyVal>
  <PropertyVal Name="BackColor">16777215</PropertyVal>
  <PropertyVal Name="HasBackColor">False</PropertyVal>
  <PropertyVal Name="UseFocusRing"></PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TabIndex">7</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="LockBottom">True</PropertyVal>
  <PropertyVal Name="LockRight">True</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="Height">736</PropertyVal>
  <PropertyVal Name="Width">1102</PropertyVal>
  <PropertyVal Name="Top">14</PropertyVal>
  <PropertyVal Name="Left">20</PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Super">Container_XmlXslInput</PropertyVal>
  <PropertyVal Name="Name">Container_InputXmlXsl</PropertyVal>
  <ControlIndex>0</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>MainToolbar</ControlClass>
  <ItemName>MainToolbar</ItemName>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="Height">41</PropertyVal>
  <PropertyVal Name="Width">1102</PropertyVal>
  <PropertyVal Name="Top">-76</PropertyVal>
  <PropertyVal Name="Left">20</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Super">MainToolbar</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Name">Toolbar_MainToolbar</PropertyVal>
  <ControlIndex>1</ControlIndex>
  <Locked>0</Locked>
 </Control>
</block>
<block type="Folder" ID="1837377408">
 <ObjName>File Type Sets</ObjName>
 <ObjContainerID>0</ObjContainerID>
</block>
<block type="FileTypes" ID="970735771">
 <ObjName>FileTypes_XmlFiletypes</ObjName>
 <ObjContainerID>1837377408</ObjContainerID>
 <FileType>
  <ItemName>text/xml</ItemName>
  <MacCreator>????</MacCreator>
  <ItemType>TEXT</ItemType>
  <ItemDef>.xml;.xsl</ItemDef>
  <ItemFlags>0</ItemFlags>
  <UTIType>public.text</UTIType>
  <ObjName>TextXml</ObjName>
 </FileType>
</block>
<block type="Folder" ID="593691927">
 <ObjName>Plugins</ObjName>
 <ObjContainerID>0</ObjContainerID>
</block>
<block type="Folder" ID="1658580157">
 <ObjName>Window Splitter</ObjName>
 <ObjContainerID>593691927</ObjContainerID>
</block>
<block type="Folder" ID="491636048">
 <ObjName>Databases</ObjName>
 <ObjContainerID>0</ObjContainerID>
</block>
<block type="Database" ID="1107950397">
 <ObjName>Database_MainDB</ObjName>
 <ObjContainerID>491636048</ObjContainerID>
 <ItemType>realsql</ItemType>
 <ItemData><Hex bytes="148">0000000366696C656E616D653D64617461626173652532457273640A75726C706174683D66696C653A2F2F6C6F63616C686F73742F55736572732F61626163682F4769742F6158656C2F5265736F75726365732F64617461626173652E7273640A72656C6174697665706174683D5265736F757263657325354364617461626173652532457273640A6372656174653D74727565</Hex></ItemData>
</block>
<block type="Window" ID="981196654">
 <ObjName>Window_ImportXsl</ObjName>
 <ObjContainerID>1727219243</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>Window</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>IsDataEntered</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsDataEntered() As Boolean</SourceLine>
   <SourceLine>// function: IsDataEntered</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: Boolean</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Loosely require all three fields in this window to have text</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if TextField_Title.Text &lt;&gt; "" and TextField_Description.Text &lt;&gt; "" and TextArea_Transform.Text &lt;&gt; "" then</SourceLine>
   <SourceLine>return true</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>return false</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <PropertyVal Name="ImplicitInstance">True</PropertyVal>
 <PropertyVal Name="MenuBar"></PropertyVal>
 <PropertyVal Name="MacProcID">0</PropertyVal>
 <PropertyVal Name="MinimizeButton">True</PropertyVal>
 <PropertyVal Name="MaximizeButton">False</PropertyVal>
 <PropertyVal Name="LiveResize">False</PropertyVal>
 <PropertyVal Name="Resizeable">False</PropertyVal>
 <PropertyVal Name="CloseButton">True</PropertyVal>
 <PropertyVal Name="MenuBarVisible">True</PropertyVal>
 <PropertyVal Name="FullScreen">False</PropertyVal>
 <PropertyVal Name="Visible">True</PropertyVal>
 <PropertyVal Name="Title">Define XSLT Template</PropertyVal>
 <PropertyVal Name="Backdrop"></PropertyVal>
 <PropertyVal Name="BackColor">16777215</PropertyVal>
 <PropertyVal Name="HasBackColor">False</PropertyVal>
 <PropertyVal Name="Composite">True</PropertyVal>
 <PropertyVal Name="Frame">1</PropertyVal>
 <PropertyVal Name="MaxHeight">32000</PropertyVal>
 <PropertyVal Name="MaxWidth">32000</PropertyVal>
 <PropertyVal Name="MinHeight">64</PropertyVal>
 <PropertyVal Name="MinWidth">64</PropertyVal>
 <PropertyVal Name="Height">400</PropertyVal>
 <PropertyVal Name="Width">600</PropertyVal>
 <PropertyVal Name="Placement">4</PropertyVal>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Interfaces</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Placement</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <InheritsFrom>Window</InheritsFrom>
   <Enumeration>
    <ItemDef>0 - Default</ItemDef>
    <ItemDef>1 - Parent Window</ItemDef>
    <ItemDef>2 - Main Screen</ItemDef>
    <ItemDef>3 - Parent Window Screen</ItemDef>
    <ItemDef>4 - Stagger</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Width</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>600</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Height</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>400</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinWidth</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>64</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinHeight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>64</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaxWidth</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>32000</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaxHeight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>32000</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Frame</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <InheritsFrom>Window</InheritsFrom>
   <Enumeration>
    <ItemDef>0 - Document</ItemDef>
    <ItemDef>1 - Movable Modal</ItemDef>
    <ItemDef>2 - Modal Dialog</ItemDef>
    <ItemDef>3 - Floating Window</ItemDef>
    <ItemDef>4 - Plain Box</ItemDef>
    <ItemDef>5 - Shadowed Box</ItemDef>
    <ItemDef>6 - Rounded Window</ItemDef>
    <ItemDef>7 - Global Floating Window</ItemDef>
    <ItemDef>8 - Sheet Window</ItemDef>
    <ItemDef>9 - Metal Window</ItemDef>
    <ItemDef>10 - Drawer Window</ItemDef>
    <ItemDef>11 - Modeless Dialog</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Composite</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HasBackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>BackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>&amp;hFFFFFF</PropertyValue>
   <ItemType>Color</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Backdrop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>Picture</ItemType>
   <EditorType>Picture</EditorType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Title</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>Untitled</PropertyValue>
   <ItemType>String</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Visible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>FullScreen</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MenuBarVisible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>CloseButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Resizeable</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LiveResize</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaximizeButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinimizeButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MacProcID</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MenuBar</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>MenuBar</ItemType>
   <EditorType>MenuBar</EditorType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ImplicitInstance</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <EditorType>Boolean</EditorType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
 <ControlBehavior>
  <Superclass>PushButton</Superclass>
  <HookInstance>
   <ItemName>Action</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Action()</SourceLine>
    <SourceLine>// function: Action</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Close the modal window</SourceLine>
    <SourceLine>Me.Window.Close</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>PushButton</Superclass>
  <HookInstance>
   <ItemName>Action</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Action()</SourceLine>
    <SourceLine>// function: Action</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// Saves the entered data as a new XSLT into the database</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Create a new DB record with this transform</SourceLine>
    <SourceLine>Dim record As New DatabaseRecord</SourceLine>
    <SourceLine>record.Column("title") = TextField_Title.Text</SourceLine>
    <SourceLine>record.Column("description") = TextField_Description.Text</SourceLine>
    <SourceLine>record.Column("transform") = TextArea_Transform.Text</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>// Create the InsertRecord</SourceLine>
    <SourceLine>App.MainDB.InsertRecord(App.DB_TABLE_XSLT_TEMPLATE, record)</SourceLine>
    <SourceLine>If App.MainDB.Error Then</SourceLine>
    <SourceLine>// If there is some sort of DB error, show it and return</SourceLine>
    <SourceLine>App.DisplayDatabaseError(True)</SourceLine>
    <SourceLine>Return</SourceLine>
    <SourceLine>Else</SourceLine>
    <SourceLine>// If no error, commit the changes to the database,</SourceLine>
    <SourceLine>// repopulate the Listbox with all saved XSLT</SourceLine>
    <SourceLine>// templates, and close the modal window</SourceLine>
    <SourceLine>App.MainDB.Commit()</SourceLine>
    <SourceLine>Window_XsltTemplates.PopulateXsltTemplates()</SourceLine>
    <SourceLine>Me.Window.Close</SourceLine>
    <SourceLine>End If</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>Label</Superclass>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>Label</Superclass>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>Label</Superclass>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>TextField</Superclass>
  <HookInstance>
   <ItemName>TextChange</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub TextChange()</SourceLine>
    <SourceLine>// function: TextChange</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// Only enable the "Save" button if all</SourceLine>
    <SourceLine>// three fields have some text</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>If IsDataEntered() Then</SourceLine>
    <SourceLine>Button_Save.Enabled = True</SourceLine>
    <SourceLine>Else</SourceLine>
    <SourceLine>Button_Save.Enabled = False</SourceLine>
    <SourceLine>End If</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>TextField</Superclass>
  <HookInstance>
   <ItemName>TextChange</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub TextChange()</SourceLine>
    <SourceLine>// function: TextChange</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// Only enable the "Save" button if all</SourceLine>
    <SourceLine>// three fields have some text</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>If IsDataEntered() Then</SourceLine>
    <SourceLine>Button_Save.Enabled = True</SourceLine>
    <SourceLine>Else</SourceLine>
    <SourceLine>Button_Save.Enabled = False</SourceLine>
    <SourceLine>End If</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>CustomEditField</Superclass>
  <HookInstance>
   <ItemName>TextChanged</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub TextChanged()</SourceLine>
    <SourceLine>// function: TextChanged</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// Only enable the "Save" button if all</SourceLine>
    <SourceLine>// three fields have some text</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>If IsDataEntered() Then</SourceLine>
    <SourceLine>Button_Save.Enabled = True</SourceLine>
    <SourceLine>Else</SourceLine>
    <SourceLine>Button_Save.Enabled = False</SourceLine>
    <SourceLine>End If</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>Open</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Open()</SourceLine>
    <SourceLine>// function: Open</SourceLine>
    <SourceLine>// parameters: none</SourceLine>
    <SourceLine>// return: none</SourceLine>
    <SourceLine>//</SourceLine>
    <SourceLine>// When this text field opens, start its SyntaxDefinition engine</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>Dim SyntaxDefinition As HighlightDefinition = App.XmlHighlightDefinition</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>If Me.SyntaxDefinition = SyntaxDefinition Then Return</SourceLine>
    <SourceLine>Me.SyntaxDefinition = SyntaxDefinition</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <Control>
  <ControlClass>PushButton</ControlClass>
  <ItemName>PushButton</ItemName>
  <PropertyVal Name="Name">Button_Cancel</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Left">20</PropertyVal>
  <PropertyVal Name="Top">364</PropertyVal>
  <PropertyVal Name="Width">80</PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabIndex">1</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="Caption">Close</PropertyVal>
  <PropertyVal Name="Default"></PropertyVal>
  <PropertyVal Name="Cancel">True</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="ButtonStyle">0</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextUnit">0</PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Super">PushButton</PropertyVal>
  <ControlIndex>0</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>PushButton</ControlClass>
  <ItemName>PushButton</ItemName>
  <PropertyVal Name="Name">Button_Save</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Left">500</PropertyVal>
  <PropertyVal Name="Top">364</PropertyVal>
  <PropertyVal Name="Width">80</PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabIndex">2</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="Caption">Save</PropertyVal>
  <PropertyVal Name="Default"></PropertyVal>
  <PropertyVal Name="Cancel"></PropertyVal>
  <PropertyVal Name="Enabled">False</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="ButtonStyle">0</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextUnit">0</PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Super">PushButton</PropertyVal>
  <ControlIndex>1</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>Label</ControlClass>
  <ItemName>Label</ItemName>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="Name">Label_Title</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Left">20</PropertyVal>
  <PropertyVal Name="Top">14</PropertyVal>
  <PropertyVal Name="Width">48</PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabIndex">3</PropertyVal>
  <PropertyVal Name="Text">Title:</PropertyVal>
  <PropertyVal Name="TextAlign">0</PropertyVal>
  <PropertyVal Name="TextColor">0</PropertyVal>
  <PropertyVal Name="Multiline"></PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="Selectable">False</PropertyVal>
  <PropertyVal Name="Transparent">False</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextUnit">0</PropertyVal>
  <PropertyVal Name="Bold">True</PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="DataSource"></PropertyVal>
  <PropertyVal Name="DataField"></PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Super">Label</PropertyVal>
  <ControlIndex>2</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>Label</ControlClass>
  <ItemName>Label</ItemName>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="Name">Label_Title1</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Left">20</PropertyVal>
  <PropertyVal Name="Top">46</PropertyVal>
  <PropertyVal Name="Width">90</PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabIndex">4</PropertyVal>
  <PropertyVal Name="Text">Description:</PropertyVal>
  <PropertyVal Name="TextAlign">0</PropertyVal>
  <PropertyVal Name="TextColor">0</PropertyVal>
  <PropertyVal Name="Multiline"></PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="Selectable">False</PropertyVal>
  <PropertyVal Name="Transparent">False</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextUnit">0</PropertyVal>
  <PropertyVal Name="Bold">True</PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="DataSource"></PropertyVal>
  <PropertyVal Name="DataField"></PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Super">Label</PropertyVal>
  <ControlIndex>3</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>Label</ControlClass>
  <ItemName>Label</ItemName>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="Name">Label_Title11</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Left">20</PropertyVal>
  <PropertyVal Name="Top">78</PropertyVal>
  <PropertyVal Name="Width">90</PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabIndex">5</PropertyVal>
  <PropertyVal Name="Text">XSL:</PropertyVal>
  <PropertyVal Name="TextAlign">0</PropertyVal>
  <PropertyVal Name="TextColor">0</PropertyVal>
  <PropertyVal Name="Multiline"></PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="Selectable">False</PropertyVal>
  <PropertyVal Name="Transparent">False</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextUnit">0</PropertyVal>
  <PropertyVal Name="Bold">True</PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="DataSource"></PropertyVal>
  <PropertyVal Name="DataField"></PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Super">Label</PropertyVal>
  <ControlIndex>4</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>TextField</ControlClass>
  <ItemName>TextField</ItemName>
  <PropertyVal Name="Name">TextField_Title</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Left">147</PropertyVal>
  <PropertyVal Name="Top">12</PropertyVal>
  <PropertyVal Name="Width">433</PropertyVal>
  <PropertyVal Name="Height">22</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabIndex">6</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="Border">True</PropertyVal>
  <PropertyVal Name="Password"></PropertyVal>
  <PropertyVal Name="UseFocusRing">True</PropertyVal>
  <PropertyVal Name="TextColor">0</PropertyVal>
  <PropertyVal Name="BackColor">16777215</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Format"></PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextUnit">0</PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="CueText"></PropertyVal>
  <PropertyVal Name="Text"></PropertyVal>
  <PropertyVal Name="Mask"></PropertyVal>
  <PropertyVal Name="ReadOnly"></PropertyVal>
  <PropertyVal Name="LimitText">0</PropertyVal>
  <PropertyVal Name="AcceptTabs"></PropertyVal>
  <PropertyVal Name="Alignment">0</PropertyVal>
  <PropertyVal Name="AutomaticallyCheckSpelling">False</PropertyVal>
  <PropertyVal Name="DataSource"></PropertyVal>
  <PropertyVal Name="DataField"></PropertyVal>
  <PropertyVal Name="Super">TextField</PropertyVal>
  <ControlIndex>5</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>TextField</ControlClass>
  <ItemName>TextField</ItemName>
  <PropertyVal Name="Name">TextField_Description</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Left">147</PropertyVal>
  <PropertyVal Name="Top">45</PropertyVal>
  <PropertyVal Name="Width">433</PropertyVal>
  <PropertyVal Name="Height">22</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabIndex">7</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="Border">True</PropertyVal>
  <PropertyVal Name="Password"></PropertyVal>
  <PropertyVal Name="UseFocusRing">True</PropertyVal>
  <PropertyVal Name="TextColor">0</PropertyVal>
  <PropertyVal Name="BackColor">16777215</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Format"></PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextUnit">0</PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="CueText"></PropertyVal>
  <PropertyVal Name="Text"></PropertyVal>
  <PropertyVal Name="Mask"></PropertyVal>
  <PropertyVal Name="ReadOnly"></PropertyVal>
  <PropertyVal Name="LimitText">0</PropertyVal>
  <PropertyVal Name="AcceptTabs"></PropertyVal>
  <PropertyVal Name="Alignment">0</PropertyVal>
  <PropertyVal Name="AutomaticallyCheckSpelling">False</PropertyVal>
  <PropertyVal Name="DataSource"></PropertyVal>
  <PropertyVal Name="DataField"></PropertyVal>
  <PropertyVal Name="Super">TextField</PropertyVal>
  <ControlIndex>6</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>CustomEditField</ControlClass>
  <ItemName>CustomEditField</ItemName>
  <PropertyVal Name="AcceptFocus"></PropertyVal>
  <PropertyVal Name="AcceptTabs"></PropertyVal>
  <PropertyVal Name="AutoCloseBrackets">false</PropertyVal>
  <PropertyVal Name="AutocompleteAppliesStandardCase">true</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="AutoIndentNewLines">true</PropertyVal>
  <PropertyVal Name="BackColor">16777215</PropertyVal>
  <PropertyVal Name="Border">True</PropertyVal>
  <PropertyVal Name="BorderColor">8947848</PropertyVal>
  <PropertyVal Name="BracketHighlightColor">16776960</PropertyVal>
  <PropertyVal Name="CaretColor">0</PropertyVal>
  <PropertyVal Name="ClearHighlightedRangesOnTextChange">true</PropertyVal>
  <PropertyVal Name="DirtyLinesColor">16751001</PropertyVal>
  <PropertyVal Name="DisplayDirtyLines">false</PropertyVal>
  <PropertyVal Name="DisplayInvisibleCharacters">false</PropertyVal>
  <PropertyVal Name="DisplayLineNumbers">true</PropertyVal>
  <PropertyVal Name="DisplayRightMarginMarker">false</PropertyVal>
  <PropertyVal Name="DoubleBuffer">False</PropertyVal>
  <PropertyVal Name="EnableAutocomplete">false</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="EnableLineFoldings">True</PropertyVal>
  <PropertyVal Name="EraseBackground"></PropertyVal>
  <PropertyVal Name="GutterBackgroundColor">15658734</PropertyVal>
  <PropertyVal Name="GutterSeparationLineColor">8947848</PropertyVal>
  <PropertyVal Name="Height">239</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="HighlightBlocksOnMouseOverGutter">true</PropertyVal>
  <PropertyVal Name="HighlightMatchingBrackets">true</PropertyVal>
  <PropertyVal Name="HighlightMatchingBracketsMode">0</PropertyVal>
  <PropertyVal Name="ignoreRepaint">0</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Left">20</PropertyVal>
  <PropertyVal Name="leftMarginOffset">4</PropertyVal>
  <PropertyVal Name="LineNumbersColor">8947848</PropertyVal>
  <PropertyVal Name="LineNumbersTextFont">System</PropertyVal>
  <PropertyVal Name="LineNumbersTextSize">9</PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="Name">TextArea_Transform</PropertyVal>
  <PropertyVal Name="ReadOnly"></PropertyVal>
  <PropertyVal Name="RightMarginAtPixel">0</PropertyVal>
  <PropertyVal Name="RightScrollMargin">150</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="TabIndex">8</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="Text"></PropertyVal>
  <PropertyVal Name="TextColor">0</PropertyVal>
  <PropertyVal Name="TextFont">Courier</PropertyVal>
  <PropertyVal Name="TextSelectionColor">0</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="ThickInsertionPoint">true</PropertyVal>
  <PropertyVal Name="Top">110</PropertyVal>
  <PropertyVal Name="UseFocusRing">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="Width">560</PropertyVal>
  <PropertyVal Name="Super">CustomEditField</PropertyVal>
  <ControlIndex>7</ControlIndex>
  <Locked>0</Locked>
 </Control>
</block>
<block type="Folder" ID="352676896">
 <ObjName>Toolbars</ObjName>
 <ObjContainerID>0</ObjContainerID>
</block>
<block type="Toolbar" ID="74702603">
 <ObjName>MainToolbar</ObjName>
 <ObjContainerID>352676896</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>Toolbar</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
   <InheritsFrom>Toolbar</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Toolbar</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Toolbar</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Toolbar</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Toolbar</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Width</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>100</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Toolbar</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Height</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>32</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Toolbar</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Visible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Toolbar</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Enabled</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Toolbar</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>InitialParent</ObjName>
   <InheritsFrom>Toolbar</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Folder" ID="385742158">
 <ObjName>Images</ObjName>
 <ObjContainerID>352676896</ObjContainerID>
</block>
<block type="Picture" ID="706333668">
 <ObjName>Icon_Tidy</ObjName>
 <ObjContainerID>385742158</ObjContainerID>
 <FullPath>D:\bachya\Git\axel\resources\Icons\Icon_Tidy.png</FullPath>
 <PartialPath>resources\Icons\Icon_Tidy.png</PartialPath>
 <FileAlias><Hex bytesex></FileAlias>
 <FileAlias><Hex bytes="80">00F1D1730102010000000030443A5C6261636879615C4769745C6178656C5C7265736F75726365735C49636F6E735C49636F6E5F546964792E706E670300000000010004000000000100000000000000</Hex></FileAlias>
 <ItemText>Icon_Tidy</ItemText>
 <ItemTransparent>0</ItemTransparent>
</block>
<block type="Picture" ID="709438658">
 <ObjName>Icon_Save</ObjName>
 <ObjContainerID>385742158</ObjContainerID>
 <FullPath>D:\bachya\Git\axel\resources\Icons\Icon_Save.png</FullPath>
 <PartialPath>resources\Icons\Icon_Save.png</PartialPath>
 <FileAlias><Hex bytesex></FileAlias>
 <FileAlias><Hex bytes="80">00F1D1730102010000000030443A5C6261636879615C4769745C6178656C5C7265736F75726365735C49636F6E735C49636F6E5F536176652E706E670300000000010004000000000100000000000000</Hex></FileAlias>
 <ItemText>Icon_Save</ItemText>
 <ItemTransparent>0</ItemTransparent>
</block>
<block type="Picture" ID="858805677">
 <ObjName>Icon_Open</ObjName>
 <ObjContainerID>385742158</ObjContainerID>
 <FullPath>D:\bachya\Git\axel\resources\Icons\Icon_Open.png</FullPath>
 <PartialPath>resources\Icons\Icon_Open.png</PartialPath>
 <FileAlias><Hex bytesex></FileAlias>
 <FileAlias><Hex bytes="80">00F1D1730102010000000030443A5C6261636879615C4769745C6178656C5C7265736F75726365735C49636F6E735C49636F6E5F4F70656E2E706E670300000000010004000000000100000000000000</Hex></FileAlias>
 <ItemText>Icon_Open</ItemText>
 <ItemTransparent>0</ItemTransparent>
</block>
<block type="Picture" ID="720271890">
 <ObjName>Icon_Transform</ObjName>
 <ObjContainerID>385742158</ObjContainerID>
 <FullPath>D:\bachya\Git\axel\resources\Icons\Icon_Transform.png</FullPath>
 <PartialPath>resources\Icons\Icon_Transform.png</PartialPath>
 <FileAlias><Hex bytesex></FileAlias>
 <FileAlias><Hex bytes="85">00F1D1730102010000000035443A5C6261636879615C4769745C6178656C5C7265736F75726365735C49636F6E735C49636F6E5F5472616E73666F726D2E706E670300000000010004000000000100000000000000</Hex></FileAlias>
 <ItemText>Icon_Transform</ItemText>
 <ItemTransparent>0</ItemTransparent>
</block>
<block type="Picture" ID="1196391276">
 <ObjName>Icon_ChooseParser</ObjName>
 <ObjContainerID>385742158</ObjContainerID>
 <FullPath>D:\bachya\Git\axel\resources\Icons\Icon_ChooseParser.png</FullPath>
 <PartialPath>resources\Icons\Icon_ChooseParser.png</PartialPath>
 <FileAlias><Hex bytesex></FileAlias>
 <FileAlias><Hex bytes="88">00F1D1730102010000000038443A5C6261636879615C4769745C6178656C5C7265736F75726365735C49636F6E735C49636F6E5F43686F6F73655061727365722E706E670300000000010004000000000100000000000000</Hex></FileAlias>
 <ItemText>Icon_ChooseParser</ItemText>
 <ItemTransparent>0</ItemTransparent>
</block>
<block type="Folder" ID="223830211">
 <ObjName>Modules</ObjName>
 <ObjContainerID>0</ObjContainerID>
</block>
<block type="Folder" ID="131773694">
 <ObjName>CustomEditField</ObjName>
 <ObjContainerID>593691927</ObjContainerID>
</block>
<block type="Picture" ID="664851807">
 <ObjName>blockEndMarker</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
 <FullPath>D:\bachya\Git\axel\resources\Images\blockEndMarker.bmp</FullPath>
 <PartialPath>resources\Images\blockEndMarker.bmp</PartialPath>
 <FileAlias><Hex bytesex></FileAlias>
 <FileAlias><Hex bytes="86">00F1D1730102010000000036443A5C6261636879615C4769745C6178656C5C7265736F75726365735C496D616765735C626C6F636B456E644D61726B65722E626D700300000000010004000000000100000000000000</Hex></FileAlias>
 <ItemText>blockEndMarker</ItemText>
 <ItemTransparent>0</ItemTransparent>
</block>
<block type="Picture" ID="806921714">
 <ObjName>blockFoldedMarker</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
 <FullPath>D:\bachya\Git\axel\resources\Images\blockFoldedMarker.bmp</FullPath>
 <PartialPath>resources\Images\blockFoldedMarker.bmp</PartialPath>
 <FileAlias><Hex bytesex></FileAlias>
 <FileAlias><Hex bytes="89">00F1D1730102010000000039443A5C6261636879615C4769745C6178656C5C7265736F75726365735C496D616765735C626C6F636B466F6C6465644D61726B65722E626D700300000000010004000000000100000000000000</Hex></FileAlias>
 <ItemText>blockFoldedMarker</ItemText>
 <ItemTransparent>0</ItemTransparent>
</block>
<block type="Picture" ID="574033199">
 <ObjName>blockFoldedTrailMarker</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
 <FullPath>D:\bachya\Git\axel\resources\Images\blockFoldedTrailMarker.bmp</FullPath>
 <PartialPath>resources\Images\blockFoldedTrailMarker.bmp</PartialPath>
 <FileAlias><Hex bytes="490">00F1D17301020100000001D80000000001D8000200000C4D6163696E746F7368204844000000000000000000000000000000CA40958C482B0000011765EB1A626C6F636B466F6C646564547261696C4D61726B65722E626D7000000000000000000000000000000000000000000000000000000000000000000000000000011765FEC9672B430000000000000000FFFFFFFF0000092000000000000000000000000000000006496D61676573001000080000CA40E9EC0000001100080000C9678DB3000000010018011765EB00F768F700F0A3B0000B0790000502330000BEEC000200534D6163696E746F73682048443A55736572733A0061626163683A004769743A006158656C3A007265736F75726365733A00496D616765733A00626C6F636B466F6C646564547261696C4D61726B65722E626D7000000E0036001A0062006C006F0063006B0046006F006C0064006500640054007200610069006C004D00610072006B00650072002E0062006D0070000F001A000C004D006100630069006E0074006F007300680020004800440012004055736572732F61626163682F4769742F6158656C2F7265736F75726365732F496D616765732F626C6F636B466F6C646564547261696C4D61726B65722E626D70001300012F0000150002000CFFFF0000000000000000</Hex></FileAlias>
 <FileAlias><Hex bytes="94">00F1D173010201000000003E443A5C6261636879615C4769745C6178656C5C7265736F75726365735C496D616765735C626C6F636B466F6C646564547261696C4D61726B65722E626D700300000000010004000000000100000000000000</Hex></FileAlias>
 <ItemText>blockFoldedTrailMarker</ItemText>
 <ItemTransparent>0</ItemTransparent>
</block>
<block type="Picture" ID="1279450075">
 <ObjName>blockStartMarker</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
 <FullPath>D:\bachya\Git\axel\resources\Images\blockStartMarker.bmp</FullPath>
 <PartialPath>resources\Images\blockStartMarker.bmp</PartialPath>
 <FileAlias><Hex bytesex></FileAlias>
 <FileAlias><Hex bytes="88">00F1D1730102010000000038443A5C6261636879615C4769745C6178656C5C7265736F75726365735C496D616765735C626C6F636B53746172744D61726B65722E626D700300000000010004000000000100000000000000</Hex></FileAlias>
 <ItemText>blockStartMarker</ItemText>
 <ItemTransparent>0</ItemTransparent>
</block>
<block type="Picture" ID="963669920">
 <ObjName>bookmarksimg</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
 <FullPath>D:\bachya\Git\axel\resources\Images\bookmarksimg.bmp</FullPath>
 <PartialPath>resources\Images\bookmarksimg.bmp</PartialPath>
 <FileAlias><Hex bytesex></FileAlias>
 <FileAlias><Hex bytes="84">00F1D1730102010000000034443A5C6261636879615C4769745C6178656C5C7265736F75726365735C496D616765735C626F6F6B6D61726B73696D672E626D700300000000010004000000000100000000000000</Hex></FileAlias>
 <ItemText>bookmarksimg</ItemText>
 <ItemTransparent>0</ItemTransparent>
</block>
<block type="Folder" ID="78696572">
 <ObjName>Autocomplete</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
</block>
<block type="Module" ID="1400620967">
 <ObjName>AutocompleteOptions</ObjName>
 <ObjContainerID>78696572</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Property>
  <ItemName>CurrentPathComponent</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CurrentPathComponent As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CurrentPathComponent As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>LongestCommonPrefix</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>LongestCommonPrefix As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>LongestCommonPrefix As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Options()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Options() As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Options() As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Prefix</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Prefix As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Prefix As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>CurrentPathComponent</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LongestCommonPrefix</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Prefix</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Folder" ID="315394945">
 <ObjName>PatriciaTrie</ObjName>
 <ObjContainerID>78696572</ObjContainerID>
</block>
<block type="Module" ID="319920581">
 <ObjName>PaTrie</ObjName>
 <ObjContainerID>315394945</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>addKey</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function addKey(key as string, data as variant = nil) As PatrieNode</SourceLine>
   <SourceLine>if key = "" then Return nil</SourceLine>
   <SourceLine>if key.Encoding = nil then key = key.DefineEncoding(Encodings.UTF8)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim tmpNode as PaTrieNode</SourceLine>
   <SourceLine>dim index as Integer = key.InStr(".")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if there's no path component to the key...</SourceLine>
   <SourceLine>if index = 0 then</SourceLine>
   <SourceLine>Return root.addKey(Key, data)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//now, if there is, find the parent node</SourceLine>
   <SourceLine>dim keyPath as String = key.Left(index - 1)</SourceLine>
   <SourceLine>dim searchPath as String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tmpNode = root.findNode(keyPath, searchPath)</SourceLine>
   <SourceLine>if tmpNode = nil then</SourceLine>
   <SourceLine>//if not found, add the node</SourceLine>
   <SourceLine>tmpNode = root.addKey(keyPath)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//strip the path from the key, and add it.</SourceLine>
   <SourceLine>if tmpNode.KeyMembers = nil then tmpNode.KeyMembers = new PaTrie</SourceLine>
   <SourceLine>return tmpNode.KeyMembers.addKey(key.Right(key.Len - index), data)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>key as string, data as variant = nil</ItemParams>
  <ItemResult>PatrieNode</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>root = new PaTrieNode</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>wordsForPrefix</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function wordsForPrefix(key as string, byref longestCommonPrefix as string) As string()</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim result() as String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim searchPath as String</SourceLine>
   <SourceLine>dim node as PaTrieNode</SourceLine>
   <SourceLine>dim index as Integer = key.InStr(".")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//no path</SourceLine>
   <SourceLine>if index = 0 then</SourceLine>
   <SourceLine>node = root.findNode(key, searchPath)</SourceLine>
   <SourceLine>if node = nil then Return result</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//node IS the longestCommonPrefix</SourceLine>
   <SourceLine>longestCommonPrefix = searchPath + node.Key</SourceLine>
   <SourceLine>node.subnodePaths(searchPath, result)</SourceLine>
   <SourceLine>Return result</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//extract path and continue search.</SourceLine>
   <SourceLine>dim keyPath as String = key.Left(index - 1)</SourceLine>
   <SourceLine>node = root.findNode(keyPath, searchPath)</SourceLine>
   <SourceLine>if node = nil then Return result</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if searchPath + node.key &lt;&gt; keyPath then keyPath is a valid prefix for the node, but it's not the node!</SourceLine>
   <SourceLine>if searchPath + node.Key &lt;&gt; keyPath then Return result</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if node.KeyMembers = nil then Return result</SourceLine>
   <SourceLine>Return node.KeyMembers.wordsForPrefix(key.Right(key.Len - index), longestCommonPrefix)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>key as string, byref longestCommonPrefix as string</ItemParams>
  <ItemResult>string()</ItemResult>
 </Method>
 <Property>
  <ItemName>Root</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Root As patrienode</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Root As patrienode</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="564655285">
 <ObjName>PaTrieNode</ObjName>
 <ObjContainerID>315394945</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>addKey</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function addKey(key as string, data as variant = nil) As PaTrieNode</SourceLine>
   <SourceLine>if key = "" then</SourceLine>
   <SourceLine>//overwrite data</SourceLine>
   <SourceLine>self.Data = data</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if this node was marked as non-terminal, mark it as terminal</SourceLine>
   <SourceLine>self.intermediateNode = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//but it's me!</SourceLine>
   <SourceLine>Return self</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if no children, just add a new one with the key</SourceLine>
   <SourceLine>if UBound(SubNodes) &lt; 0 then</SourceLine>
   <SourceLine>Return AppendNewNode(key, data)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//there's at least one subnode</SourceLine>
   <SourceLine>//find the best match for the key</SourceLine>
   <SourceLine>dim bestIndex as Integer = -1</SourceLine>
   <SourceLine>dim bestLength, currentLength as Integer</SourceLine>
   <SourceLine>for i as Integer = 0 to UBound(SubNodes)</SourceLine>
   <SourceLine>currentLength = SubNodes(i).Key.longestCommonPrefixIndex(key)</SourceLine>
   <SourceLine>if currentLength &gt; bestLength then</SourceLine>
   <SourceLine>bestLength = currentLength</SourceLine>
   <SourceLine>bestIndex = i</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if no suitable children found, just add the node</SourceLine>
   <SourceLine>if bestIndex &lt; 0 then</SourceLine>
   <SourceLine>Return AppendNewNode(key, data)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim matchNode as PaTrieNode = SubNodes(bestIndex)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if bestLength = matchNode.Key.Len then</SourceLine>
   <SourceLine>//current node is a perfect prefix for the key</SourceLine>
   <SourceLine>//remove prefix and recurse</SourceLine>
   <SourceLine>key = key.Mid(bestLength + 1, key.Len - bestLength)</SourceLine>
   <SourceLine>Return matchNode.AddKey(key, data)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//key and node share a common prefix</SourceLine>
   <SourceLine>//split current node and add both prefixes</SourceLine>
   <SourceLine>return matchNode.SplitNode(key, data, bestLength)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>key as string, data as variant = nil</ItemParams>
  <ItemResult>PaTrieNode</ItemResult>
 </Method>
 <Method>
  <ItemName>appendNewNode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function appendNewNode(withKey as string, andData as variant) As PaTrieNode</SourceLine>
   <SourceLine>dim newNode as new PaTrieNode</SourceLine>
   <SourceLine>newNode.Key = withKey</SourceLine>
   <SourceLine>newNode.Data = andData</SourceLine>
   <SourceLine>SubNodes.Append newNode</SourceLine>
   <SourceLine>keys.Append withKey.Left(1)</SourceLine>
   <SourceLine>sortedNodes = False</SourceLine>
   <SourceLine>Return newNode</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>withKey as string, andData as variant</ItemParams>
  <ItemResult>PaTrieNode</ItemResult>
 </Method>
 <Method>
  <ItemName>findNode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function findNode(key as string, byref path as string) As PaTrieNode</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if key = "" then Return self</SourceLine>
   <SourceLine>if UBound(SubNodes) &lt; 0 then Return Nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim prefixLength as Integer</SourceLine>
   <SourceLine>dim bestMatch as Integer = -1</SourceLine>
   <SourceLine>dim bestLength as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find the best match</SourceLine>
   <SourceLine>for i as Integer = 0 to UBound(SubNodes)</SourceLine>
   <SourceLine>prefixLength = SubNodes(i).Key.longestCommonPrefixIndex(key)</SourceLine>
   <SourceLine>if prefixLength &gt; bestLength then</SourceLine>
   <SourceLine>bestLength = prefixLength</SourceLine>
   <SourceLine>bestMatch = i</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//no match found</SourceLine>
   <SourceLine>if bestMatch &lt; 0 then Return nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//check if key is contained in SubNode's key, if not, it can't be a match!</SourceLine>
   <SourceLine>dim compareLength as Integer = min(key.Len, SubNodes(bestMatch).key.len)</SourceLine>
   <SourceLine>if key.left(compareLength) &lt;&gt; SubNodes(bestMatch).Key.left(compareLength) then Return nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//continue search among subnodes</SourceLine>
   <SourceLine>key = key.Mid(bestLength + 1, key.len - bestLength)</SourceLine>
   <SourceLine>path = path + self.Key</SourceLine>
   <SourceLine>Return SubNodes(bestMatch).findNode(key, path)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>key as string, byref path as string</ItemParams>
  <ItemResult>PaTrieNode</ItemResult>
 </Method>
 <Method>
  <ItemName>splitNode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function splitNode(key as string, data as variant, prefixLength as integer) As PaTrieNode</SourceLine>
   <SourceLine>dim common as String = self.Key.Mid(1, prefixLength)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'//copy trailing key from current node to a new one</SourceLine>
   <SourceLine>dim SubNodesCopy() as PaTrieNode</SourceLine>
   <SourceLine>dim keysCopy() as String</SourceLine>
   <SourceLine>ReDim SubNodesCopy(UBound(self.SubNodes))</SourceLine>
   <SourceLine>ReDim keysCopy(UBound(self.SubNodes))</SourceLine>
   <SourceLine>for i as Integer = 0 to UBound(self.SubNodes)</SourceLine>
   <SourceLine>SubNodesCopy(i) = self.SubNodes(i)</SourceLine>
   <SourceLine>keysCopy(i) = keys(i)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>ReDim SubNodes(-1)</SourceLine>
   <SourceLine>ReDim keys(-1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim node1 as PaTrieNode = AppendNewNode(self.Key.Mid(prefixLength + 1, self.Key.Len - prefixLength), self.Data)</SourceLine>
   <SourceLine>node1.SubNodes = SubNodesCopy</SourceLine>
   <SourceLine>node1.keys = keysCopy</SourceLine>
   <SourceLine>node1.intermediateNode = self.intermediateNode</SourceLine>
   <SourceLine>node1.KeyMembers = self.KeyMembers</SourceLine>
   <SourceLine>self.KeyMembers = nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//trailing key from new key to new node</SourceLine>
   <SourceLine>dim node2 as PaTrieNode = AppendNewNode(key.Mid(prefixLength + 1, key.Len - prefixLength), data)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>self.Key = common</SourceLine>
   <SourceLine>self.Data = nil</SourceLine>
   <SourceLine>self.intermediateNode = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return node2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>key as string, data as variant, prefixLength as integer</ItemParams>
  <ItemResult>PaTrieNode</ItemResult>
 </Method>
 <Method>
  <ItemName>subnodePaths</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub subnodePaths(path as string, where() as string)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not sortedNodes then</SourceLine>
   <SourceLine>keys.SortWith(SubNodes)</SourceLine>
   <SourceLine>sortedNodes = true</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not intermediateNode then</SourceLine>
   <SourceLine>if path + key &lt;&gt; "" then _</SourceLine>
   <SourceLine>where.Append path+key</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as Integer = 0 to UBound(SubNodes)</SourceLine>
   <SourceLine>SubNodes(i).subnodePaths(path+key, where)</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>path as string, where() as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Note>
  <ItemName>Code adapted from</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>Code adapted from</NoteLine>
   <NoteLine>Code adapted from:</NoteLine>
   <NoteLine>http://www.codeproject.com/KB/cs/iptocountry.aspx</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>I made some modifications (such as keypaths) and simplified the code.</NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>Data</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Data As Variant</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Data As Variant</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>intermediateNode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>intermediateNode As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>intermediateNode As boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Key</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Key As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Key As String</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>KeyMembers</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>KeyMembers As Patrie</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>KeyMembers As Patrie</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Keys()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Keys() As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Keys() As string</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>sortedNodes</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>sortedNodes As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>sortedNodes As boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>SubNodes()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SubNodes() As PaTrieNode</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SubNodes() As PaTrieNode</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Key</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Window" ID="458822797">
 <ObjName>SuggestionWindow</ObjName>
 <ObjContainerID>78696572</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>Window</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <HookInstance>
  <ItemName>Open</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Open()</SourceLine>
   <SourceLine>#if TargetWin32</SourceLine>
   <SourceLine>Const WS_BORDER = &amp;H800000</SourceLine>
   <SourceLine>ChangeWindowStyle( self, WS_BORDER, false )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Const WS_CAPTION = &amp;h00C00000</SourceLine>
   <SourceLine>ChangeWindowStyle( self, WS_CAPTION, false )</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <Method>
  <ItemName>cancel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub cancel(requestFocus as boolean)</SourceLine>
   <SourceLine>//cancel action</SourceLine>
   <SourceLine>if optionSubmitted then Return</SourceLine>
   <SourceLine>optionSubmitted = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim msg as new Message(self, self)</SourceLine>
   <SourceLine>msg.addInfo(1, AutocompleteCancelledMsg)</SourceLine>
   <SourceLine>msg.addInfo(2, requestFocus)</SourceLine>
   <SourceLine>MessageCenter.sendMessage(msg)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>StartTimer</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>requestFocus as boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ChangeWindowStyle</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ChangeWindowStyle(w as Window, flag as Integer, set as Boolean)</SourceLine>
   <SourceLine>#if TargetWin32</SourceLine>
   <SourceLine>Dim oldFlags as Integer</SourceLine>
   <SourceLine>Dim newFlags as Integer</SourceLine>
   <SourceLine>Dim styleFlags As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Const SWP_NOSIZE = &amp;H1</SourceLine>
   <SourceLine>Const SWP_NOMOVE = &amp;H2</SourceLine>
   <SourceLine>Const SWP_NOZORDER = &amp;H4</SourceLine>
   <SourceLine>Const SWP_FRAMECHANGED = &amp;H20</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Const GWL_STYLE = -16</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (hwnd As Integer,  _</SourceLine>
   <SourceLine>nIndex As Integer) As Integer</SourceLine>
   <SourceLine>Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (hwnd As Integer, _</SourceLine>
   <SourceLine>nIndex As Integer, dwNewLong As Integer) As Integer</SourceLine>
   <SourceLine>Declare Function SetWindowPos Lib "user32" (hwnd as Integer, hWndInstertAfter as Integer, _</SourceLine>
   <SourceLine>x as Integer, y as Integer, cx as Integer, cy as Integer, flags as Integer) as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>oldFlags = GetWindowLong(w.WinHWND, GWL_STYLE)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not set then</SourceLine>
   <SourceLine>newFlags = BitwiseAnd( oldFlags, Bitwise.OnesComplement( flag ) )</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>newFlags = BitwiseOr( oldFlags, flag )</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>styleFlags = SetWindowLong( w.WinHWND, GWL_STYLE, newFlags )</SourceLine>
   <SourceLine>styleFlags = SetWindowPos( w.WinHWND, 0, 0, 0, 0, 0, SWP_NOMOVE +_</SourceLine>
   <SourceLine>SWP_NOSIZE + SWP_NOZORDER + SWP_FRAMECHANGED )</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>w as Window, flag as Integer, set as Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>loadSuggestions</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub loadSuggestions(options() as string)</SourceLine>
   <SourceLine>//load options</SourceLine>
   <SourceLine>optionList.DeleteAllRows</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim option as String</SourceLine>
   <SourceLine>for each option in options</SourceLine>
   <SourceLine>optionList.AddRow option</SourceLine>
   <SourceLine>if self.Graphics.StringWidth(option) &gt; self.Width then  //auto-expand to fit the options. Thanks to Dr Gerard Hammond</SourceLine>
   <SourceLine>self.Width = self.Graphics.StringWidth(option)  + 10</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>if optionList.ListCount &gt; 0 then _</SourceLine>
   <SourceLine>optionList.ListIndex = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>me.Height = min(optionList.ListCount * optionList.DefaultRowHeight + 4, Screen(0).Height/2)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>options() as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>show</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub show(left as integer, top as integer)</SourceLine>
   <SourceLine>//get options</SourceLine>
   <SourceLine>dim options as AutocompleteOptions</SourceLine>
   <SourceLine>dim msg as new Message(self, self)</SourceLine>
   <SourceLine>msg.addInfo(1, CurrentAutocompleteOptionsMsg)</SourceLine>
   <SourceLine>MessageCenter.sendMessage(msg)</SourceLine>
   <SourceLine>options = msg.Info(3)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if options = nil then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//load suggestions</SourceLine>
   <SourceLine>loadSuggestions(options.Options)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>me.Left = Left</SourceLine>
   <SourceLine>me.Top = top</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if me.top + me.Height &gt; Screen(0).Height then</SourceLine>
   <SourceLine>me.Top = Screen(0).Height - me.Height</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Super.Show</SourceLine>
   <SourceLine>super.SetFocus</SourceLine>
   <SourceLine>optionList.SetFocus</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>left as integer, top as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>StartTimer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub StartTimer()</SourceLine>
   <SourceLine>//this is a workaround to close the window without crashing, don't know why</SourceLine>
   <SourceLine>timer1.Mode = timer.ModeSingle</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>submit</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub submit(what as string = "")</SourceLine>
   <SourceLine>//submit selected option</SourceLine>
   <SourceLine>if optionSubmitted then Return</SourceLine>
   <SourceLine>optionSubmitted = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim option as String</SourceLine>
   <SourceLine>if what ="" then</SourceLine>
   <SourceLine>option = optionList.Text</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>option = what</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim msg as new Message(self, self)</SourceLine>
   <SourceLine>msg.addInfo(1, OptionSelectedMsg)</SourceLine>
   <SourceLine>msg.addInfo(2, Option)</SourceLine>
   <SourceLine>MessageCenter.sendMessage(msg)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>StartTimer</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>what as string = ""</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>optionSubmitted</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>optionSubmitted As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>optionSubmitted As boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <PropertyVal Name="ImplicitInstance">True</PropertyVal>
 <PropertyVal Name="MenuBar"></PropertyVal>
 <PropertyVal Name="MacProcID">1040</PropertyVal>
 <PropertyVal Name="MinimizeButton">False</PropertyVal>
 <PropertyVal Name="MaximizeButton">False</PropertyVal>
 <PropertyVal Name="LiveResize">True</PropertyVal>
 <PropertyVal Name="Resizeable">False</PropertyVal>
 <PropertyVal Name="CloseButton">False</PropertyVal>
 <PropertyVal Name="MenuBarVisible">True</PropertyVal>
 <PropertyVal Name="FullScreen">False</PropertyVal>
 <PropertyVal Name="Visible">True</PropertyVal>
 <PropertyVal Name="Title"></PropertyVal>
 <PropertyVal Name="Backdrop"></PropertyVal>
 <PropertyVal Name="BackColor">16777215</PropertyVal>
 <PropertyVal Name="HasBackColor">False</PropertyVal>
 <PropertyVal Name="Composite">False</PropertyVal>
 <PropertyVal Name="Frame">3</PropertyVal>
 <PropertyVal Name="MaxHeight">32000</PropertyVal>
 <PropertyVal Name="MaxWidth">32000</PropertyVal>
 <PropertyVal Name="MinHeight">64</PropertyVal>
 <PropertyVal Name="MinWidth">64</PropertyVal>
 <PropertyVal Name="Height">300</PropertyVal>
 <PropertyVal Name="Width">120</PropertyVal>
 <PropertyVal Name="Placement">0</PropertyVal>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Interfaces</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Placement</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <InheritsFrom>Window</InheritsFrom>
   <Enumeration>
    <ItemDef>0 - Default</ItemDef>
    <ItemDef>1 - Parent Window</ItemDef>
    <ItemDef>2 - Main Screen</ItemDef>
    <ItemDef>3 - Parent Window Screen</ItemDef>
    <ItemDef>4 - Stagger</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Width</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>600</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Height</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>400</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinWidth</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>64</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinHeight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>64</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaxWidth</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>32000</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaxHeight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>32000</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Frame</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <InheritsFrom>Window</InheritsFrom>
   <Enumeration>
    <ItemDef>0 - Document</ItemDef>
    <ItemDef>1 - Movable Modal</ItemDef>
    <ItemDef>2 - Modal Dialog</ItemDef>
    <ItemDef>3 - Floating Window</ItemDef>
    <ItemDef>4 - Plain Box</ItemDef>
    <ItemDef>5 - Shadowed Box</ItemDef>
    <ItemDef>6 - Rounded Window</ItemDef>
    <ItemDef>7 - Global Floating Window</ItemDef>
    <ItemDef>8 - Sheet Window</ItemDef>
    <ItemDef>9 - Metal Window</ItemDef>
    <ItemDef>10 - Drawer Window</ItemDef>
    <ItemDef>11 - Modeless Dialog</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Composite</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HasBackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>BackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>&amp;hFFFFFF</PropertyValue>
   <ItemType>Color</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Backdrop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>Picture</ItemType>
   <EditorType>Picture</EditorType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Title</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>Untitled</PropertyValue>
   <ItemType>String</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Visible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>FullScreen</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MenuBarVisible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>CloseButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Resizeable</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LiveResize</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaximizeButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinimizeButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MacProcID</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MenuBar</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>MenuBar</ItemType>
   <EditorType>MenuBar</EditorType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ImplicitInstance</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <EditorType>Boolean</EditorType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>AutocompleteCancelledMsg</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>AutocompleteCancelledMsg</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>1</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>CurrentAutocompleteOptionsMsg</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>CurrentAutocompleteOptionsMsg</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>2</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>KeyDownMsg</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>KeyDownMsg</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>3</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>OptionSelectedMsg</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>OptionSelectedMsg</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>4</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <ControlBehavior>
  <Superclass>ListBox</Superclass>
  <HookInstance>
   <ItemName>CellClick</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Function CellClick(row as Integer, column as Integer, x as Integer, y as Integer) As Boolean</SourceLine>
    <SourceLine>submit(me.cell(row,column))</SourceLine>
    <SourceLine>End Function</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>KeyDown</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Function KeyDown(Key As String) As Boolean</SourceLine>
    <SourceLine>'MsgBox str(asc(key))</SourceLine>
    <SourceLine>select case asc(key)</SourceLine>
    <SourceLine>case 27, 8, 127</SourceLine>
    <SourceLine>cancel(true)</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case 9, 13, 3, 32</SourceLine>
    <SourceLine>submit</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case 28, 29, 30, 31</SourceLine>
    <SourceLine>Return False</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>else</SourceLine>
    <SourceLine>dim options as AutocompleteOptions</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>dim msg as new Message(self, self)</SourceLine>
    <SourceLine>Msg.addInfo(1, KeyDownMsg)</SourceLine>
    <SourceLine>msg.addInfo(2, key)</SourceLine>
    <SourceLine>MessageCenter.sendMessage(Msg)</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>//KeyDownMsg</SourceLine>
    <SourceLine>msg = new Message(self, self)</SourceLine>
    <SourceLine>msg.addInfo(1, CurrentAutocompleteOptionsMsg)</SourceLine>
    <SourceLine>MessageCenter.sendMessage(msg)</SourceLine>
    <SourceLine>//msg should have the options now</SourceLine>
    <SourceLine>options = msg.Info(3)</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>if options = nil then</SourceLine>
    <SourceLine>cancel(true)</SourceLine>
    <SourceLine>Return true</SourceLine>
    <SourceLine>end if</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>loadSuggestions(options.Options)</SourceLine>
    <SourceLine>if optionList.ListCount = 0 then cancel(true)</SourceLine>
    <SourceLine>end select</SourceLine>
    <SourceLine>Return true</SourceLine>
    <SourceLine>End Function</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>LostFocus</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub LostFocus()</SourceLine>
    <SourceLine>cancel(False)</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>Timer</Superclass>
  <HookInstance>
   <ItemName>Action</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Action()</SourceLine>
    <SourceLine>self.Close</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <Control>
  <ControlClass>ListBox</ControlClass>
  <ItemName>ListBox</ItemName>
  <PropertyVal Name="Name">optionList</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="AutoHideScrollbars">True</PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="ColumnCount">1</PropertyVal>
  <PropertyVal Name="ColumnsResizable"></PropertyVal>
  <PropertyVal Name="ColumnWidths"></PropertyVal>
  <PropertyVal Name="DataField"></PropertyVal>
  <PropertyVal Name="DataSource"></PropertyVal>
  <PropertyVal Name="DefaultRowHeight">14</PropertyVal>
  <PropertyVal Name="EnableDrag"></PropertyVal>
  <PropertyVal Name="EnableDragReorder"></PropertyVal>
  <PropertyVal Name="GridLinesHorizontal">0</PropertyVal>
  <PropertyVal Name="GridLinesVertical">0</PropertyVal>
  <PropertyVal Name="HasHeading"></PropertyVal>
  <PropertyVal Name="HeadingIndex">-1</PropertyVal>
  <PropertyVal Name="Height">300</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="Hierarchical"></PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="InitialValue"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Left">0</PropertyVal>
  <PropertyVal Name="LockBottom">True</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockRight">True</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="RequiresSelection"></PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="ScrollbarHorizontal"></PropertyVal>
  <PropertyVal Name="ScrollBarVertical">True</PropertyVal>
  <PropertyVal Name="SelectionType">0</PropertyVal>
  <PropertyVal Name="TabIndex">0</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TextFont">SmallSystem</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="Top">0</PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="UseFocusRing">False</PropertyVal>
  <PropertyVal Name="Width">120</PropertyVal>
  <PropertyVal Name="_ScrollOffset">0</PropertyVal>
  <PropertyVal Name="_ScrollWidth">-1</PropertyVal>
  <PropertyVal Name="Super">ListBox</PropertyVal>
  <ControlIndex>0</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>Timer</ControlClass>
  <ItemName>Timer</ItemName>
  <PropertyVal Name="Name">Timer1</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="Height">32</PropertyVal>
  <PropertyVal Name="Left">0</PropertyVal>
  <PropertyVal Name="Mode">0</PropertyVal>
  <PropertyVal Name="Period">10</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="TabIndex">1</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="Top">305</PropertyVal>
  <PropertyVal Name="Width">32</PropertyVal>
  <PropertyVal Name="Super">Timer</PropertyVal>
  <ControlIndex>1</ControlIndex>
  <Locked>0</Locked>
 </Control>
</block>
<block type="Module" ID="276311042">
 <ObjName>CustomEditField</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>Canvas</Superclass>
 <Interfaces>MessageReceiver</Interfaces>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <HookInstance>
  <ItemName>Close</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Close()</SourceLine>
   <SourceLine>//remove this control from all the mesage lists</SourceLine>
   <SourceLine>self.unregisterReceiver</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//kill highlighting Thread</SourceLine>
   <SourceLine>if highlighter &lt;&gt; nil then</SourceLine>
   <SourceLine>if highlighter.state = Thread.Running then</SourceLine>
   <SourceLine>highlighter.Kill</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//avoid circular references</SourceLine>
   <SourceLine>highlighter = nil</SourceLine>
   <SourceLine>caretBlinker = nil</SourceLine>
   <SourceLine>lines = nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if CurrentFocusedField = self then mCurrentFocusedField = nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Close</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>ConstructContextualMenu</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ConstructContextualMenu(base as MenuItem, x as Integer, y as Integer) As Boolean</SourceLine>
   <SourceLine>//Paul Rodman's Suggestion</SourceLine>
   <SourceLine>if ConstructContextualMenu(base,x,y) then return true</SourceLine>
   <SourceLine>if base.Count&gt;0 then base.Append new MenuItem("-")</SourceLine>
   <SourceLine>//--</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>base.Append EditCut</SourceLine>
   <SourceLine>base.Append EditCopy</SourceLine>
   <SourceLine>base.Append EditPaste</SourceLine>
   <SourceLine>base.Append EditClear</SourceLine>
   <SourceLine>base.Append new MenuItem("-")</SourceLine>
   <SourceLine>base.Append EditSelectAll</SourceLine>
   <SourceLine>Return true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>DragEnter</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function DragEnter(obj As DragItem, action As Integer) As Boolean</SourceLine>
   <SourceLine>me.SetFocus</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>DragOver</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function DragOver(x As Integer, y As Integer, obj As DragItem, action As Integer) As Boolean</SourceLine>
   <SourceLine>//save the drag position</SourceLine>
   <SourceLine>DragTextPos = CharPosAtXY(x, y)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if there's no DragTextSelection, then the text must come from some external source.</SourceLine>
   <SourceLine>if DragTextSelection = nil then</SourceLine>
   <SourceLine>changeSelection(DragTextPos, 0)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>caretState = true</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>DropObject</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DropObject(obj As DragItem, action As Integer)</SourceLine>
   <SourceLine>if not obj.TextAvailable then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>CurrentEventID = Ticks</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim objectID as String</SourceLine>
   <SourceLine>dim moveWithin as Boolean</SourceLine>
   <SourceLine>ignoreRepaint = true</SourceLine>
   <SourceLine>//check if the text comes from this same field.</SourceLine>
   <SourceLine>moveWithin = DragSource = self</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//moved inside the selected text, do nothing.</SourceLine>
   <SourceLine>if moveWithin and DragTextPos &gt;= DragTextSelection.offset and DragTextPos &lt;= DragTextSelection.offset + DragTextSelection.length then</SourceLine>
   <SourceLine>ignoreRepaint = False</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//since the text is being moved inside the field, remove the old selection.</SourceLine>
   <SourceLine>if moveWithin then</SourceLine>
   <SourceLine>//erase selected</SourceLine>
   <SourceLine>Remove(DragTextSelection.offset, DragTextSelection.length, False)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//fix offsets, and insert text</SourceLine>
   <SourceLine>if DragTextSelection = nil or DragTextPos &lt; DragTextSelection.offset then</SourceLine>
   <SourceLine>Insert(DragTextPos, obj.text)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif DragTextPos &gt; DragTextSelection.offset + DragTextSelection.length then</SourceLine>
   <SourceLine>Insert(DragTextPos - DragTextSelection.length, obj.text)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//select the text</SourceLine>
   <SourceLine>changeSelection(SelStart, -obj.Text.len)</SourceLine>
   <SourceLine>ignoreRepaint = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if drag comes from an external source, mouseUp isn't raised, so clean up if needed</SourceLine>
   <SourceLine>if not moveWithin then</SourceLine>
   <SourceLine>dragTextOnDrag = False</SourceLine>
   <SourceLine>DragSource = nil</SourceLine>
   <SourceLine>DragTextSelection = nil</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>me.setfocus</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>EnableMenuItems</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub EnableMenuItems()</SourceLine>
   <SourceLine>EditCopy.Enabled = me.selLength &gt; 0</SourceLine>
   <SourceLine>EditClear.Enabled = EditCopy.Enabled</SourceLine>
   <SourceLine>EditCut.Enabled = EditCopy.Enabled</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if me.TextLength &gt; 0 then</SourceLine>
   <SourceLine>EditSelectAll.Enable</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim c as new Clipboard</SourceLine>
   <SourceLine>EditPaste.Enabled =  c.TextAvailable</SourceLine>
   <SourceLine>EnableMenuItems</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>GotFocus</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub GotFocus()</SourceLine>
   <SourceLine>hasFocus = true</SourceLine>
   <SourceLine>RaiseEvent GotFocus</SourceLine>
   <SourceLine>enableBlinker(SelLength = 0)</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mCurrentfocusedfield = self</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>KeyDown</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function KeyDown(Key As String) As Boolean</SourceLine>
   <SourceLine>if keyDown(key) then</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>Return true</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim result as Boolean</SourceLine>
   <SourceLine>caretBlinker.Reset</SourceLine>
   <SourceLine>result = HandleKeyDown(key)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return result</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>LostFocus</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub LostFocus()</SourceLine>
   <SourceLine>CurrentEventID = 0</SourceLine>
   <SourceLine>hasFocus = False</SourceLine>
   <SourceLine>RaiseEvent LostFocus</SourceLine>
   <SourceLine>enableBlinker(False)</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>MouseDown</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function MouseDown(X As Integer, Y As Integer) As Boolean</SourceLine>
   <SourceLine>CurrentEventID = 0</SourceLine>
   <SourceLine>Dragging = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not hasFocus then self.SetFocus</SourceLine>
   <SourceLine>dragTextOnDrag = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if MouseDown(X,Y) then Return true</SourceLine>
   <SourceLine>if IsContextualClick then Return False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ignoreRepaint = true</SourceLine>
   <SourceLine>dim selstart as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>selStart = CharPosAtXY(x,y)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if Keyboard.ShiftKey then</SourceLine>
   <SourceLine>changeSelection(min(selStart, CaretPos), abs(selStart - CaretPos))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif x &lt; LineNumOffset then</SourceLine>
   <SourceLine>selectedLine = lines.getLineNumberForOffset(selStart)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if EnableLineFoldings and x &gt;= LineNumOffset - blockStartImage.Width - 2 then</SourceLine>
   <SourceLine>//toggle foldings here!</SourceLine>
   <SourceLine>ToggleLineFold(selectedLine)</SourceLine>
   <SourceLine>CreateMouseOverBlockHighlight(selectedLine)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>//line header clicked</SourceLine>
   <SourceLine>SelectLine(selectedLine, false)</SourceLine>
   <SourceLine>GutterClicked(selectedLine, x, y)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif SelLength &gt; 0 and SelStart &gt;= self.SelStart and SelStart &lt;= self.SelStart + SelLength then</SourceLine>
   <SourceLine>//omg drag!</SourceLine>
   <SourceLine>dragTextOnDrag = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>selectedLine = -1</SourceLine>
   <SourceLine>changeSelection(selStart, 0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>updateDesiredColumn</SourceLine>
   <SourceLine>lastMouseDownX = x</SourceLine>
   <SourceLine>lastMouseDownY = y</SourceLine>
   <SourceLine>ignoreRepaint = False</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>Return true</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>MouseDrag</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub MouseDrag(X As Integer, Y As Integer)</SourceLine>
   <SourceLine>//if the mouse doesn't move, don't do anything until it does.</SourceLine>
   <SourceLine>if abs(lastMouseDownX - X) &lt; 4 and abs(lastMouseDownY - Y) &lt; 4 then Return</SourceLine>
   <SourceLine>Dragging = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if drag selected text...</SourceLine>
   <SourceLine>if dragTextOnDrag then</SourceLine>
   <SourceLine>HandleTextDrag(x,y)</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ignoreRepaint = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>HandleDragOnGutter(x,y)</SourceLine>
   <SourceLine>HandleVerticalMouseDrag(x,y)</SourceLine>
   <SourceLine>HandleHorizontalMouseDrag(x,y)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ignoreRepaint = False</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>MouseMove</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub MouseMove(X As Integer, Y As Integer)</SourceLine>
   <SourceLine>MouseMove(X,Y)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//change mouse cursors</SourceLine>
   <SourceLine>if x &gt; LineNumOffset then //enter field</SourceLine>
   <SourceLine>if cursorIsIbeam then Return</SourceLine>
   <SourceLine>me.MouseCursor = System.Cursors.IBeam</SourceLine>
   <SourceLine>cursorIsIbeam = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if MouseOverBlock &lt;&gt; nil then</SourceLine>
   <SourceLine>MouseOverBlock = nil</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// enter gutter</SourceLine>
   <SourceLine>me.MouseCursor = System.Cursors.StandardPointer</SourceLine>
   <SourceLine>cursorIsIbeam = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// visual block feedback</SourceLine>
   <SourceLine>if not EnableLineFoldings or not HighlightBlocksOnMouseOverGutter then</SourceLine>
   <SourceLine>if MouseOverBlock &lt;&gt; nil then</SourceLine>
   <SourceLine>MouseOverBlock = nil</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if x &lt; LineNumOffset - blockStartImage.Width - 2 then</SourceLine>
   <SourceLine>if MouseOverBlock &lt;&gt; nil then</SourceLine>
   <SourceLine>MouseOverBlock = nil</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>CreateMouseOverBlockHighlight(lines.getLineNumberForOffset(CharPosAtXY(x,y)))</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>MouseUp</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub MouseUp(X As Integer, Y As Integer)</SourceLine>
   <SourceLine>Dragging = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//check for double click</SourceLine>
   <SourceLine>if x &gt; LineNumOffset and not checkDoubleClick(x,y) then</SourceLine>
   <SourceLine>mouseUp(x,y)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//reset drag variables.</SourceLine>
   <SourceLine>if dragTextOnDrag then</SourceLine>
   <SourceLine>dragTextOnDrag = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//clicked on the selected text, but it never got dragged, clear selction.</SourceLine>
   <SourceLine>if DragTextSelection = nil then</SourceLine>
   <SourceLine>changeSelection(CharPosAtXY(x,y), 0)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>DragSource = nil</SourceLine>
   <SourceLine>DragTextSelection = nil</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>MouseWheel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function MouseWheel(X As Integer, Y As Integer, deltaX as Integer, deltaY as Integer) As Boolean</SourceLine>
   <SourceLine>if MouseOverBlock &lt;&gt; nil then MouseOverBlock = nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>changeScrollValues(ScrollPositionX + (deltaX * 5), ScrollPosition + deltay)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>Open</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Open()</SourceLine>
   <SourceLine>me.EraseBackground = false</SourceLine>
   <SourceLine>ignoreRepaint = true</SourceLine>
   <SourceLine>open</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if TextFont = "" then TextFont = DEFAULT_FONT</SourceLine>
   <SourceLine>if TextSize = 0 then TextSize = DEFAULT_FONTSIZE</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>me.MouseCursor = System.Cursors.IBeam</SourceLine>
   <SourceLine>cursorIsIbeam = true</SourceLine>
   <SourceLine>self.AcceptFocus = true</SourceLine>
   <SourceLine>self.AcceptTabs = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>CalculateMaxVerticalSB</SourceLine>
   <SourceLine>CalculateMaxHorizontalSB</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>me.AcceptTextDrop</SourceLine>
   <SourceLine>me.AcceptRawDataDrop("objectID")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>enableBlinker(hasFocus and SelLength = 0)</SourceLine>
   <SourceLine>ignoreRepaint = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if TextSelectionColor = &amp;c000000 then</SourceLine>
   <SourceLine>TextSelectionColor = HighlightColor</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>Paint</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Paint(g As Graphics)</SourceLine>
   <SourceLine>DrawContents(g)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <MenuHandler>
  <ItemName>EditClear</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function EditClear() As Boolean</SourceLine>
   <SourceLine>me.SelText = ""</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>Return true</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </MenuHandler>
 <MenuHandler>
  <ItemName>EditCopy</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function EditCopy() As Boolean</SourceLine>
   <SourceLine>copy</SourceLine>
   <SourceLine>Return true</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </MenuHandler>
 <MenuHandler>
  <ItemName>EditCut</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function EditCut() As Boolean</SourceLine>
   <SourceLine>dim c as new Clipboard</SourceLine>
   <SourceLine>c.Text = me.SelText</SourceLine>
   <SourceLine>me.SelText = ""</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>Return true</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </MenuHandler>
 <MenuHandler>
  <ItemName>EditPaste</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function EditPaste() As Boolean</SourceLine>
   <SourceLine>paste</SourceLine>
   <SourceLine>Return true</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </MenuHandler>
 <MenuHandler>
  <ItemName>EditSelectAll</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function EditSelectAll() As Boolean</SourceLine>
   <SourceLine>SelectAll</SourceLine>
   <SourceLine>redraw</SourceLine>
   <SourceLine>Return true</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </MenuHandler>
 <Method>
  <ItemName>AddBookmark</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AddBookmark(lineIndex as integer)</SourceLine>
   <SourceLine>BookmarkTable.Value(lineIndex) = nil</SourceLine>
   <SourceLine>InvalidateLine(lineIndex)</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineIndex as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>AppendText</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AppendText(text as string)</SourceLine>
   <SourceLine>insert(TextStorage.Length, text)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>text as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>AutocompleteCancelled</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AutocompleteCancelled(requestFocus as boolean)</SourceLine>
   <SourceLine>if requestFocus then SetFocus</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//stop listening messages from SuggestionWindow</SourceLine>
   <SourceLine>self.unregisterForMessage(currentSuggestionWindow)</SourceLine>
   <SourceLine>currentSuggestionWindow = nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>requestFocus as boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>AutocompleteEOL</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AutocompleteEOL()</SourceLine>
   <SourceLine>//get Autocomplete options from client window</SourceLine>
   <SourceLine>call fetchAutocompleteOptions</SourceLine>
   <SourceLine>if  CurrentAutocompleteOptions = nil then Return //nothing to autocomplete.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim maxIndex as Integer = UBound(CurrentAutocompleteOptions.Options)</SourceLine>
   <SourceLine>dim firstMatch, longestCommonPrefix, currentPathComponent as String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>longestCommonPrefix = CurrentAutocompleteOptions.LongestCommonPrefix</SourceLine>
   <SourceLine>currentPathComponent = CurrentAutocompleteOptions.CurrentPathComponent</SourceLine>
   <SourceLine>if maxIndex &gt; -1 then firstMatch = CurrentAutocompleteOptions.Options(0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if maxIndex &gt;0 then //more than 1 option</SourceLine>
   <SourceLine>OptionForTrailingSuggestion = longestCommonPrefix</SourceLine>
   <SourceLine><Hex bytes="106">747261696C696E6753756767657374696F6E203D206C6F6E67657374436F6D6D6F6E5072656669782E5269676874286C6F6E67657374436F6D6D6F6E5072656669782E4C656E202D2063757272656E7450617468436F6D706F6E656E742E4C656E29202B2022E280A622</Hex></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif maxIndex = 0 and text &lt;&gt; firstMatch then //just 1</SourceLine>
   <SourceLine>OptionForTrailingSuggestion = firstMatch</SourceLine>
   <SourceLine>trailingSuggestion = firstMatch.Mid(firstMatch.longestCommonPrefixIndex(currentPathComponent) + 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else //word already fully typed</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim y as Integer</SourceLine>
   <SourceLine>XYAtCharPos(CaretPos, CaretLine, AutocompleteSuggestionInsertionX, y)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>AutocompleteManual</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AutocompleteManual()</SourceLine>
   <SourceLine>//get word where caret is at</SourceLine>
   <SourceLine>dim CurrentWordSegment as TextSegment = CurrentWord</SourceLine>
   <SourceLine>if CurrentWordSegment.length = 0 then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//suggestion to autocomplete?</SourceLine>
   <SourceLine><Hex bytes="65">696620747261696C696E6753756767657374696F6E2E4C656E3E203020616E6420747261696C696E6753756767657374696F6E203C3E2022E280A622207468656E</Hex></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim suggestionLength as Integer</SourceLine>
   <SourceLine><Hex bytes="43">696620747261696C696E6753756767657374696F6E2E5269676874283129203D2022E280A622207468656E</Hex></SourceLine>
   <SourceLine>suggestionLength = trailingSuggestion.len - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>suggestionLength = trailingSuggestion.len</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//insert it</SourceLine>
   <SourceLine>//Insert(CaretPos, trailingSuggestion.Left(suggestionLength))</SourceLine>
   <SourceLine>//AutocompleteOptionSelected(trailingSuggestion.Left(suggestionLength))</SourceLine>
   <SourceLine>AutocompleteOptionSelected(OptionForTrailingSuggestion)//CurrentAutocompleteOptions.CurrentPathComponent + trailingSuggestion.Left(suggestionLength))</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//get all Autocomplete options for word</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>call fetchAutocompleteOptions</SourceLine>
   <SourceLine>if  CurrentAutocompleteOptions = nil then Return //nothing to autocomplete</SourceLine>
   <SourceLine>if ubound(CurrentAutocompleteOptions.Options) &lt; 0 then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find XY pos of caret</SourceLine>
   <SourceLine>dim x,y, fx, fy as Integer</SourceLine>
   <SourceLine>XYAtCharPos(CaretPos, CaretLine, x,y)</SourceLine>
   <SourceLine>getFieldXY(fx, fy)</SourceLine>
   <SourceLine>x = x + fx</SourceLine>
   <SourceLine>y = y + fy</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim cx, cy as Integer</SourceLine>
   <SourceLine>cx = x</SourceLine>
   <SourceLine>cy = y</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// give the user the option to offset the suggestion window if needed.</SourceLine>
   <SourceLine>if ShouldDisplaySuggestionWindowAtPos(cx, cy) then</SourceLine>
   <SourceLine>x = cx</SourceLine>
   <SourceLine>y = cy</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//show suggestion window</SourceLine>
   <SourceLine>currentSuggestionWindow = new SuggestionWindow</SourceLine>
   <SourceLine>//start listening for messages from the SuggestionWindow</SourceLine>
   <SourceLine>self.registerForMessage(currentSuggestionWindow)</SourceLine>
   <SourceLine>currentSuggestionWindow.Show(x, y)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>AutocompleteOptionSelected</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AutocompleteOptionSelected(option as string)</SourceLine>
   <SourceLine>//the string "option" was selected in the suggestions window.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if option &lt;&gt; "" then</SourceLine>
   <SourceLine>if SelLength &gt; 0 then</SourceLine>
   <SourceLine>//replace highlighted text</SourceLine>
   <SourceLine>SelText = option</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//add option to current word removing common prefix</SourceLine>
   <SourceLine>if AutocompleteAppliesStandardCase then</SourceLine>
   <SourceLine>//we need to replace the whole word with the Autocomplete option...</SourceLine>
   <SourceLine>Replace(CaretPos - CurrentAutocompleteOptions.CurrentPathComponent.len, CurrentAutocompleteOptions.CurrentPathComponent.len, option)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>SelText = option.Mid(option.longestCommonPrefixIndex(CurrentAutocompleteOptions.currentPathComponent) + 1)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//stop listening messages from SuggestionWindow</SourceLine>
   <SourceLine>self.unregisterForMessage(currentSuggestionWindow)</SourceLine>
   <SourceLine>currentSuggestionWindow = nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//check indentations</SourceLine>
   <SourceLine>if AutoIndentNewLines then</SourceLine>
   <SourceLine>dim thisLine as TextLine = lines.getLine(CaretLine)</SourceLine>
   <SourceLine>if thisLine &lt;&gt; nil and thisLine.isBlockEnd and IndentBlockEndLine(CaretLine) &gt; 0 then</SourceLine>
   <SourceLine>InvalidateLine(CaretLine)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>SetFocus</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>option as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>BookmarkList</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function BookmarkList() As integer()</SourceLine>
   <SourceLine>dim indexes(), index as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for each index in BookmarkTable.keys</SourceLine>
   <SourceLine>indexes.Append index</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>indexes.Sort</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return indexes</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>integer()</ItemResult>
 </Method>
 <Method>
  <ItemName>CalculateMaxHorizontalSB</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub CalculateMaxHorizontalSB()</SourceLine>
   <SourceLine>//maximum horizontal scrollbar value</SourceLine>
   <SourceLine>//Thanks to Thomas Tempelmann for his suggestions.</SourceLine>
   <SourceLine>if horizontalSB &lt;&gt; nil Then</SourceLine>
   <SourceLine>dim contentWidth as integer = lastLongestLinePixels + LineNumOffset + RightScrollMargin</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim n as Integer = self.Width</SourceLine>
   <SourceLine>dim max as Integer = contentWidth - n</SourceLine>
   <SourceLine>if max &lt;= 0 then</SourceLine>
   <SourceLine>max = 0</SourceLine>
   <SourceLine>n = 0</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>horizontalSB.enabled = max &gt; 0 // you may want to remove this one</SourceLine>
   <SourceLine>horizontalSB.Maximum = max</SourceLine>
   <SourceLine>horizontalSB.PageStep = n</SourceLine>
   <SourceLine>horizontalSB.LineStep = 8</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>CalculateMaxVerticalSB</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub CalculateMaxVerticalSB()</SourceLine>
   <SourceLine>//maximum vertical scrollbar value</SourceLine>
   <SourceLine>if verticalSB &lt;&gt; nil then</SourceLine>
   <SourceLine>if EnableLineFoldings then</SourceLine>
   <SourceLine>verticalSB.Maximum = lines.Count - lines.invisibleLines - MaxVisibleLines</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>verticalSB.Maximum = lines.Count - MaxVisibleLines</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//update the pageStep so a page jump is always th number of visible lines... or a page.</SourceLine>
   <SourceLine>verticalSB.PageStep = MaxVisibleLines - 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>CanRedo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CanRedo() As boolean</SourceLine>
   <SourceLine>Return UndoMgr.CanRedo</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>CanUndo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CanUndo() As boolean</SourceLine>
   <SourceLine>Return UndoMgr.CanUndo</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>CaretSymbol</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CaretSymbol() As documentSymbol</SourceLine>
   <SourceLine>Return SymbolAtline(CaretLine)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>documentSymbol</ItemResult>
 </Method>
 <Method>
  <ItemName>changeScrollValues</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub changeScrollValues(horizontal as integer, vertical as integer)</SourceLine>
   <SourceLine>//changes view to the given scroll values</SourceLine>
   <SourceLine>caretBlinker.Reset</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim needsRedraw as Boolean = false</SourceLine>
   <SourceLine>dim valuesChanged as Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if horizontal &lt;&gt; ScrollPositionX then</SourceLine>
   <SourceLine>//Cap values</SourceLine>
   <SourceLine>horizontal = max(min(horizontal, lastLongestLinePixels - self.Width + LineNumOffset + RightScrollMargin), 0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//force a full redraw</SourceLine>
   <SourceLine>if horizontal &lt;&gt; ScrollPositionX then</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//change scrollbars</SourceLine>
   <SourceLine>mScrollPositionX = horizontal</SourceLine>
   <SourceLine>if horizontalSB &lt;&gt; nil then</SourceLine>
   <SourceLine>horizontalSB.Value = horizontal</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>needsRedraw = true</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>valuesChanged = true</SourceLine>
   <SourceLine>HorizontalScrollValueChanged</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if vertical &lt;&gt; ScrollPosition then</SourceLine>
   <SourceLine>//Cap values</SourceLine>
   <SourceLine>if EnableLineFoldings then</SourceLine>
   <SourceLine>vertical = max(min(vertical, lines.Count - lines.invisibleLines - MaxVisibleLines), 0)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>vertical = max(min(vertical, lines.Count - MaxVisibleLines), 0)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if vertical &lt;&gt; ScrollPosition then</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//change scrollbars</SourceLine>
   <SourceLine>mScrollPosition = vertical</SourceLine>
   <SourceLine>if verticalSB &lt;&gt; nil then</SourceLine>
   <SourceLine>verticalSB.Value = vertical</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>needsRedraw = true</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>valuesChanged = true</SourceLine>
   <SourceLine>VerticalScrollValueChanged</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if valuesChanged then ScrollValuesChanged</SourceLine>
   <SourceLine>if needsRedraw then Redraw</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>horizontal as integer, vertical as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>changeSelection</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub changeSelection(selStart as integer, selLength as integer, viaDoubleClick as Boolean = False)</SourceLine>
   <SourceLine>//changes the current document selection.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//nothing to change</SourceLine>
   <SourceLine>if selStart = self.selStart and selLength = self.selLength then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//backwards selections?</SourceLine>
   <SourceLine>if selLength &lt; 0 then</SourceLine>
   <SourceLine>selLength = -selLength</SourceLine>
   <SourceLine>selStart = selStart - selLength</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//cap selstart</SourceLine>
   <SourceLine>if selStart &lt; 0 then</SourceLine>
   <SourceLine>selStart = 0</SourceLine>
   <SourceLine>ElseIf selStart &gt; TextStorage.Length then</SourceLine>
   <SourceLine>selStart = TextStorage.Length</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//cap SelLength</SourceLine>
   <SourceLine>if selStart + selLength &gt; TextStorage.Length then</SourceLine>
   <SourceLine>selLength = selLength - TextStorage.Length</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find starting line for selection.</SourceLine>
   <SourceLine>dim linenum as Integer = lines.getLineNumberForOffset(SelStart)</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(linenum)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//deal with invisible lines</SourceLine>
   <SourceLine>if EnableLineFoldings then</SourceLine>
   <SourceLine>dim startLineIdx, endLineIdx as Integer</SourceLine>
   <SourceLine>dim startLine, endLine as TextLine</SourceLine>
   <SourceLine>dim update as Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//check if selstart is in a Visible line, if not, move it to the next or previous visible line.</SourceLine>
   <SourceLine>if SelStart &lt;&gt; mSelStart then</SourceLine>
   <SourceLine>if linenum &lt;&gt; CaretLine then //only if the new line is different from Previous.</SourceLine>
   <SourceLine>startLineIdx = lines.getLineNumberForOffset(SelStart)</SourceLine>
   <SourceLine>startLine = lines.getLine(startLineIdx)</SourceLine>
   <SourceLine>if startLine &lt;&gt; nil and SelStart &gt; mSelStart then //moving fwd</SourceLine>
   <SourceLine>if not startLine.visible then</SourceLine>
   <SourceLine>startLineIdx = lines.nextVisibleLine(startLineIdx)</SourceLine>
   <SourceLine>update = true</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>elseif startLine &lt;&gt; nil and selstart &lt; mSelStart then //moving bck</SourceLine>
   <SourceLine>if not startLine.visible then</SourceLine>
   <SourceLine>startLineIdx = lines.previousVisibleLine(startLineIdx)</SourceLine>
   <SourceLine>update = true</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if update then</SourceLine>
   <SourceLine>startLine = lines.getLine(startLineIdx)</SourceLine>
   <SourceLine>if startLine &lt;&gt; nil then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>SelStart = offsetForXPos(startLine, caretDesiredColumn)</SourceLine>
   <SourceLine>LineNum = startLineIdx</SourceLine>
   <SourceLine>line = startLine</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if SelLength &gt; 0 then</SourceLine>
   <SourceLine>SelLength = mSelStart + mSelLength - SelStart</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not update and SelLength &gt; 0 and SelLength &lt;&gt; mSelLength then</SourceLine>
   <SourceLine>endLineIdx = lines.getLineNumberForOffset(SelStart + SelLength)</SourceLine>
   <SourceLine>endLine = lines.getLine(endLineIdx)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if endLine &lt;&gt; nil and SelLength &gt; mSelLength then //making selection bigger.</SourceLine>
   <SourceLine>if not endLine.visible then</SourceLine>
   <SourceLine>endLineIdx = lines.nextVisibleLine(endLineIdx)</SourceLine>
   <SourceLine>update = true</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>elseif endLine &lt;&gt; nil and SelLength &lt; mSelLength then //smaller</SourceLine>
   <SourceLine>if not endLine.visible then</SourceLine>
   <SourceLine>endlineIdx = lines.previousVisibleLine(endLineIdx)</SourceLine>
   <SourceLine>update = true</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if update then</SourceLine>
   <SourceLine>endLine = lines.getLine(endLineIdx)</SourceLine>
   <SourceLine>if endLine &lt;&gt; nil then</SourceLine>
   <SourceLine>SelLength = offsetForXPos(endLine, caretDesiredColumn) - SelStart</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//make sure selection isn't inside a EOL delimiter</SourceLine>
   <SourceLine>if line &lt;&gt; nil then</SourceLine>
   <SourceLine>if SelStart &gt; line.offset + line.length - line.delimiterLength then</SourceLine>
   <SourceLine>if SelStart &gt; mSelStart then</SourceLine>
   <SourceLine>SelStart = line.offset + line.length</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>SelStart = line.offset + line.length - line.delimiterLength</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>linenum = lines.getLineNumberForOffset(SelStart)</SourceLine>
   <SourceLine>line = lines.getLine(linenum)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// update selection if inside a placeholder...</SourceLine>
   <SourceLine>dim selectedPlaceholder as TextPlaceholder = nil</SourceLine>
   <SourceLine>if mSelStart &lt; selStart then //moving start to the Right</SourceLine>
   <SourceLine>dim placeholder as TextPlaceholder = line.PlaceholderForOffset(selStart)</SourceLine>
   <SourceLine>if placeholder &lt;&gt; nil then</SourceLine>
   <SourceLine>if selLength = 0 then</SourceLine>
   <SourceLine>selStart = placeholder.offset + line.offset //sel</SourceLine>
   <SourceLine>selLength = placeholder.length</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>selectedPlaceholder = placeholder</SourceLine>
   <SourceLine>//PlaceholderSelected(LineNum, TextStorage.getText(line.offset + placeholder.textRange.offset, placeholder.textRange.length))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>selStart = placeholder.offset + placeholder.length +line.offset //desel</SourceLine>
   <SourceLine>selLength = selLength - placeholder.length + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf mSelStart &gt; selStart then //moving start to the Left</SourceLine>
   <SourceLine>dim placeholder as TextPlaceholder = line.PlaceholderForOffset(selStart)</SourceLine>
   <SourceLine>if placeholder &lt;&gt; nil then</SourceLine>
   <SourceLine>if selLength = 0 then</SourceLine>
   <SourceLine>selStart = placeholder.offset + line.offset //sel</SourceLine>
   <SourceLine>selLength = placeholder.length</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>selectedPlaceholder = placeholder</SourceLine>
   <SourceLine>//PlaceholderSelected(LineNum, TextStorage.getText(line.offset + placeholder.textRange.offset, placeholder.textRange.length))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>selStart = placeholder.offset +line.offset //sel</SourceLine>
   <SourceLine>selLength = selLength + placeholder.length - 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf mSelLength &gt; selLength then //shrinking selection</SourceLine>
   <SourceLine>dim endline as TextLine = lines.getline(lines.getLineNumberForOffset(selStart + selLength))</SourceLine>
   <SourceLine>if endline &lt;&gt; nil then</SourceLine>
   <SourceLine>dim placeholder as TextPlaceholder = endline.PlaceholderForOffset(selStart + selLength)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if placeholder &lt;&gt; nil then</SourceLine>
   <SourceLine>selLength = max(selLength - placeholder.length + 1, 0) //desel</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif mSelLength &lt; selLength then //expanding selection</SourceLine>
   <SourceLine>dim endline as TextLine = lines.getline(lines.getLineNumberForOffset(selStart + selLength))</SourceLine>
   <SourceLine>if endline &lt;&gt; nil then</SourceLine>
   <SourceLine>dim placeholder as TextPlaceholder = endline.PlaceholderForOffset(selStart + selLength)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if placeholder &lt;&gt; nil then</SourceLine>
   <SourceLine>selLength = selLength + placeholder.length - 1 //sel</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//change internal values</SourceLine>
   <SourceLine>mSelStart = selStart</SourceLine>
   <SourceLine>mSelLength = selLength</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if SelLength = 0 or outside selection then update caret</SourceLine>
   <SourceLine>if selLength = 0 or CaretPos &lt; SelStart or CaretPos &gt; SelStart + SelLength then</SourceLine>
   <SourceLine>//has the line changed? invalidate lines</SourceLine>
   <SourceLine>if LineNum &lt;&gt; CaretLine then</SourceLine>
   <SourceLine>InvalidateLine(CaretLine)</SourceLine>
   <SourceLine>mCaretLine = lines.getLineNumberForOffset(SelStart)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mCaretPos = SelStart</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//check if caret is out of view!</SourceLine>
   <SourceLine>ViewToCharPos(CaretLine, mCaretPos)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//blink only if no selection</SourceLine>
   <SourceLine>enableBlinker(selLength = 0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not UndoMgr.isUndoing then</SourceLine>
   <SourceLine>//raise selChanged event</SourceLine>
   <SourceLine>SelChanged(linenum + 1, SelStart - line.offset, SelLength)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if selectedPlaceholder &lt;&gt; nil then</SourceLine>
   <SourceLine>dim label as String = TextStorage.getText(line.offset + selectedPlaceholder.textRange.offset, selectedPlaceholder.textRange.length)</SourceLine>
   <SourceLine>PlaceholderSelected(label, LineNum, lines.getLine(linenum), selectedPlaceholder, viaDoubleClick)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//fire Autocomplete events</SourceLine>
   <SourceLine>if SelLength &gt; 0 or not EnableAutocomplete then Return</SourceLine>
   <SourceLine>trailingSuggestion = ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//are we at end of current line?</SourceLine>
   <SourceLine>if caretPos = line.offset + line.length - line.delimiterLength then</SourceLine>
   <SourceLine>AutocompleteEOL</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>InvalidateLine(CaretLine)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>selStart as integer, selLength as integer, viaDoubleClick as Boolean = False</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>CharPosAtLineNum</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CharPosAtLineNum(lineNumber as integer) As integer</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(lineNumber)</SourceLine>
   <SourceLine>if line = nil then Return -1</SourceLine>
   <SourceLine>Return line.offset</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineNumber as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>CharPosAtXY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CharPosAtXY(X as integer, Y as integer) As integer</SourceLine>
   <SourceLine>dim lineNum as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find the line</SourceLine>
   <SourceLine>if EnableLineFoldings then</SourceLine>
   <SourceLine>lineNum = lines.getNumberOfLinesNeededToView(min(lines.Count - 1, max(0, floor((y + (ScrollPosition * TextHeight)) / TextHeight))))</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>lineNum = min(lines.Count - 1, max(0, floor((y + (ScrollPosition * TextHeight)) / TextHeight)))</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find the char offset.</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(lineNum)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//not found?</SourceLine>
   <SourceLine>if line = nil then Return -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim offset as Integer = leftMarginOffset + LineNumOffset - ScrollPositionX</SourceLine>
   <SourceLine>Return offsetForXPos(line, x - offset)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>X as integer, Y as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>checkDoubleClick</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function checkDoubleClick(X as integer, Y as integer) As boolean</SourceLine>
   <SourceLine>//grabbed from RB examples</SourceLine>
   <SourceLine>//if SelLength &gt; 0 then Return False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim doubleClickTime, currentClickTicks as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if targetMacOS then</SourceLine>
   <SourceLine>#if targetCarbon</SourceLine>
   <SourceLine>Declare Function GetDblTime Lib "Carbon" () as Integer</SourceLine>
   <SourceLine>doubleClickTime = GetDblTime()</SourceLine>
   <SourceLine>#elseif targetCocoa</SourceLine>
   <SourceLine>doubleClickTime = 30 // I don't know how to get this value for Cocoa. Do you? Please tell tempelmann@gmail.com</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>Declare Function GetDblTime Lib "InterfaceLib" () as Integer Inline68K("2EB802F0")</SourceLine>
   <SourceLine>doubleClickTime = GetDblTime()</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if targetWin32 then</SourceLine>
   <SourceLine>Declare Function GetDoubleClickTime Lib "User32.DLL" () as Integer</SourceLine>
   <SourceLine>doubleClickTime = GetDoubleClickTime()</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if TargetLinux then</SourceLine>
   <SourceLine>Declare Function gtk_settings_get_default lib "libgtk-x11-2.0.so" as Ptr</SourceLine>
   <SourceLine>Declare Sub g_object_get lib "libgtk-x11-2.0.so" (Obj as Ptr, first_property_name as CString, byref doubleClicktime as Integer, Null as Integer)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim gtkSettings as MemoryBlock</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>gtkSettings = gtk_settings_get_default()</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g_object_get(gtkSettings,"gtk-double-click-time",doubleClickTime, 0)</SourceLine>
   <SourceLine>// DoubleClickTime now holds the number of milliseconds</SourceLine>
   <SourceLine>doubleClickTime = doubleClickTime / 1000.0 * 60</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim result as Boolean = false</SourceLine>
   <SourceLine>currentClickTicks = ticks</SourceLine>
   <SourceLine>//if the two clicks happened close enough together in time</SourceLine>
   <SourceLine>if (currentClickTicks - lastClickTicks) &lt;= doubleClickTime then</SourceLine>
   <SourceLine>//if the two clicks occured close enough together in space</SourceLine>
   <SourceLine>if abs(X - lastMouseUpX) &lt;= 4 and abs(Y - lastMouseUpY) &lt;= 4 then</SourceLine>
   <SourceLine>handleDoubleClick //a double click has occured so call the event</SourceLine>
   <SourceLine>result = true</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>lastClickTicks = currentClickTicks</SourceLine>
   <SourceLine>lastMouseUpX = X</SourceLine>
   <SourceLine>lastMouseUpY = Y</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return result</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>X as integer, Y as integer</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>ClearBookmark</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ClearBookmark(lineIndex as integer)</SourceLine>
   <SourceLine>if not BookmarkTable.HasKey(lineIndex) then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>BookmarkTable.Remove(lineIndex)</SourceLine>
   <SourceLine>InvalidateLine(lineIndex)</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineIndex as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ClearBookmarks</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ClearBookmarks()</SourceLine>
   <SourceLine>BookmarkTable.Clear</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ClearDirtyLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ClearDirtyLines()</SourceLine>
   <SourceLine>lines.clearDirtyLines</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ClearHighlightedCharacterRanges</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ClearHighlightedCharacterRanges()</SourceLine>
   <SourceLine>if HighlightedRanges.SelectionCount = 0 then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>HighlightedRanges.Clear</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ClearLineIcons</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ClearLineIcons()</SourceLine>
   <SourceLine>dim line as TextLine</SourceLine>
   <SourceLine>for i as Integer = 0 to lines.Count - 1</SourceLine>
   <SourceLine>line = lines.getLine(i)</SourceLine>
   <SourceLine>if line &lt;&gt; nil then line.icon = nil</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>// Calling the overridden superclass constructor.</SourceLine>
   <SourceLine>Super.RectControl</SourceLine>
   <SourceLine>ignoreRepaint = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//create a new text buffer</SourceLine>
   <SourceLine>//textStorage = new GapBuffer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//and line manager</SourceLine>
   <SourceLine>//lines = new LineManager(TextStorage, TabWidth)</SourceLine>
   <SourceLine>//register to receive messages from this line manager only</SourceLine>
   <SourceLine>//self.registerForMessage(lines)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//dictionaries to keep track of modified and updated lines.</SourceLine>
   <SourceLine>//invalidLines = new Dictionary</SourceLine>
   <SourceLine>//modifiedLines =new Dictionary</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//create Highlighter thread</SourceLine>
   <SourceLine>//highlighter = new LineHighlighter(self, SyntaxDefinition, modifiedLines, TextStorage, lines)</SourceLine>
   <SourceLine>//self.registerForMessage(highlighter)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//and blinker timer.</SourceLine>
   <SourceLine>//caretBlinker = new CaretBlinker(self)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//UndoMgr = new UndoManager</SourceLine>
   <SourceLine>//HighlightedRanges = new CharSelectionManager</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//bookmarks</SourceLine>
   <SourceLine>//BookmarkTable = new Dictionary</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Copy</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Copy()</SourceLine>
   <SourceLine>if SelLength = 0 then Return</SourceLine>
   <SourceLine>dim c as new Clipboard</SourceLine>
   <SourceLine>c.Text = me.SelText</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>CreateMouseOverBlockHighlight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub CreateMouseOverBlockHighlight(lineIndex as integer)</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(lineIndex)</SourceLine>
   <SourceLine>if line = nil then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim openingLine as integer</SourceLine>
   <SourceLine>if line.isBlockStart then</SourceLine>
   <SourceLine>openingLine = lineIndex</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>openingLine = OpeningBlockLineForLine(lineIndex)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>if openingLine &lt; 0 then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>line = lines.getLine(openingLine)</SourceLine>
   <SourceLine>if line = nil then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim x, y1, y2 as Integer</SourceLine>
   <SourceLine>XYAtCharPos(line.offset, openingLine, x, y1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim closingLine as Integer = lines.nextBlockEndLine(openingLine)</SourceLine>
   <SourceLine>if closingLine &lt; 0 then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>line = lines.getLine(closingLine)</SourceLine>
   <SourceLine>if line = nil then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>XYAtCharPos(line.offset, closingLine, x, y2)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if MouseOverBlock &lt;&gt; nil then</SourceLine>
   <SourceLine>if MouseOverBlock.Value("y") = y1 - TextHeight - 2 and MouseOverBlock.Value("h") = y2 - y1 + TextHeight + 4 then Return //avoid a redraw if we can...</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>MouseOverBlock = nil</SourceLine>
   <SourceLine>MouseOverBlock = new Dictionary</SourceLine>
   <SourceLine>MouseOverBlock.Value("startLine") = openingLine</SourceLine>
   <SourceLine>MouseOverBlock.Value("x") = LeftMarginOffset - 3</SourceLine>
   <SourceLine>MouseOverBlock.Value("y") = y1 - TextHeight - 2</SourceLine>
   <SourceLine>MouseOverBlock.Value("w") = self.Width - LineNumOffset - LeftMarginOffset</SourceLine>
   <SourceLine>MouseOverBlock.Value("h") = y2 - y1 + TextHeight + 4</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineIndex as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>CurrentAutocompleteOptions</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CurrentAutocompleteOptions() As Autocompleteoptions</SourceLine>
   <SourceLine>Return mCurrentAutocompleteOptions</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Autocompleteoptions</ItemResult>
 </Method>
 <Method>
  <ItemName>CurrentWord</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CurrentWord() As textsegment</SourceLine>
   <SourceLine>//gets the current word, where the caret is at.</SourceLine>
   <SourceLine>//a word is anything except whitespaces.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim startIndex, endIndex as Integer</SourceLine>
   <SourceLine>startIndex = previousCharInSet(CaretPos + 1, CURRENT_CARET_WORD_DELIMITER_PATTERN)</SourceLine>
   <SourceLine>endIndex = nextCharInSet(CaretPos - 1, CURRENT_CARET_WORD_DELIMITER_PATTERN)</SourceLine>
   <SourceLine>Return new TextSegment(startIndex, endIndex - startIndex)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>textsegment</ItemResult>
 </Method>
 <Method>
  <ItemName>CustomEditFieldPrinter</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CustomEditFieldPrinter(printerGraphics as graphics) As CustomEditFieldPrinter</SourceLine>
   <SourceLine>printerGraphics.TextFont = TextFont</SourceLine>
   <SourceLine>printerGraphics.TextSize = TextSize</SourceLine>
   <SourceLine>printerGraphics.Bold = False</SourceLine>
   <SourceLine>printerGraphics.Italic = False</SourceLine>
   <SourceLine>printerGraphics.Underline = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return new CustomEditFieldPrinter(printerGraphics, TextStorage, lines, TextColor, DisplayInvisibleCharacters)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>printerGraphics as graphics</ItemParams>
  <ItemResult>CustomEditFieldPrinter</ItemResult>
 </Method>
 <Method>
  <ItemName>DeleteChars</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DeleteChars(forwardDelete as boolean)</SourceLine>
   <SourceLine>//delete key</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//check if the key would delete a placeholder...</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(CaretLine)</SourceLine>
   <SourceLine>if line &lt;&gt; nil and line.HasPlaceholders then</SourceLine>
   <SourceLine>dim placeholder as TextPlaceholder</SourceLine>
   <SourceLine>if forwardDelete then</SourceLine>
   <SourceLine>Placeholder = line.PlaceholderForOffset(CaretPos + 1)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>Placeholder = line.PlaceholderForOffset(CaretPos - 1)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if placeholder &lt;&gt; nil then changeSelection(placeholder.offset + line.offset, placeholder.length)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//delete highlighted text</SourceLine>
   <SourceLine>if me.SelLength &gt; 0 then</SourceLine>
   <SourceLine>replace(selStart, me.SelLength, "")</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//or simply delete a char</SourceLine>
   <SourceLine>if forwardDelete then</SourceLine>
   <SourceLine>if CaretPos &lt; TextStorage.Length then</SourceLine>
   <SourceLine>if Keyboard.OptionKey then</SourceLine>
   <SourceLine>remove(selStart, nextNonAlpha(CaretPos) - CaretPos, false)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>remove(selStart, 1, false)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if Keyboard.OptionKey then</SourceLine>
   <SourceLine>dim offset as Integer = caretpos - previousNonAlpha(CaretPos)</SourceLine>
   <SourceLine>remove(selStart - offset, offset)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>remove(selStart - 1, 1)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>forwardDelete as boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DisableUndoHandling</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DisableUndoHandling()</SourceLine>
   <SourceLine>UndoMgr.Enabled = false</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DocumentSymbols</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function DocumentSymbols() As DocumentSymbol()</SourceLine>
   <SourceLine>//no symbols</SourceLine>
   <SourceLine>if CurrentDocumentSymbols = nil then Return nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim tmp() as DocumentSymbol</SourceLine>
   <SourceLine>//dim key as String</SourceLine>
   <SourceLine>dim line as TextLine</SourceLine>
   <SourceLine>dim symbol as DocumentSymbol</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//copy symbols to new Dictionary</SourceLine>
   <SourceLine>for Each line in CurrentDocumentSymbols.keys</SourceLine>
   <SourceLine>//line = CurrentDocumentSymbols.Value(key)</SourceLine>
   <SourceLine>//if line = nil then Continue for</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for each Symbol in line.LineSymbols.Values</SourceLine>
   <SourceLine>//Symbol = line.LineSymbols.Value(key)</SourceLine>
   <SourceLine>//tmp.Value(key) = new DocumentSymbol(symbol.Name, line.offset + symbol.Offset, symbol.Type) //with the correct offset!</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tmp.append( new DocumentSymbol(symbol.Name, line.offset + symbol.Offset, symbol.Type) ) //with the correct offset!</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//no symbols...</SourceLine>
   <SourceLine>//if tmp.Count = 0 then Return nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return tmp</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>DocumentSymbol()</ItemResult>
 </Method>
 <Method>
  <ItemName>DrawContents</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DrawContents(gr as graphics)</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// We're going to implement the paint event ourselves</SourceLine>
   <SourceLine>// so that we can automatically do the double buffering</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Check our back buffer to make sure we've got</SourceLine>
   <SourceLine>// one that we can draw to</SourceLine>
   <SourceLine>dim create as Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// If we don't have a back buffer, then we need to create one</SourceLine>
   <SourceLine>// If our size is different than our</SourceLine>
   <SourceLine>// back buffer, then we need to create a new one</SourceLine>
   <SourceLine>create = mBackBuffer = nil or me.Width &lt;&gt; mBackBuffer.Width or me.Height &lt;&gt; mBackBuffer.Height</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//create buffer</SourceLine>
   <SourceLine>if create then</SourceLine>
   <SourceLine>mBackBuffer = new Picture( max(1, me.Width), max(me.Height, 1), max(16, screen(0).Depth))</SourceLine>
   <SourceLine>CalculateMaxHorizontalSB</SourceLine>
   <SourceLine>CalculateMaxVerticalSB</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//get a graphics context to draw onto.</SourceLine>
   <SourceLine>dim g as Graphics = mBackBuffer.graphics</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//set old renderer</SourceLine>
   <SourceLine>#if EditFieldGlobals.UseOldRenderer</SourceLine>
   <SourceLine>g.UseOldRenderer = true</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>redrawTime = Microseconds</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim sx, sy as Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//Line numbers</SourceLine>
   <SourceLine>if displayLineNumbers then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//create line numbers picture, if needed.</SourceLine>
   <SourceLine>if Gutter = nil or Gutter.Height &lt;&gt; g.Height or gutter.Width &lt;&gt; LineNumOffset then</SourceLine>
   <SourceLine>Gutter = NewPicture(LineNumOffset, g.Height, 32)</SourceLine>
   <SourceLine>#if EditFieldGlobals.UseOldRenderer</SourceLine>
   <SourceLine>Gutter.Graphics.UseOldRenderer = true</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>gutter.Graphics.TextFont = LineNumbersTextFont</SourceLine>
   <SourceLine>gutter.Graphics.TextSize = LineNumbersTextSize</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//redraw contents, if needed</SourceLine>
   <SourceLine>if fullRefresh or lastDrawnTopLine &lt;&gt; ScrollPosition then</SourceLine>
   <SourceLine>gutter.Graphics.ForeColor = GutterBackgroundColor.lighterColor(10)</SourceLine>
   <SourceLine>gutter.Graphics.FillRect LineNumOffset - FoldingOffset, 0, FoldingOffset, gutter.Height</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>gutter.Graphics.ForeColor = GutterBackgroundColor</SourceLine>
   <SourceLine>gutter.Graphics.FillRect 0, 0, gutter.Width - FoldingOffset, gutter.Height</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>gutter.Graphics.ForeColor = GutterSeparationLineColor</SourceLine>
   <SourceLine>gutter.Graphics.DrawLine LineNumOffset - 1, 0, LineNumOffset - 1, gutter.Graphics.Height</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>lastDrawnTopLine = ScrollPosition</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//paint selection, and get their range</SourceLine>
   <SourceLine>dim selection as new CharSelection(-1, -1, -1, -1, TextSelectionColor)</SourceLine>
   <SourceLine>dim tmpSelection as CharSelection</SourceLine>
   <SourceLine>//get selection range</SourceLine>
   <SourceLine>if SelLength &gt; 0 then</SourceLine>
   <SourceLine>Selection.offset = SelStart</SourceLine>
   <SourceLine>Selection.length = SelLength</SourceLine>
   <SourceLine>selection.StartLine = lines.getLineNumberForOffset(SelStart)</SourceLine>
   <SourceLine>selection.EndLine = Lines.getLineNumberForOffset(SelStart + SelLength)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//set text properties</SourceLine>
   <SourceLine>g.TextSize = TextSize</SourceLine>
   <SourceLine>g.TextFont = TextFont</SourceLine>
   <SourceLine>gr.TextSize = TextSize</SourceLine>
   <SourceLine>gr.TextFont = TextFont</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//Starting positions</SourceLine>
   <SourceLine>sx = leftMarginOffset + LineNumOffset - ScrollPositionX</SourceLine>
   <SourceLine>sy = g.TextHeight</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim line as TextLine</SourceLine>
   <SourceLine>dim lineText as String</SourceLine>
   <SourceLine>dim linesDrawn, lineHeight as Integer</SourceLine>
   <SourceLine>dim firstLine as Integer</SourceLine>
   <SourceLine>dim lastLine as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//the lowest possible line to draw is ScrollPosition, so start there.</SourceLine>
   <SourceLine>if EnableLineFoldings then</SourceLine>
   <SourceLine>firstline = lines.getNumberOfLinesNeededToView(ScrollPosition)</SourceLine>
   <SourceLine>lastLine = lines.count - 1</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>firstLine = ScrollPosition</SourceLine>
   <SourceLine>lastLine = min(lines.Count - 1, ScrollPosition + MaxVisibleLines)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>linesOnScreen = 0</SourceLine>
   <SourceLine>for i as Integer = firstLine to lastLine</SourceLine>
   <SourceLine>linesOnScreen = linesOnScreen + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//get current line</SourceLine>
   <SourceLine>line = lines.getLine(i)</SourceLine>
   <SourceLine>if not line.visible then Continue for</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if line needs to be repainted (invalid), or is a full refresh, or is part of the previous or current selection</SourceLine>
   <SourceLine>if invalidLines.HasKey(i) or _</SourceLine>
   <SourceLine>fullRefresh or selection.IsLineIndexInRange(i) or _</SourceLine>
   <SourceLine>(previouslyDrawnSelection &lt;&gt; nil and previouslyDrawnSelection.IsLineIndexInRange(i)) then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//draw gutter</SourceLine>
   <SourceLine>if displayLineNumbers then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//caret line is slightly darker</SourceLine>
   <SourceLine>if EnableLineFoldings then</SourceLine>
   <SourceLine>Gutter.Graphics.ForeColor = GutterBackgroundColor.lighterColor(10)</SourceLine>
   <SourceLine>gutter.Graphics.FillRect LineNumOffset - FoldingOffset, sy - g.TextHeight, FoldingOffset - 1, TextHeight</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>if CaretLine = i then</SourceLine>
   <SourceLine>Gutter.Graphics.ForeColor = GutterBackgroundColor.darkerColor(20)</SourceLine>
   <SourceLine>Gutter.Graphics.FillRect 0,sy - g.TextHeight, LineNumOffset - 1 - FoldingOffset, TextHeight</SourceLine>
   <SourceLine>Gutter.Graphics.Bold = true</SourceLine>
   <SourceLine>gutter.Graphics.ForeColor = &amp;c000000</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>#if FlashRefreshRanges then</SourceLine>
   <SourceLine>Gutter.Graphics.ForeColor =  rgb(rnd * 255, rnd * 255, rnd * 255) 'GutterBackgroundColor</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>Gutter.Graphics.ForeColor =  GutterBackgroundColor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>Gutter.Graphics.FillRect 0,sy - g.TextHeight,LineNumOffset - 1 - FoldingOffset, TextHeight</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if DisplayDirtyLines and line.isDirty then</SourceLine>
   <SourceLine>gutter.Graphics.ForeColor = DirtyLinesColor</SourceLine>
   <SourceLine>gutter.Graphics.fillRect LineNumOffset - 4, sy - g.TextHeight, 3, TextHeight</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//bookmarks?</SourceLine>
   <SourceLine>if BookmarkTable.HasKey(i) then</SourceLine>
   <SourceLine>dim img as Picture = UseBookmarkIconForLine(i)</SourceLine>
   <SourceLine>if img = nil then img = BookmarkImage</SourceLine>
   <SourceLine>Gutter.Graphics.DrawPicture img, 0, sy - g.TextHeight + (g.TextHeight - img.Height)/2</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//row icon available?</SourceLine>
   <SourceLine>if line.icon &lt;&gt; nil then</SourceLine>
   <SourceLine>dim icn as Picture = line.icon</SourceLine>
   <SourceLine>Gutter.Graphics.DrawPicture icn, Gutter.Width - icn.Width - 2 - FoldingOffset, sy - g.TextHeight + (g.TextHeight - icn.Height)/2</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>//line number</SourceLine>
   <SourceLine>gutter.Graphics.ForeColor = LineNumbersColor</SourceLine>
   <SourceLine>gutter.Graphics.DrawString str(i + 1), lineNumOffset - 2 - gutter.Graphics.StringWidth(str(i + 1)) - FoldingOffset, sy - (TextHeight - gutter.Graphics.TextAscent)/2</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if EnableLineFoldings and line.isBlockStart then</SourceLine>
   <SourceLine>if line.folded then //draw line folded marker</SourceLine>
   <SourceLine>Gutter.Graphics.DrawPicture blockFoldedImage, LineNumOffset - blockFoldedImage.Width - 1, sy - TextHeight + (TextHeight - blockFoldedImage.Height) / 2 + 1</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>Gutter.Graphics.DrawPicture blockStartImage, LineNumOffset - blockStartImage.Width - 1, sy - TextHeight + (TextHeight - blockStartImage.Height) / 2 + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>elseif EnableLineFoldings and line.isBlockEnd then</SourceLine>
   <SourceLine>Gutter.Graphics.DrawPicture blockEndImage, LineNumOffset - blockEndImage.Width - 1, sy - TextHeight + (TextHeight - blockEndImage.Height) / 2 + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Gutter.Graphics.Bold = false</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//clear the background for this line</SourceLine>
   <SourceLine>dim lineBackColor as Color = BackColor</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not UseBackgroundColorForLine(i, lineBackColor) then</SourceLine>
   <SourceLine>lineBackColor = BackColor</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>g.ForeColor = lineBackColor</SourceLine>
   <SourceLine>g.fillRect LineNumOffset, sy - g.TextHeight, g.Width - LineNumOffset, TextHeight</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//draw highlighted ranges!</SourceLine>
   <SourceLine>dim ranges() as CharSelection = HighlightedRanges.SelectionsForLine(i) //first, draw the Highlighted ranges</SourceLine>
   <SourceLine>line.AppendHighlightedWords(ranges, i) //then draw words with a background</SourceLine>
   <SourceLine>ranges.Append(selection) //and finally, draw the selection</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if matchingBlockHighlight &lt;&gt; nil then</SourceLine>
   <SourceLine>ranges.Append(MatchingBlockHighlight)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim x,y,w as Integer</SourceLine>
   <SourceLine>for each tmpSelection in ranges</SourceLine>
   <SourceLine>If tmpSelection.IsLineIndexInRange(i) then //if in selection, Highlight line</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if hasFocus or not tmpSelection.LosesFocus then</SourceLine>
   <SourceLine>g.ForeColor = tmpSelection.SelectionColor</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>g.ForeColor = BackColor.darkerColor(30)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if i &gt; tmpSelection.StartLine and i &lt; tmpSelection.EndLine then //fully selected line</SourceLine>
   <SourceLine>g.FillRect LineNumOffset, sy - g.TextHeight, g.Width, TextHeight</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif i = tmpSelection.StartLine and tmpSelection.EndLine &lt;&gt; tmpSelection.StartLine then //firstLine</SourceLine>
   <SourceLine>XYAtCharPos(tmpSelection.offset, i, x, y)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if tmpSelection.Rounded then</SourceLine>
   <SourceLine>g.FillRoundRect x, sy - g.TextHeight, g.Width - x + 10, TextHeight, 8, 8</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>g.FillRect x, sy - g.TextHeight, g.Width - x, TextHeight</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf i = tmpSelection.EndLine and tmpSelection.EndLine &lt;&gt; tmpSelection.StartLine then //last line</SourceLine>
   <SourceLine>XYAtCharPos(tmpSelection.offset + tmpSelection.length, i, x, y)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if tmpSelection.Rounded then</SourceLine>
   <SourceLine>g.FillRoundRect LineNumOffset - 10, sy - g.TextHeight, x - LineNumOffset + 10, TextHeight, 8, 8</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>g.FillRect LineNumOffset, sy - g.TextHeight, x - LineNumOffset, TextHeight</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else //small block in line.</SourceLine>
   <SourceLine>XYAtCharPos(tmpSelection.offset, i, x, y)</SourceLine>
   <SourceLine>XYAtCharPos(tmpSelection.offset  + tmpSelection.length, i, w, y)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if tmpSelection.Rounded then</SourceLine>
   <SourceLine>g.FillRoundRect x, sy - g.TextHeight, w - x, TextHeight, 8, 8</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>g.FillRect x, sy - g.TextHeight, w - x, TextHeight</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//paint a line background?</SourceLine>
   <SourceLine>PaintBelowLine(i, g, LineNumOffset, sy - g.TextHeight, g.Width - LineNumOffset - 1, TextHeight)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//paint line</SourceLine>
   <SourceLine>line.Paint(TextStorage, g, sx, sy - (g.TextHeight - g.TextAscent), TextColor, DisplayInvisibleCharacters, SelStart, SelLength)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//a line overlay?</SourceLine>
   <SourceLine>PaintAboveLine(i, g, LineNumOffset, sy - g.TextHeight, g.Width - LineNumOffset - 1, TextHeight)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//contents after folded line...</SourceLine>
   <SourceLine>if line.folded then</SourceLine>
   <SourceLine>dim tmp as TextLine = lines.getLine(lines.nextBlockEndLine(i))</SourceLine>
   <SourceLine>if tmp &lt;&gt; nil then</SourceLine>
   <SourceLine>//make italic and paint after current line.</SourceLine>
   <SourceLine>tmp.italic = True</SourceLine>
   <SourceLine>tmp.Paint(TextStorage, g, sx + line.TotalWidth + blockFoldedTrailImage.Width + 6, sy - (g.TextHeight - g.TextAscent), TextColor, false, SelStart, SelLength, false)</SourceLine>
   <SourceLine>tmp.italic = False</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//autocomplete suggestion</SourceLine>
   <SourceLine>if SelLength = 0 and i = CaretLine and trailingSuggestion &lt;&gt; "" then</SourceLine>
   <SourceLine>g.ForeColor = &amp;cAAAAAA</SourceLine>
   <SourceLine>g.DrawString trailingSuggestion, AutocompleteSuggestionInsertionX, sy - (g.TextHeight - g.TextAscent)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>linesDrawn = linesDrawn + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//go to next line</SourceLine>
   <SourceLine>sy = sy + TextHeight</SourceLine>
   <SourceLine>if sy - g.TextHeight &gt; g.Height then exit for //or bail out if we've reached the end of the canvas</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if VisibleLineRange.offset &lt;&gt; firstLine then</SourceLine>
   <SourceLine>VisibleLineRange.offset = firstLine</SourceLine>
   <SourceLine>VisibleLineRange.ResetIndex</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>VisibleLineRange.length = linesOnScreen</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//clear the rest of the buffer, if necessary</SourceLine>
   <SourceLine>sy = sy - g.TextHeight</SourceLine>
   <SourceLine>if sy &lt; g.Height then</SourceLine>
   <SourceLine>g.ForeColor = BackColor</SourceLine>
   <SourceLine>g.FillRect 0, sy, g.Width, g.Height - sy</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//invalid lines are no longer invalid</SourceLine>
   <SourceLine>invalidLines.Clear</SourceLine>
   <SourceLine>fullRefresh = False</SourceLine>
   <SourceLine>previouslyDrawnSelection = selection</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if MatchingBlockHighlight &lt;&gt; nil then</SourceLine>
   <SourceLine>InvalidateLine(MatchingBlockHighlight.StartLine)</SourceLine>
   <SourceLine>MatchingBlockHighlight = nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//draw line numbers</SourceLine>
   <SourceLine>if DisplayLineNumbers then</SourceLine>
   <SourceLine>g.DrawPicture Gutter, 0,0</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//and frame</SourceLine>
   <SourceLine>if Border then</SourceLine>
   <SourceLine>g.ForeColor = BorderColor</SourceLine>
   <SourceLine>g.DrawRect 0,0,g.Width,g.Height</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// paint visual block feedback</SourceLine>
   <SourceLine>#if TargetWin32</SourceLine>
   <SourceLine>if MouseOverBlock &lt;&gt; nil then</SourceLine>
   <SourceLine>'Dim ms As Double = Microseconds</SourceLine>
   <SourceLine>//compose editfield + blockHighlight</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim tmpPic as Picture = NewPicture(mBackBuffer.Width, mBackBuffer.Height, 32)</SourceLine>
   <SourceLine>g = tmpPic.Graphics</SourceLine>
   <SourceLine>g.DrawPicture( mBackBuffer, 0, 0, Width, Height, 0, 0, Width, Height)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim blockPicture as Picture = NewPicture(self.Width - LineNumOffset, self.Height, 32)</SourceLine>
   <SourceLine>Dim gb As Graphics = blockPicture.Graphics</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>gb.ForeColor = &amp;c000000</SourceLine>
   <SourceLine>gb.FillRect 0, 0, blockPicture.Width, blockPicture.Height</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>gb = blockPicture.Mask.Graphics</SourceLine>
   <SourceLine>gb.ForeColor = &amp;cAAAAAA</SourceLine>
   <SourceLine>gb.FillRect 0, 0, blockPicture.Width, blockPicture.Height</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>gb.ForeColor = &amp;cffffff</SourceLine>
   <SourceLine>gb.FillRoundRect MouseOverBlock.value("x") + 1, MouseOverBlock.Value("y") + 1, MouseOverBlock.Value("w") - 2, MouseOverBlock.Value("h") - 2, 10,10</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>gb.ForeColor = &amp;cA0A0A0</SourceLine>
   <SourceLine>gb.DrawRoundRect MouseOverBlock.value("x"), MouseOverBlock.Value("y"), MouseOverBlock.Value("w"), MouseOverBlock.Value("h"), 6,6</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>gb.ForeColor = &amp;C999999</SourceLine>
   <SourceLine>gb.DrawRoundRect MouseOverBlock.value("x"), MouseOverBlock.Value("y"), MouseOverBlock.Value("w"), MouseOverBlock.Value("h"), 8,8</SourceLine>
   <SourceLine>gb.DrawRoundRect MouseOverBlock.value("x")+1, MouseOverBlock.Value("y")+1, MouseOverBlock.Value("w")-2, MouseOverBlock.Value("h")-2, 10,10</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>gb.ForeColor = &amp;C888888</SourceLine>
   <SourceLine>gb.DrawRoundRect MouseOverBlock.value("x"), MouseOverBlock.Value("y"), MouseOverBlock.Value("w"), MouseOverBlock.Value("h"), 10,10</SourceLine>
   <SourceLine>gb.DrawRoundRect MouseOverBlock.value("x")+1, MouseOverBlock.Value("y")+1, MouseOverBlock.Value("w")-2, MouseOverBlock.Value("h")-2, 8,8</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.DrawPicture blockPicture, LineNumOffset, 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'ms = (Microseconds - ms) / 1000</SourceLine>
   <SourceLine>'break</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>gr.DrawPicture( tmpPic, 0, 0, Width, Height, 0, 0, Width, Height)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>gr.DrawPicture( mBackBuffer, 0, 0, Width, Height, 0, 0, Width, Height)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>// Now we can draw the back buffer to the screen</SourceLine>
   <SourceLine>gr.DrawPicture( mBackBuffer, 0, 0, Width, Height, 0, 0, Width, Height)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//-----------------------------------------------------------overlays</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//paint the location of the Previous/next block char</SourceLine>
   <SourceLine>if blockBeginPosX &gt;= 0 then</SourceLine>
   <SourceLine>PaintHighlightedBlock(gr)</SourceLine>
   <SourceLine>blockBeginPosX = -1</SourceLine>
   <SourceLine>blockBeginPosY = -1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//right margin</SourceLine>
   <SourceLine>if DisplayRightMarginMarker and RightMarginAtPixel &gt; 0 then</SourceLine>
   <SourceLine>'gr.DrawLine rightMarginMarkerOffset - ScrollPositionX + LeftMarginOffset + LineNumOffset, 0, rightMarginMarkerOffset - ScrollPositionX + LeftMarginOffset + LineNumOffset, g.Height</SourceLine>
   <SourceLine>gr.DrawPicture RightMarginLineImage, RightMarginAtPixel - ScrollPositionX + LeftMarginOffset + LineNumOffset, 0, 1, gr.Height, 0,0,1,1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//paint caret</SourceLine>
   <SourceLine>if DragSource = nil then</SourceLine>
   <SourceLine>PaintCaret(CaretPos, gr)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>PaintCaret(DragTextPos, gr)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>PaintOver(gr)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if TargetMacOS</SourceLine>
   <SourceLine>// paint visual block feedback</SourceLine>
   <SourceLine>if MouseOverBlock &lt;&gt; nil then</SourceLine>
   <SourceLine>dim blockPicture as Picture = NewPicture(self.Width - LineNumOffset, self.Height, 32)</SourceLine>
   <SourceLine>blockPicture.Graphics.ForeColor = &amp;c000000</SourceLine>
   <SourceLine>blockPicture.Graphics.FillRect 0, 0, blockPicture.Width, blockPicture.Height</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>blockPicture.mask.Graphics.ForeColor = &amp;cAAAAAA</SourceLine>
   <SourceLine>blockPicture.mask.Graphics.FillRect 0, 0, blockPicture.Width, blockPicture.Height</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>blockPicture.mask.Graphics.ForeColor = &amp;cffffff</SourceLine>
   <SourceLine>blockPicture.Mask.Graphics.FillRoundRect MouseOverBlock.value("x") + 1, MouseOverBlock.Value("y") + 1, MouseOverBlock.Value("w") - 2, MouseOverBlock.Value("h") - 2, 10, 10</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>blockPicture.mask.Graphics.ForeColor = &amp;C888888</SourceLine>
   <SourceLine>blockPicture.mask.Graphics.PenWidth = 2</SourceLine>
   <SourceLine>blockPicture.mask.Graphics.PenHeight = 2</SourceLine>
   <SourceLine>blockPicture.Mask.Graphics.DrawRoundRect MouseOverBlock.value("x"), MouseOverBlock.Value("y"), MouseOverBlock.Value("w"), MouseOverBlock.Value("h"), 10, 10</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>gr.DrawPicture blockPicture, LineNumOffset, 0</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>redrawTime = Microseconds - redrawTime</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>gr as graphics</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>enableBlinker</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub enableBlinker(value as boolean)</SourceLine>
   <SourceLine>if caretBlinker = nil then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if value and not ReadOnly then</SourceLine>
   <SourceLine>caretBlinker.Mode = timer.ModeMultiple</SourceLine>
   <SourceLine>caretState = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>caretBlinker.Mode = timer.ModeOff</SourceLine>
   <SourceLine>caretState = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>value as boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>fetchAutocompleteOptions</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function fetchAutocompleteOptions() As boolean</SourceLine>
   <SourceLine>//ask the client window for Autocomplete options for the current word.</SourceLine>
   <SourceLine>mCurrentAutocompleteOptions = nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//get word where caret is</SourceLine>
   <SourceLine>dim CurrentWordSegment as TextSegment = CurrentWord</SourceLine>
   <SourceLine>if CurrentWordSegment.length = 0 then Return False</SourceLine>
   <SourceLine>if CaretPos = CurrentWordSegment.offset then Return False //return false if cursor at the beginning of word... requested by Scott Fortmann-Roe</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//get the actual word text</SourceLine>
   <SourceLine>dim prefix as String = TextStorage.getText(CurrentWordSegment.offset, CurrentWordSegment.length).Trim</SourceLine>
   <SourceLine>if prefix.len = 0  or prefix = "." then Return False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//raise event</SourceLine>
   <SourceLine>mCurrentAutocompleteOptions = AutocompleteOptionsForPrefix(prefix)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if CurrentAutocompleteOptions = nil then Return False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if UBound(CurrentAutocompleteOptions.Options) &lt; 0 then</SourceLine>
   <SourceLine>mCurrentAutocompleteOptions = nil</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>CurrentAutocompleteOptions.Prefix = prefix</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//get current path component, what this is is, the last word after the last period in the prefix</SourceLine>
   <SourceLine>//if the prefix is one.two.three then the current component will be "three"</SourceLine>
   <SourceLine>dim tmpPath() as String = prefix.Split(".")</SourceLine>
   <SourceLine>CurrentAutocompleteOptions.currentPathComponent = tmpPath(UBound(tmpPath))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return true</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Find</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Find(what as string, ignoreCase as boolean, wrap as boolean, redraw as boolean = true, startPos as integer = - 1) As integer</SourceLine>
   <SourceLine>if what = "" then Return -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim tmpTxt as String = TextStorage.getText(0, TextStorage.Length)</SourceLine>
   <SourceLine>if tmpTxt.Encoding &lt;&gt; nil and tmpTxt.Encoding.Equals(Encodings.UTF16) then tmpTxt = tmpTxt.ConvertEncoding(encodings.UTF8)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if startPos &lt; 0 then startPos = SelStart + SelLength</SourceLine>
   <SourceLine>startPos = tmpTxt.left(startPos).LenB //in case there are multi-bytes...</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim scanner as new regex</SourceLine>
   <SourceLine>scanner.SearchPattern = what.ReplaceAll("\","\\").ReplaceAll("(","\(").replaceAll(")","\)").ReplaceAll("[","\[").ReplaceAll("]","\]").ReplaceAll("{","\{").ReplaceAll("}","\}").ReplaceAll("?","\?").ReplaceAll("*","\*").ReplaceAll("+","\+").ReplaceAll("|","\|").ReplaceAll("^","\^").ReplaceAll("$","\$").ReplaceAll(".","\.")</SourceLine>
   <SourceLine>scanner.Options.CaseSensitive = not ignoreCase</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim match as RegExMatch = scanner.Search(tmpTxt, startPos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if match = nil then</SourceLine>
   <SourceLine>if wrap then</SourceLine>
   <SourceLine>beep</SourceLine>
   <SourceLine>Return find(what, ignoreCase, false, redraw, 0)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>Return -1 //not found</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//reveal line if invisible (folded)</SourceLine>
   <SourceLine>dim offset as integer = tmpTxt.LeftB(match.SubExpressionStartB(0)).len</SourceLine>
   <SourceLine>dim length as integer = match.SubExpressionString(0).Len</SourceLine>
   <SourceLine>dim lineIdx as Integer = lines.getLineNumberForOffset(offset)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(lineIdx)</SourceLine>
   <SourceLine>if line &lt;&gt; nil and not line.visible then lines.revealLine(lineIdx)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>changeSelection(offset, length)</SourceLine>
   <SourceLine>if redraw then self.Redraw</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return SelStart</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Exception RegExSearchPatternException</SourceLine>
   <SourceLine>Return -1 //ignore these...</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>what as string, ignoreCase as boolean, wrap as boolean, redraw as boolean = true, startPos as integer = - 1</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>FoldAllLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub FoldAllLines()</SourceLine>
   <SourceLine>//hmmm</SourceLine>
   <SourceLine>if not EnableLineFoldings then Return</SourceLine>
   <SourceLine>lines.foldAll</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>FoldBlockAtCaretPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub FoldBlockAtCaretPos()</SourceLine>
   <SourceLine>//fold the block where the caret is.</SourceLine>
   <SourceLine>if not EnableLineFoldings then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim idx as Integer = OpeningBlockLineForLine(CaretLine)</SourceLine>
   <SourceLine>if idx &lt; 0 then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ToggleLineFold(idx)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>FoldingOffset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function FoldingOffset() As integer</SourceLine>
   <SourceLine>if not EnableLineFoldings then Return 0</SourceLine>
   <SourceLine>Return blockStartImage.Width + 2</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>getFieldXY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub getFieldXY(byref locx as integer, byref locy as integer)</SourceLine>
   <SourceLine>//find the window where this control is...</SourceLine>
   <SourceLine>//since the control can be deeeeeeep whithin container controls...</SourceLine>
   <SourceLine>locx=me.Left</SourceLine>
   <SourceLine>locy=me.top</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim container as Window</SourceLine>
   <SourceLine>Container=me.Window</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>while true</SourceLine>
   <SourceLine>locx=locx+Container.Left</SourceLine>
   <SourceLine>locy=locy+Container.top</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if container isa ContainerControl then</SourceLine>
   <SourceLine>Container=ContainerControl(Container).Window</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif Container isa Window then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Account for toolbar</SourceLine>
   <SourceLine>// Thanks to Roger Meier</SourceLine>
   <SourceLine>// This no longer works... from 2008r5+ it reports -1????</SourceLine>
   <SourceLine>#if RBVersion &gt;= 2007.00 and TargetWin32 then</SourceLine>
   <SourceLine>for i as integer = 0 to container.ControlCount-1</SourceLine>
   <SourceLine>if container.Control(i) isa Toolbar then</SourceLine>
   <SourceLine>dim tb as Toolbar = Toolbar(container.Control(i))</SourceLine>
   <SourceLine>locy = locy + tb.Height</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Exit</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>byref locx as integer, byref locy as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetLine(index as integer) As string</SourceLine>
   <SourceLine>//returns the text contained in a line.</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(index)</SourceLine>
   <SourceLine>if line = nil then Return ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return TextStorage.getText(line.offset, line.length)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer</ItemParams>
  <ItemResult>string</ItemResult>
 </Method>
 <Method>
  <ItemName>handleDoubleClick</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub handleDoubleClick()</SourceLine>
   <SourceLine>//highlight word(s) after a double click</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim word as new TextSegment</SourceLine>
   <SourceLine>dim char as String = TextStorage.getCharAt(CaretPos)</SourceLine>
   <SourceLine>if IsWhitespace(char) then char  = TextStorage.getCharAt(max(CaretPos - 1, 0))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//check if in placeholder..</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(CaretLine)</SourceLine>
   <SourceLine>if line &lt;&gt; nil and line.PlaceholderForOffset(CaretPos + 1) &lt;&gt; nil then</SourceLine>
   <SourceLine>Word.offset = CaretPos + 1</SourceLine>
   <SourceLine>Word.length = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif IsBlockChar(char) then</SourceLine>
   <SourceLine>//if is a block char, find the start/end block</SourceLine>
   <SourceLine>dim tmp as String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if BLOCK_OPEN_CHARS.instr(char) &gt; 0 then //</SourceLine>
   <SourceLine>Word.offset = CaretPos + 1</SourceLine>
   <SourceLine>word.length = NextBlockChar(char, CaretPos, tmp) - CaretPos - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>Word.offset = PreviousBlockChar(char, CaretPos, tmp) + 1</SourceLine>
   <SourceLine>word.length = CaretPos - Word.offset</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif IsWhitespace(char) then</SourceLine>
   <SourceLine>Word.offset = previousNonWhitespace(CaretPos)</SourceLine>
   <SourceLine>Word.length = nextNonWhitespace(CaretPos) - word.offset</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif IsAlpha(char) then</SourceLine>
   <SourceLine>Word.offset = previousNonAlpha(CaretPos)</SourceLine>
   <SourceLine>Word.length = nextNonAlpha(CaretPos) - word.offset</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>Word.offset = previousAlpha(CaretPos)</SourceLine>
   <SourceLine>Word.length = nextAlpha(CaretPos) - word.offset</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>changeSelection(word.offset, word.length, true)</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HandleDragOnGutter</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub HandleDragOnGutter(X as integer, Y as integer)</SourceLine>
   <SourceLine>//Handle a mouse drag on the gutter.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim currPos as Integer = CharPosAtXY(x,y)</SourceLine>
   <SourceLine>if selectedLine &gt;=0 and x &lt; LineNumOffset then</SourceLine>
   <SourceLine>//drag on the line numbers</SourceLine>
   <SourceLine>dim onLine as Integer = lines.getLineNumberForOffset(currPos)</SourceLine>
   <SourceLine>dim fromLine, toLine as TextLine</SourceLine>
   <SourceLine>fromLine = lines.getLine(min(selectedLine, onLine))</SourceLine>
   <SourceLine>toLine = lines.getLine(max(selectedLine, onLine))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>changeSelection(fromLine.offset, toLine.offset + toLine.length - fromLine.offset - toline.delimiterLength)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>changeSelection(min(currPos, CaretPos), abs(currPos - CaretPos))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>X as integer, Y as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HandleHorizontalMouseDrag</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub HandleHorizontalMouseDrag(x as integer, y as integer)</SourceLine>
   <SourceLine>if x &lt; LineNumOffset then</SourceLine>
   <SourceLine>changeScrollValues(ScrollPositionX + (x - LineNumOffset), ScrollPosition)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf x &gt; Width then</SourceLine>
   <SourceLine>changeScrollValues(ScrollPositionX + (x - Width), ScrollPosition)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>x as integer, y as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HandleKeyDown</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function HandleKeyDown(key as string) As boolean</SourceLine>
   <SourceLine>//handles the keys pressed</SourceLine>
   <SourceLine>ignoreRepaint = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>const DELETE_KEY = 8</SourceLine>
   <SourceLine>const FWD_DELETE_KEY = 127</SourceLine>
   <SourceLine>const UP_KEY = 30</SourceLine>
   <SourceLine>const DOWN_KEY = 31</SourceLine>
   <SourceLine>const LEFT_KEY = 28</SourceLine>
   <SourceLine>const RIGHT_KEY = 29</SourceLine>
   <SourceLine>const PAGE_UP_KEY = 11</SourceLine>
   <SourceLine>const PAGE_DOWN_KEY = 12</SourceLine>
   <SourceLine>const HOME_KEY = 1</SourceLine>
   <SourceLine>const END_KEY = 4</SourceLine>
   <SourceLine>const ESC_KEY = 27</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim keyAsc as Integer = asc(key)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>keyDownTime = Microseconds</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//delete</SourceLine>
   <SourceLine>if keyAsc = DELETE_KEY or keyAsc = FWD_DELETE_KEY then</SourceLine>
   <SourceLine>//add a new event ID if changed typing, or no event ID, or time elapsed between events is 5 secs</SourceLine>
   <SourceLine>if typing or CurrentEventID = 0   or ticks &gt; CurrentEventID + (60 * UNDO_EVT_BLOCK_SECS) then CurrentEventID = Ticks</SourceLine>
   <SourceLine>typing = False</SourceLine>
   <SourceLine>DeleteChars(keyAsc = FWD_DELETE_KEY)</SourceLine>
   <SourceLine>updateDesiredColumn</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//arrow keys</SourceLine>
   <SourceLine>elseif keyAsc = LEFT_KEY then</SourceLine>
   <SourceLine>CurrentEventID = 0</SourceLine>
   <SourceLine>moveCaretLeft</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif keyAsc = RIGHT_KEY then</SourceLine>
   <SourceLine>CurrentEventID = 0</SourceLine>
   <SourceLine>moveCaretRight</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif keyAsc = UP_KEY then</SourceLine>
   <SourceLine>CurrentEventID = 0</SourceLine>
   <SourceLine>moveCaretUp</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif keyAsc = DOWN_KEY then</SourceLine>
   <SourceLine>CurrentEventID = 0</SourceLine>
   <SourceLine>moveCaretDown</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf keyAsc = PAGE_UP_KEY then</SourceLine>
   <SourceLine>#if TargetMacOS</SourceLine>
   <SourceLine>PageUp</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>PageUp '++++ -&gt; should move cursor by a page instead!</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif keyAsc = PAGE_DOWN_KEY then</SourceLine>
   <SourceLine>#if TargetMacOS</SourceLine>
   <SourceLine>PageDown</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>PageDown '++++ -&gt; should move cursor by a page instead!</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif keyAsc = HOME_KEY then</SourceLine>
   <SourceLine>#if TargetMacOS</SourceLine>
   <SourceLine>ScrollHome</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>ScrollHome '++++ -&gt; should move cursor to start of line instead!</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif keyAsc = END_KEY then</SourceLine>
   <SourceLine>#if TargetMacOS</SourceLine>
   <SourceLine>ScrollEnd</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>ScrollEnd '++++ -&gt; should move cursor to end of line instead!</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//autocomplete</SourceLine>
   <SourceLine>//forward the event to the user to figure out if this key should trigger the autocomplete</SourceLine>
   <SourceLine>//it has a performance penalty, if you would like to set your own key, replace</SourceLine>
   <SourceLine>//ShouldTriggerAutocomplete(key, fetchAutocompleteOptions) with your key combination.</SourceLine>
   <SourceLine>elseif EnableAutocomplete and ShouldTriggerAutocomplete(key, fetchAutocompleteOptions) then</SourceLine>
   <SourceLine>AutocompleteManual</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//ignore these</SourceLine>
   <SourceLine>#if TargetWin32</SourceLine>
   <SourceLine>elseif Keyboard.ControlKey or _</SourceLine>
   <SourceLine>Keyboard.OSKey or _</SourceLine>
   <SourceLine>(asc(key) &gt;= 200 and asc(key) &lt;= 211) or _ //200-211 f keys</SourceLine>
   <SourceLine>keyAsc = ESC_KEY then</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>elseif Keyboard.ControlKey or _</SourceLine>
   <SourceLine>Keyboard.OSKey or _</SourceLine>
   <SourceLine>asc(key) = 16 or _ //f keys on the mac</SourceLine>
   <SourceLine>keyAsc = ESC_KEY then</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>ignoreRepaint = False</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>//any other key</SourceLine>
   <SourceLine>//add a new event ID if changed typing, or no event ID, or time elapsed between events is 5 secs</SourceLine>
   <SourceLine>if not typing or CurrentEventID = 0  or ticks &gt; CurrentEventID + (60 * UNDO_EVT_BLOCK_SECS) then CurrentEventID = Ticks</SourceLine>
   <SourceLine>typing = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if there's a selction, replace it</SourceLine>
   <SourceLine>if me.SelLength &gt; 0 then</SourceLine>
   <SourceLine>replace(selStart , me.SelLength, key)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>//see if we need to Autocomplete brackets</SourceLine>
   <SourceLine>dim bracketInserted as Boolean</SourceLine>
   <SourceLine>if AutoCloseBrackets then</SourceLine>
   <SourceLine>//scan the possible opening block chars...</SourceLine>
   <SourceLine>for i as Integer = 1 to BLOCK_OPEN_CHARS.len</SourceLine>
   <SourceLine>if key = BLOCK_OPEN_CHARS.Mid(i, 1) then</SourceLine>
   <SourceLine>//found, so the closing block MUST be at the same location, in the BLOCK_CLOSE_CHARS</SourceLine>
   <SourceLine>key = key + BLOCK_CLOSE_CHARS.Mid(i, 1)</SourceLine>
   <SourceLine>bracketInserted = true</SourceLine>
   <SourceLine>exit for</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>insert(selStart, key)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if autocompleted, move caret one char to the left</SourceLine>
   <SourceLine>if bracketInserted then CaretPos = CaretPos - 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//autoindent lines?</SourceLine>
   <SourceLine>//check if current (new) entered line needs autoindenting...</SourceLine>
   <SourceLine>If AutoIndentNewLines and (key = chr(13) or key = chr(3)) then</SourceLine>
   <SourceLine>//indent this new line?</SourceLine>
   <SourceLine>dim LineNum as Integer = lines.getLineNumberForOffset(CaretPos)</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(LineNum)</SourceLine>
   <SourceLine>//check current line</SourceLine>
   <SourceLine>if IndentNewLine(LineNum, line) &gt; 0 then</SourceLine>
   <SourceLine>InvalidateLine(LineNum)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf AutoIndentNewLines then</SourceLine>
   <SourceLine>//check current line also available in AutocompleteOptionSelected</SourceLine>
   <SourceLine>dim thisLine as TextLine = lines.getLine(CaretLine)</SourceLine>
   <SourceLine>if thisLine &lt;&gt; nil and thisLine.isBlockEnd and IndentBlockEndLine(CaretLine) &gt; 0 then</SourceLine>
   <SourceLine>InvalidateLine(CaretLine)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//save the screen location of the caret, in case we need to move up/down</SourceLine>
   <SourceLine>updateDesiredColumn</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>keyDownTime = Microseconds - keyDownTime</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if MouseOverBlock &lt;&gt; nil then</SourceLine>
   <SourceLine>CreateMouseOverBlockHighlight(CaretLine)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//and redraw.</SourceLine>
   <SourceLine>ignoreRepaint = False</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return true</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>key as string</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>HandleKeyDownOriginal</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function HandleKeyDownOriginal(key as string) As boolean</SourceLine>
   <SourceLine>//handles the keys pressed</SourceLine>
   <SourceLine>ignoreRepaint = true</SourceLine>
   <SourceLine>'MsgBox str(asc(key))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>const DELETE_KEY = 8</SourceLine>
   <SourceLine>const FWD_DELETE_KEY = 127</SourceLine>
   <SourceLine>const UP_KEY = 30</SourceLine>
   <SourceLine>const DOWN_KEY = 31</SourceLine>
   <SourceLine>const LEFT_KEY = 28</SourceLine>
   <SourceLine>const RIGHT_KEY = 29</SourceLine>
   <SourceLine>const PAGE_UP_KEY = 11</SourceLine>
   <SourceLine>const PAGE_DOWN_KEY = 12</SourceLine>
   <SourceLine>const HOME_KEY = 1</SourceLine>
   <SourceLine>const END_KEY = 4</SourceLine>
   <SourceLine>const ESC_KEY = 27</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>keyDownTime = Microseconds</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//delete</SourceLine>
   <SourceLine>if Keyboard.AsyncKeyDown(KEY_BACKSPACE) or Keyboard.AsyncKeyDown(KEY_DELETE) then</SourceLine>
   <SourceLine>//add a new event ID if changed typing, or no event ID, or time elapsed between events is 5 secs</SourceLine>
   <SourceLine>if typing or CurrentEventID = 0   or ticks &gt; CurrentEventID + (60 * UNDO_EVT_BLOCK_SECS) then CurrentEventID = Ticks</SourceLine>
   <SourceLine>typing = False</SourceLine>
   <SourceLine>DeleteChars(Keyboard.AsyncKeyDown(KEY_DELETE))</SourceLine>
   <SourceLine>updateDesiredColumn</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//arrow keys</SourceLine>
   <SourceLine>elseif Keyboard.AsyncKeyDown(KEY_LEFT) then</SourceLine>
   <SourceLine>CurrentEventID = 0</SourceLine>
   <SourceLine>moveCaretLeft</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif Keyboard.AsyncKeyDown(KEY_RIGHT) then</SourceLine>
   <SourceLine>CurrentEventID = 0</SourceLine>
   <SourceLine>moveCaretRight</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif Keyboard.AsyncKeyDown(KEY_UP) then</SourceLine>
   <SourceLine>CurrentEventID = 0</SourceLine>
   <SourceLine>moveCaretUp</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif Keyboard.AsyncKeyDown(KEY_DOWN) then</SourceLine>
   <SourceLine>CurrentEventID = 0</SourceLine>
   <SourceLine>moveCaretDown</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf Keyboard.AsyncKeyDown(KEY_PGUP) then</SourceLine>
   <SourceLine>PageUp</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif Keyboard.AsyncKeyDown(KEY_PGDWN) then</SourceLine>
   <SourceLine>PageDown</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif Keyboard.AsyncKeyDown(KEY_HOME) then</SourceLine>
   <SourceLine>ScrollHome</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif Keyboard.AsyncKeyDown(KEY_END) then</SourceLine>
   <SourceLine>ScrollEnd</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//autocomplete</SourceLine>
   <SourceLine>//forward the event to the user to figure out if this key should trigger the autocomplete</SourceLine>
   <SourceLine>//it has a performance penalty, if you would like to set your own key, replace</SourceLine>
   <SourceLine>//ShouldTriggerAutocomplete(key, fetchAutocompleteOptions) with your key combination.</SourceLine>
   <SourceLine>elseif EnableAutocomplete and ShouldTriggerAutocomplete(key, fetchAutocompleteOptions) then</SourceLine>
   <SourceLine>AutocompleteManual</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//ignore these</SourceLine>
   <SourceLine>#if TargetWin32</SourceLine>
   <SourceLine>elseif Keyboard.AsyncControlKey or _</SourceLine>
   <SourceLine>Keyboard.AsyncOSKey or _</SourceLine>
   <SourceLine>(asc(key) &gt;= 200 and asc(key) &lt;= 211) or _ //200-211 f keys</SourceLine>
   <SourceLine>Keyboard.AsyncKeyDown(KEY_ESC) then</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>elseif Keyboard.AsyncControlKey or _</SourceLine>
   <SourceLine>Keyboard.AsyncOSKey or _</SourceLine>
   <SourceLine>asc(key) = 16 or _ //f keys on the mac</SourceLine>
   <SourceLine>Keyboard.AsyncKeyDown(KEY_ESC) then</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>ignoreRepaint = False</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>//any other key</SourceLine>
   <SourceLine>//add a new event ID if changed typing, or no event ID, or time elapsed between events is 5 secs</SourceLine>
   <SourceLine>if not typing or CurrentEventID = 0  or ticks &gt; CurrentEventID + (60 * UNDO_EVT_BLOCK_SECS) then CurrentEventID = Ticks</SourceLine>
   <SourceLine>typing = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if there's a selction, replace it</SourceLine>
   <SourceLine>if me.SelLength &gt; 0 then</SourceLine>
   <SourceLine>replace(selStart , me.SelLength, key)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>//see if we need to Autocomplete brackets</SourceLine>
   <SourceLine>dim bracketInserted as Boolean</SourceLine>
   <SourceLine>if AutoCloseBrackets then</SourceLine>
   <SourceLine>//scan the possible opening block chars...</SourceLine>
   <SourceLine>for i as Integer = 1 to BLOCK_OPEN_CHARS.len</SourceLine>
   <SourceLine>if key = BLOCK_OPEN_CHARS.Mid(i, 1) then</SourceLine>
   <SourceLine>//found, so the closing block MUST be at the same location, in the BLOCK_CLOSE_CHARS</SourceLine>
   <SourceLine>key = key + BLOCK_CLOSE_CHARS.Mid(i, 1)</SourceLine>
   <SourceLine>bracketInserted = true</SourceLine>
   <SourceLine>exit for</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>insert(selStart, key)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if autocompleted, move caret one char to the left</SourceLine>
   <SourceLine>if bracketInserted then CaretPos = CaretPos - 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//autoindent lines?</SourceLine>
   <SourceLine>//check if current (new) entered line needs autoindenting...</SourceLine>
   <SourceLine>If AutoIndentNewLines and (key = chr(13) or key = chr(3)) then</SourceLine>
   <SourceLine>//indent this new line?</SourceLine>
   <SourceLine>dim LineNum as Integer = lines.getLineNumberForOffset(CaretPos)</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(LineNum)</SourceLine>
   <SourceLine>//check current line</SourceLine>
   <SourceLine>if IndentNewLine(LineNum, line) &gt; 0 then</SourceLine>
   <SourceLine>InvalidateLine(LineNum)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf AutoIndentNewLines then</SourceLine>
   <SourceLine>//check current line also available in AutocompleteOptionSelected</SourceLine>
   <SourceLine>dim thisLine as TextLine = lines.getLine(CaretLine)</SourceLine>
   <SourceLine>if thisLine &lt;&gt; nil and thisLine.isBlockEnd and IndentBlockEndLine(CaretLine) &gt; 0 then</SourceLine>
   <SourceLine>InvalidateLine(CaretLine)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//save the screen location of the caret, in case we need to move up/down</SourceLine>
   <SourceLine>updateDesiredColumn</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>keyDownTime = Microseconds - keyDownTime</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//and redraw.</SourceLine>
   <SourceLine>ignoreRepaint = False</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return true</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>key as string</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>HandleTextChanged</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub HandleTextChanged()</SourceLine>
   <SourceLine>if clearHighlightedRangesOnTextChange then _</SourceLine>
   <SourceLine>ClearHighlightedCharacterRanges</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HandleTextDrag</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub HandleTextDrag(x as integer, y as integer)</SourceLine>
   <SourceLine>//save the selection...</SourceLine>
   <SourceLine>DragTextSelection = new DataRange</SourceLine>
   <SourceLine>DragTextSelection.offset = SelStart</SourceLine>
   <SourceLine>DragTextSelection.length = SelLength</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim drag as Picture = SelectedTextDragImage</SourceLine>
   <SourceLine>dim di as DragItem = NewDragItem(x,y, drag.Width, drag.Height)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//set the drag text</SourceLine>
   <SourceLine>di.Text = me.SelText</SourceLine>
   <SourceLine>di.SetImage(drag)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//set the dragging source.</SourceLine>
   <SourceLine>DragSource = self</SourceLine>
   <SourceLine>di.Drag</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>x as integer, y as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HandleVerticalMouseDrag</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub HandleVerticalMouseDrag(x as integer, y as integer)</SourceLine>
   <SourceLine>//if dragging selection outside visible area...</SourceLine>
   <SourceLine>if y &lt; 0 or y &gt; Height then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim linesToScroll as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if y &lt; 0 then</SourceLine>
   <SourceLine>linesToScroll = y / TextHeight</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>linesToScroll = (y - Height) / TextHeight</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//cap the number of times this method gets called per second (here is max 12 calls per second)</SourceLine>
   <SourceLine>if Ticks &gt; lastDragTicks + 5 then</SourceLine>
   <SourceLine>changeScrollValues(ScrollPositionX, ScrollPosition + linesToScroll)</SourceLine>
   <SourceLine>lastDragTicks = Ticks</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>x as integer, y as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Highlight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Highlight()</SourceLine>
   <SourceLine>if highlighter.state = Thread.NotRunning then highlighter.Run</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HighlightCharacterRange</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub HighlightCharacterRange(offset as integer, length as integer, withColor as color, rounded as boolean = false)</SourceLine>
   <SourceLine>if offset &gt;= TextLength or length = 0 then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if offset + length &gt;= TextLength then</SourceLine>
   <SourceLine>length = TextLength - offset</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim tmp as new CharSelection</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tmp.offset = offset</SourceLine>
   <SourceLine>tmp.length = length</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tmp.StartLine = lines.getLineNumberForOffset(tmp.offset)</SourceLine>
   <SourceLine>tmp.EndLine = lines.getLineNumberForOffset(tmp.offset + tmp.length)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tmp.SelectionColor = withColor</SourceLine>
   <SourceLine>tmp.Rounded = rounded</SourceLine>
   <SourceLine>tmp.LosesFocus = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tmp = HighlightedRanges.addSelection(tmp)</SourceLine>
   <SourceLine>for i as Integer = tmp.StartLine to tmp.EndLine</SourceLine>
   <SourceLine>InvalidateLine(i)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer, length as integer, withColor as color, rounded as boolean = false</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HighlightClosingBlock</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub HighlightClosingBlock(text as string, offset as integer)</SourceLine>
   <SourceLine>//find the next closing block, starting at offset</SourceLine>
   <SourceLine>dim pos as Integer</SourceLine>
   <SourceLine>dim closeChar as String</SourceLine>
   <SourceLine>pos = NextBlockChar(text, offset, closeChar)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if pos &gt;= 0 then</SourceLine>
   <SourceLine>if HighlightMatchingBracketsMode = 0 then //circle</SourceLine>
   <SourceLine>XYAtCharPos(pos, blockBeginPosX, blockBeginPosY)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>dim line as Integer = LineNumAtCharPos(pos)</SourceLine>
   <SourceLine>MatchingBlockHighlight = new CharSelection(pos, 1, line, line, BracketHighlightColor)</SourceLine>
   <SourceLine>InvalidateLine(line)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>BlockCharsMatched(text, offset, closeChar, pos)</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>text as string, offset as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HighlightOpeningBlock</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub HighlightOpeningBlock(text as string, offset as integer)</SourceLine>
   <SourceLine>//find the previous opening block, starting at offset</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim pos as Integer</SourceLine>
   <SourceLine>dim openingChar as string</SourceLine>
   <SourceLine>pos = PreviousBlockChar(text, offset, openingChar)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if pos &gt;= 0 then</SourceLine>
   <SourceLine>if HighlightMatchingBracketsMode = 0 then//circle</SourceLine>
   <SourceLine>XYAtCharPos(pos, blockBeginPosX, blockBeginPosY)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>dim line as Integer = LineNumAtCharPos(pos)</SourceLine>
   <SourceLine>MatchingBlockHighlight = new CharSelection(pos, 1, line, line, BracketHighlightColor)</SourceLine>
   <SourceLine>InvalidateLine(line)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>BlockCharsMatched(openingChar, pos, text, offset)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>//no open block found</SourceLine>
   <SourceLine>break</SourceLine>
   <SourceLine>beep</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>text as string, offset as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>IndentBlockEndLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IndentBlockEndLine(lineIndex as integer, updateSelection as Boolean = true) As integer</SourceLine>
   <SourceLine>if not AutoIndentNewLines then Return 0</SourceLine>
   <SourceLine>if SyntaxDefinition = nil then Return 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim previousLine, current as TextLine</SourceLine>
   <SourceLine>//check current line first.</SourceLine>
   <SourceLine>current = lines.getLine(lineIndex)</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>dim txt as String = TextStorage.getText(current.offset, current.length)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>if not SyntaxDefinition.isBlockEnd(TextStorage.getText(current.offset, current.length)) then Return 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>previousLine = lines.getLine(lines.previousBlockStartLine(lineIndex))</SourceLine>
   <SourceLine>if previousLine = nil then Return 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim count as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find all first non-whitespace char in previous line</SourceLine>
   <SourceLine>dim firstCharPos as Integer = nextNonWhitespace(previousLine.offset - 1, previousLine.offset + previousLine.length - previousLine.delimiterLength)</SourceLine>
   <SourceLine>dim indentChars as String = TextStorage.getText(previousLine.offset, firstCharPos - previousLine.offset)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//local pos</SourceLine>
   <SourceLine>dim localfirstCharPos as integer = nextNonWhitespace(current.offset - 1, current.offset + current.length - current.delimiterLength)</SourceLine>
   <SourceLine>dim localIndentChars as String = TextStorage.getText(current.offset, localfirstCharPos - current.offset)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//already indented?</SourceLine>
   <SourceLine>if localIndentChars = indentChars then Return 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim delta as Integer = firstCharPos - previousLine.offset</SourceLine>
   <SourceLine>delta = localfirstCharPos - current.offset - delta</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim cp as Integer = CaretPos</SourceLine>
   <SourceLine>Replace(current.offset, current.length, indentChars + TextStorage.getText(localfirstCharPos, current.length + current.offset - localfirstCharPos))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if updateSelection then _</SourceLine>
   <SourceLine>CaretPos = cp - delta</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return indentChars.len</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineIndex as integer, updateSelection as Boolean = true</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>IndentNewLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IndentNewLine(lineIndex as integer, line as textline, updateSelection as Boolean = true) As integer</SourceLine>
   <SourceLine>if not AutoIndentNewLines then Return 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim previousLine as TextLine</SourceLine>
   <SourceLine>previousLine = lines.getLine(lineIndex - 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if previousLine = nil then Return 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find all first non-whitespace char in previous line</SourceLine>
   <SourceLine>dim firstCharPos as Integer = nextNonWhitespace(previousLine.offset - 1, previousLine.offset + previousLine.length - previousLine.delimiterLength)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim indentChars as String = TextStorage.getText(previousLine.offset, firstCharPos - previousLine.offset)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//check extra indentations</SourceLine>
   <SourceLine>if SyntaxDefinition &lt;&gt; nil then</SourceLine>
   <SourceLine>//check current line first.</SourceLine>
   <SourceLine>dim count as Integer = SyntaxDefinition.isBlockStart(TextStorage.getText(previousLine.offset, previousLine.length))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if Count &gt; 0 then //extra indent</SourceLine>
   <SourceLine>indentChars = indentChars + indentStr(Count)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Elseif Count &lt; 0 then //remove indent</SourceLine>
   <SourceLine>indentChars = indentChars.left(indentChars.len + Count)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if indentChars.len = 0 then Return 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim CaretPos as integer = self.CaretPos</SourceLine>
   <SourceLine>Replace(line.offset, line.length, indentChars + TextStorage.getText(line.offset, line.length))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if updateSelection then _</SourceLine>
   <SourceLine>changeSelection(CaretPos + indentChars.len, 0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return indentChars.len</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineIndex as integer, line as textline, updateSelection as Boolean = true</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>indentStr</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function indentStr(indents as integer) As string</SourceLine>
   <SourceLine>dim tmp as String</SourceLine>
   <SourceLine>for i as Integer = 1 to indents</SourceLine>
   <SourceLine>tmp = tmp + chr(9)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return tmp</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>indents as integer</ItemParams>
  <ItemResult>string</ItemResult>
 </Method>
 <Method>
  <ItemName>Insert</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Insert(offset as integer, text as string)</SourceLine>
   <SourceLine>Replace(offset, 0, Text)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer, text as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>InvalidateAllLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub InvalidateAllLines()</SourceLine>
   <SourceLine>//mark all lines for redraw</SourceLine>
   <SourceLine>InvalidateLine(-1)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>InvalidateLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub InvalidateLine(index as integer)</SourceLine>
   <SourceLine>//invalidates the given line, that is, mark it for redrawing</SourceLine>
   <SourceLine>fullRefresh = index &lt; 0 or fullRefresh</SourceLine>
   <SourceLine>invalidLines.Value(index) = true</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>IsAlpha</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsAlpha(inText as string) As boolean</SourceLine>
   <SourceLine>//is "inText" alphanumeric?</SourceLine>
   <SourceLine>Return matchesRegex("\w", inText)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>inText as string</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>IsBlockChar</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsBlockChar(char as string) As boolean</SourceLine>
   <SourceLine>//is "char" a block char?</SourceLine>
   <SourceLine>if blockCharsPattern = "" then</SourceLine>
   <SourceLine>//build search pattern</SourceLine>
   <SourceLine>for i as Integer = 1 to BLOCK_OPEN_CHARS.len</SourceLine>
   <SourceLine>blockCharsPattern = blockCharsPattern + "\" + BLOCK_OPEN_CHARS.Mid(i, 1) + "\"+BLOCK_CLOSE_CHARS.Mid(i, 1)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>blockCharsPattern = "[" + blockCharsPattern + "]"</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>Return matchesRegex(blockCharsPattern, char)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>char as string</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>IsDirty</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsDirty() As boolean</SourceLine>
   <SourceLine>Return UndoMgr.isDirty</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>IsWhitespace</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsWhitespace(what as string) As boolean</SourceLine>
   <SourceLine>//is "what" whitespace?</SourceLine>
   <SourceLine>Return matchesRegex("\s", what)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>what as string</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>LineCount</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function LineCount() As integer</SourceLine>
   <SourceLine>Return lines.Count</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>LineCountChanged</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub LineCountChanged(newLineCount as integer)</SourceLine>
   <SourceLine>//called by line manager, when the line number changes.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//force to recalculate the line number gutter</SourceLine>
   <SourceLine>LineNumOffset = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//raise the linecountchanged event</SourceLine>
   <SourceLine>RaiseEvent LineCountChanged lines.Count</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//and calculate the maximum scrollbar values.</SourceLine>
   <SourceLine>CalculateMaxVerticalSB</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>newLineCount as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>LineHasBookmark</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function LineHasBookmark(lineIndex as Integer) As Boolean</SourceLine>
   <SourceLine>Return BookmarkTable.HasKey(lineIndex)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineIndex as Integer</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>LineHighlighted</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub LineHighlighted(lineIndex as integer)</SourceLine>
   <SourceLine>//mark for repaint</SourceLine>
   <SourceLine>InvalidateLine(lineIndex)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(lineIndex)</SourceLine>
   <SourceLine>if line = nil then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if line.LineSymbols = nil or line.LineSymbols.Count = 0 then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//extract symbols and add them to local table.</SourceLine>
   <SourceLine>if CurrentDocumentSymbols = nil then CurrentDocumentSymbols = new Dictionary</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as Integer = 0 to line.LineSymbols.Count - 1</SourceLine>
   <SourceLine>//CurrentDocumentSymbols.Value(line.LineSymbols.Key(i)) = line</SourceLine>
   <SourceLine>CurrentDocumentSymbols.Value(line) = nil</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineIndex as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>LineIcon</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function LineIcon(index as integer) As picture</SourceLine>
   <SourceLine>//returns the rowicon for the index line</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(index)</SourceLine>
   <SourceLine>if line = nil then Return nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return line.icon</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer</ItemParams>
  <ItemResult>picture</ItemResult>
 </Method>
 <Method>
  <ItemName>LineIcon</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub LineIcon(index as integer, assigns value as picture)</SourceLine>
   <SourceLine>//sets a rowicon</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(index)</SourceLine>
   <SourceLine>if line = nil then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>line.icon = value</SourceLine>
   <SourceLine>InvalidateLine(index)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer, assigns value as picture</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>LineNumAtCharPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function LineNumAtCharPos(offset as integer) As integer</SourceLine>
   <SourceLine>Return lines.getLineNumberForOffset(offset)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>LineSymbolsRemoved</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub LineSymbolsRemoved(symbols as dictionary)</SourceLine>
   <SourceLine>//either the symbols have changed, or the line containing them was removed, so remove them from local table.</SourceLine>
   <SourceLine>dim key as TextLine</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for each key in symbols.keys</SourceLine>
   <SourceLine>if CurrentDocumentSymbols.HasKey(key) then CurrentDocumentSymbols.Remove(key)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>symbols as dictionary</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>matchesRegex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function matchesRegex(pattern as string, expression as string) As boolean</SourceLine>
   <SourceLine>//returns whether expression matches the pattern.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim rg as RegEx</SourceLine>
   <SourceLine>Dim myMatch as RegExMatch</SourceLine>
   <SourceLine>rg = new RegEx</SourceLine>
   <SourceLine>rg.SearchPattern = pattern</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if expression.Encoding &lt;&gt; nil and expression.Encoding.Equals(Encodings.UTF16) then expression = expression.ConvertEncoding(Encodings.UTF8)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myMatch = rg.search(expression)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return myMatch &lt;&gt; nil</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>pattern as string, expression as string</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>MaxLineLengthChanged</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub MaxLineLengthChanged(longestLineIndex as integer)</SourceLine>
   <SourceLine>//called by the line manager, when there's a new line that's the longest line.</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//oh yes... this can be a lot better, for starters we can get the screen width by reading all the word lenghts in this line... I guess I'm just lazy.</SourceLine>
   <SourceLine>if longestLineIndex &lt; 0 then Return</SourceLine>
   <SourceLine>dim maxLine as TextLine = lines.getLine(longestLineIndex)</SourceLine>
   <SourceLine>if maxline = nil or abs(maxLine.length - lastLongestLineLength) &lt; 2 then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//cache length</SourceLine>
   <SourceLine>lastLongestLineLength = maxLine.length</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//measure string in pixels</SourceLine>
   <SourceLine>dim tmp as Picture = tmpPicture</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'dim maxString as String = maxline.TextToDisplay(TextStorage, DisplayInvisibleCharacters)</SourceLine>
   <SourceLine>dim maxLength as single = maxLine.TextWidth(TextStorage, tmp.Graphics, DisplayInvisibleCharacters)'maxline.TotalWidth 'tmp.graphics.stringWidth(maxString)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if maxLength = lastLongestLinePixels then Return</SourceLine>
   <SourceLine>lastLongestLinePixels = maxLength</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//raise event</SourceLine>
   <SourceLine>RaiseEvent MaxLineLengthChanged lastLongestLinePixels</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//calculate scrollbar</SourceLine>
   <SourceLine>CalculateMaxHorizontalSB</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>longestLineIndex as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>moveCaretDown</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub moveCaretDown()</SourceLine>
   <SourceLine>//arrow down...</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if selection, move Caret to end of selection.</SourceLine>
   <SourceLine>if not Keyboard.ShiftKey and selLength &gt; 0 then</SourceLine>
   <SourceLine>changeSelection(selStart + selLength, 0)</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim lineNum as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find line number</SourceLine>
   <SourceLine>if selStart &lt; CaretPos then</SourceLine>
   <SourceLine>lineNum = lines.getLineNumberForOffset(selStart)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>lineNum = lines.getLineNumberForOffset(selStart + selLength)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//default the lines to move to 1</SourceLine>
   <SourceLine>dim linesToMove as Integer = 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if option is pressed, then move down a full page</SourceLine>
   <SourceLine>if Keyboard.OptionKey then linesToMove = MaxVisibleLines - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//or if control/os key pressed, move to the end of the page</SourceLine>
   <SourceLine>dim moveToEnd as Boolean</SourceLine>
   <SourceLine>#if TargetWin32 then</SourceLine>
   <SourceLine>moveToEnd = Keyboard.ControlKey</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>moveToEnd = Keyboard.OSKey</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if moveToEnd then</SourceLine>
   <SourceLine>linesToMove = lines.Count - 1 - ScrollPosition</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim line as TextLine</SourceLine>
   <SourceLine>dim offset as Integer</SourceLine>
   <SourceLine>//get line to move to</SourceLine>
   <SourceLine>LineNum =LineNum + linesToMove</SourceLine>
   <SourceLine>if LineNum &gt;= lines.Count then //moving down on the last line, jump to the end of that line</SourceLine>
   <SourceLine>LineNum = lines.Count - 1</SourceLine>
   <SourceLine>line = lines.getLine(LineNum)</SourceLine>
   <SourceLine>offset = line.offset + line.length - line.delimiterLength</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>line = lines.getLine(LineNum)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find offset for screen desired position</SourceLine>
   <SourceLine>offset = offsetForXPos(line, caretDesiredColumn)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if shift key pressed, then we're extending the selection</SourceLine>
   <SourceLine>if Keyboard.ShiftKey then</SourceLine>
   <SourceLine>changeSelection(min(CaretPos, offset), abs(offset - CaretPos))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>changeSelection(offset, 0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//scroll if necessary.</SourceLine>
   <SourceLine>if lineNum &gt; ScrollPosition + MaxVisibleLines - 1 then changeScrollValues(ScrollPositionX, LineNum - MaxVisibleLines + 1)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>moveCaretLeft</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub moveCaretLeft()</SourceLine>
   <SourceLine>//left arrow pressed</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim pos as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//default the places to move to 1</SourceLine>
   <SourceLine>dim charsToMove as Integer = 1</SourceLine>
   <SourceLine>dim LineNum as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//move to start of line?</SourceLine>
   <SourceLine>dim toStartOfLine as Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if shift pressed, we're changing the current selection.</SourceLine>
   <SourceLine>if Keyboard.ShiftKey then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if the end of the selection is after the CaretPos then, shrink selection</SourceLine>
   <SourceLine>if selStart + selLength &gt; CaretPos then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if TargetWin32</SourceLine>
   <SourceLine>toStartOfLine =  Keyboard.ControlKey</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>toStartOfLine = Keyboard.OSKey</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//move to start of line.</SourceLine>
   <SourceLine>if toStartOfLine then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//lineNum = lines.getLineNumberForOffset(selStart+selLength - 1)</SourceLine>
   <SourceLine>lineNum = lines.getLineNumberForOffset(selStart+selLength)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if selStart +selLength  &gt; lines.getLine(LineNum).offset then</SourceLine>
   <SourceLine>changeSelection(lines.getLine(LineNum).offset, CaretPos -  lines.getLine(LineNum).offset)</SourceLine>
   <SourceLine>pos = selStart</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>ViewToCharPos(LineNum, SelStart + SelLength)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//move to previous word</SourceLine>
   <SourceLine>ElseIf Keyboard.OptionKey then</SourceLine>
   <SourceLine>dim previous as Integer = previousNonAlpha(selStart + selLength)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>changeSelection(previous, CaretPos - previous)</SourceLine>
   <SourceLine>pos = previous</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ViewToCharPos(pos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//move just by one place</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>changeSelection(selStart, selLength - charsToMove)</SourceLine>
   <SourceLine>pos = selStart + selLength</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ViewToCharPos(pos)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//selection end is at caretpos, expand selection</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if TargetWin32</SourceLine>
   <SourceLine>toStartOfLine = Keyboard.ControlKey</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>toStartOfLine = Keyboard.OSKey</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//move to start of line</SourceLine>
   <SourceLine>if toStartOfLine then</SourceLine>
   <SourceLine>//LineNum = lines.getLineNumberForOffset(max(selStart - 1, 0))</SourceLine>
   <SourceLine>LineNum = lines.getLineNumberForOffset(max(selStart, 0))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if selStart &gt; lines.getLine(LineNum).offset then</SourceLine>
   <SourceLine>changeSelection(lines.getLine(LineNum).offset, CaretPos -  lines.getLine(LineNum).offset)</SourceLine>
   <SourceLine>pos = selStart</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>ViewToCharPos(LineNum, SelStart)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//move to previous word</SourceLine>
   <SourceLine>ElseIf Keyboard.OptionKey then</SourceLine>
   <SourceLine>dim previous as Integer = previousNonAlpha(selStart)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>changeSelection(previous,  CaretPos - previous)</SourceLine>
   <SourceLine>pos = SelStart</SourceLine>
   <SourceLine>ViewToCharPos(pos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//move one place</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>changeSelection(selStart - charsToMove, selLength + charsToMove)</SourceLine>
   <SourceLine>pos = selStart</SourceLine>
   <SourceLine>ViewToCharPos(pos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//no shift, but there's active selction, move CaretPos to start of selection</SourceLine>
   <SourceLine>elseif selLength &gt; 0 then</SourceLine>
   <SourceLine>changeSelection(selStart, 0)</SourceLine>
   <SourceLine>pos = selStart</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//moving the caret</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if TargetWin32</SourceLine>
   <SourceLine>toStartOfLine = Keyboard.ControlKey</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>toStartOfLine = Keyboard.OSKey</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//move it to the start of the line</SourceLine>
   <SourceLine>if toStartOfLine then</SourceLine>
   <SourceLine>//get the line</SourceLine>
   <SourceLine>LineNum = lines.getLineNumberForOffset(selStart)</SourceLine>
   <SourceLine>charsToMove = selStart - lines.getLine(LineNum).offset</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//move to previous word boundary</SourceLine>
   <SourceLine>elseif Keyboard.OptionKey then</SourceLine>
   <SourceLine>charsToMove = selStart - previousNonAlpha(selStart)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>//simple move</SourceLine>
   <SourceLine>changeSelection(selStart - charsToMove, 0)</SourceLine>
   <SourceLine>pos = CaretPos</SourceLine>
   <SourceLine>ViewToCharPos(CaretLine, pos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//did we just "crossed" a block character?</SourceLine>
   <SourceLine>dim char as String = TextStorage.getCharAt(CaretPos)</SourceLine>
   <SourceLine>if IsBlockChar(char) then</SourceLine>
   <SourceLine>//then find the opening/closing char for this block.</SourceLine>
   <SourceLine>if BLOCK_CLOSE_CHARS.instr(char) &gt; 0 then</SourceLine>
   <SourceLine>HighlightOpeningBlock(char, caretpos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>HighlightClosingBlock(char, caretpos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>updateDesiredColumn(CaretPos)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>moveCaretRight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub moveCaretRight()</SourceLine>
   <SourceLine>//right arrow pressed</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim pos as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//default move to 1 char</SourceLine>
   <SourceLine>dim charsToMove as Integer = 1</SourceLine>
   <SourceLine>dim LineNum as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim toEndOfLine as Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//shift down, modify selection</SourceLine>
   <SourceLine>if Keyboard.ShiftKey then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//shrink</SourceLine>
   <SourceLine>if selStart &lt; CaretPos then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if TargetWin32</SourceLine>
   <SourceLine>toEndOfLine = Keyboard.ControlKey</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>toEndOfLine = Keyboard.OSKey</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//move to end of line</SourceLine>
   <SourceLine>if toEndOfLine then</SourceLine>
   <SourceLine>LineNum = lines.getLineNumberForOffset(selStart)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if selStart  &lt; lines.getLine(LineNum).offset + lines.getLine(LineNum).length then</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(LineNum)</SourceLine>
   <SourceLine>changeSelection(line.offset + line.length - line.delimiterLength, CaretPos - line.offset - line.length)</SourceLine>
   <SourceLine>//oct 10 changed changeSelection(line.offset + line.length,.... to stop before EOL</SourceLine>
   <SourceLine>pos = selStart</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>ViewToCharPos(LineNum, SelStart)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//move to next word boundary</SourceLine>
   <SourceLine>ElseIf Keyboard.OptionKey then</SourceLine>
   <SourceLine>dim nextT as Integer = nextNonAlpha(selStart)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>changeSelection(nextT, CaretPos - nextT)</SourceLine>
   <SourceLine>pos = nextT</SourceLine>
   <SourceLine>ViewToCharPos(pos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//move one place</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>changeSelection(selStart + charsToMove, selLength - charsToMove)</SourceLine>
   <SourceLine>pos = selStart</SourceLine>
   <SourceLine>ViewToCharPos(pos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//expand</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if TargetWin32</SourceLine>
   <SourceLine>toEndOfLine = Keyboard.ControlKey</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>toEndOfLine = Keyboard.OSKey</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//to end of line</SourceLine>
   <SourceLine>if toEndOfLine then</SourceLine>
   <SourceLine>LineNum = lines.getLineNumberForOffset(selStart + selLength)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if selStart + selLength  &lt; lines.getLine(LineNum).offset + lines.getLine(LineNum).length then</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(LineNum)</SourceLine>
   <SourceLine>changeSelection(selStart, line.offset + line.length - selStart - line.delimiterLength)</SourceLine>
   <SourceLine>//oct 10 changed ..., line.offset + line.length - selStart - line.delimiterLength) to stop before EOL</SourceLine>
   <SourceLine>pos = selStart + selLength</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>ViewToCharPos(LineNum, SelStart + SelLength)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//next word</SourceLine>
   <SourceLine>ElseIf Keyboard.OptionKey then</SourceLine>
   <SourceLine>dim nextT as Integer = nextNonAlpha(selStart + SelLength)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>changeSelection(nextT, CaretPos - nextT)</SourceLine>
   <SourceLine>pos = nextT</SourceLine>
   <SourceLine>ViewToCharPos(pos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//single char</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>changeSelection(selStart, selLength + charsToMove)</SourceLine>
   <SourceLine>pos = selStart + selLength</SourceLine>
   <SourceLine>ViewToCharPos(pos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//no shift, but active selection, move to end of selection</SourceLine>
   <SourceLine>elseif selLength &gt; 0 then</SourceLine>
   <SourceLine>changeSelection(selStart + selLength, 0)</SourceLine>
   <SourceLine>pos = selStart</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if TargetWin32</SourceLine>
   <SourceLine>toEndOfLine = Keyboard.ControlKey</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>toEndOfLine = Keyboard.OSKey</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//EOL</SourceLine>
   <SourceLine>if toEndOfLine then</SourceLine>
   <SourceLine>LineNum = lines.getLineNumberForOffset(selStart)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>charsToMove = lines.getLine(LineNum).offset + lines.getLine(LineNum).length - selStart - lines.getLine(LineNum).delimiterLength</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//next word</SourceLine>
   <SourceLine>elseif Keyboard.OptionKey then</SourceLine>
   <SourceLine>charsToMove = nextNonAlpha(selStart) - selStart</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>//simple move</SourceLine>
   <SourceLine>dim char as String = TextStorage.getCharAt(CaretPos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//check if next char is a block char</SourceLine>
   <SourceLine>if IsBlockChar(char) then</SourceLine>
   <SourceLine>//and mark it for Highlight</SourceLine>
   <SourceLine>if BLOCK_CLOSE_CHARS.instr(char) &gt; 0 then</SourceLine>
   <SourceLine>HighlightOpeningBlock(char, caretpos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>HighlightClosingBlock(char, caretpos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>changeSelection(selStart + charsToMove, 0)</SourceLine>
   <SourceLine>pos = CaretPos</SourceLine>
   <SourceLine>ViewToCharPos(CaretLine, pos)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>updateDesiredColumn(CaretPos)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>moveCaretUp</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub moveCaretUp()</SourceLine>
   <SourceLine>//arrow up</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if not shift key and there's a selection, simply move to start of selection</SourceLine>
   <SourceLine>if not Keyboard.ShiftKey and selLength &gt; 0 then</SourceLine>
   <SourceLine>changeSelection(selStart, 0)</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim lineNum as Integer</SourceLine>
   <SourceLine>dim toStartOfDocument as Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//get starting line number</SourceLine>
   <SourceLine>if selStart &lt; CaretPos then</SourceLine>
   <SourceLine>lineNum = lines.getLineNumberForOffset(selStart)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>lineNum = lines.getLineNumberForOffset(selStart + selLength)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//default move to one place</SourceLine>
   <SourceLine>dim linesToMove as Integer = 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if option, then move up a full page</SourceLine>
   <SourceLine>if Keyboard.OptionKey then linesToMove = MaxVisibleLines - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if TargetWin32 then</SourceLine>
   <SourceLine>if Keyboard.ControlKey then</SourceLine>
   <SourceLine>linesToMove = ScrollPosition + MaxVisibleLines</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>if Keyboard.OSKey then</SourceLine>
   <SourceLine>linesToMove = ScrollPosition + MaxVisibleLines</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim line as TextLine</SourceLine>
   <SourceLine>dim offset as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>LineNum = LineNum - linesToMove</SourceLine>
   <SourceLine>if LineNum &lt; 0 then //moving up on the first line, jump to the begining of line</SourceLine>
   <SourceLine>LineNum = 0</SourceLine>
   <SourceLine>line = lines.getLine(lineNum)</SourceLine>
   <SourceLine>offset = 0</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>line = lines.getLine(LineNum)</SourceLine>
   <SourceLine>offset = offsetForXPos(line, caretDesiredColumn)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if Keyboard.ShiftKey then</SourceLine>
   <SourceLine>changeSelection(min(CaretPos, offset), abs(offset - CaretPos))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>changeSelection(offset, 0)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//scroll</SourceLine>
   <SourceLine>if lineNum &lt; ScrollPosition then changeScrollValues(ScrollPositionX, lineNum)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>nextAlpha</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function nextAlpha(fromOffset as integer) As integer</SourceLine>
   <SourceLine>//find the next alphanumeric char, starting at fromOffset</SourceLine>
   <SourceLine>for i as Integer = fromOffset + 1 to TextStorage.Length - 1</SourceLine>
   <SourceLine>dim char as String = TextStorage.getCharAt(i)</SourceLine>
   <SourceLine>if IsAlpha(char) then Return i</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>Return TextStorage.Length</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>fromOffset as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>NextBlockChar</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function NextBlockChar(forChar as string, offset as integer, byref charToFind as String) As integer</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find the next block char, for the given "forChar" char</SourceLine>
   <SourceLine>//dim charToFind as String</SourceLine>
   <SourceLine>charToFind = ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find the char that closes forChar</SourceLine>
   <SourceLine>for i as Integer = 1 to BLOCK_OPEN_CHARS.len</SourceLine>
   <SourceLine>if forChar = BLOCK_OPEN_CHARS.Mid(i, 1) then</SourceLine>
   <SourceLine>charToFind = BLOCK_CLOSE_CHARS.Mid(i, 1)</SourceLine>
   <SourceLine>exit for</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if charToFind = "" then Return -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//to handle nested blocks</SourceLine>
   <SourceLine>dim depth as integer</SourceLine>
   <SourceLine>dim char as String</SourceLine>
   <SourceLine>dim maxOffset as Integer = TextStorage.Length</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim textToSearch as String = TextStorage.getText(offset + 1, TextStorage.Length - (offset + 1))</SourceLine>
   <SourceLine>if textToSearch.Encoding &lt;&gt; nil and textToSearch.Encoding.Equals(Encodings.UTF16) then textToSearch = textToSearch.ConvertEncoding(Encodings.UTF8)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim scanner as new regex</SourceLine>
   <SourceLine>scanner.SearchPattern = "\"+forChar+"|\"+charToFind</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim match as RegExMatch = scanner.Search(textToSearch)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>While match &lt;&gt; nil</SourceLine>
   <SourceLine>'for i as Integer = offset + 1 to maxOffset</SourceLine>
   <SourceLine>char = match.SubExpressionString(0)'TextStorage.getCharAt(i)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if it's the char we're looking for, and not nested, then we found it</SourceLine>
   <SourceLine>if char = charToFind and depth = 0 then</SourceLine>
   <SourceLine>Return textToSearch.leftb(match.SubExpressionStartB(0)).len + offset + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//else, if it's the same char as input, then we're nesting.</SourceLine>
   <SourceLine>ElseIf char = forChar then</SourceLine>
   <SourceLine>depth = depth + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if nested, and we found a closing char, decrease nesting count.</SourceLine>
   <SourceLine>ElseIf char = charToFind then</SourceLine>
   <SourceLine>depth = depth - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>match = scanner.Search</SourceLine>
   <SourceLine>'next</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>Return -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>forChar as string, offset as integer, byref charToFind as String</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>nextCharInSet</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function nextCharInSet(fromOffset as integer, pattern as string = "[^\w\.]") As integer</SourceLine>
   <SourceLine>//find the next char not in the given set, starting at pos "fromOffset"</SourceLine>
   <SourceLine>for i as Integer = fromOffset + 1 to TextStorage.Length - 1</SourceLine>
   <SourceLine>dim char as String = TextStorage.getCharAt(i)</SourceLine>
   <SourceLine>if matchesRegex(pattern, char) then Return i</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>Return TextStorage.Length</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>fromOffset as integer, pattern as string = "[^\w\.]"</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>nextNonAlpha</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function nextNonAlpha(fromOffset as integer) As integer</SourceLine>
   <SourceLine>//find next non alphanumeric char, starting at fromOffset</SourceLine>
   <SourceLine>for i as Integer = fromOffset + 1 to TextStorage.Length - 1</SourceLine>
   <SourceLine>dim char as String = TextStorage.getCharAt(i)</SourceLine>
   <SourceLine>if not IsAlpha(char) then Return i</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>Return TextStorage.Length</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>fromOffset as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>nextNonWhitespace</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function nextNonWhitespace(fromOffset as integer, maxOffset as integer = - 1) As integer</SourceLine>
   <SourceLine>if maxOffset &lt; 0 then maxOffset = TextStorage.Length</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find next non whitespace char, starting at fromOffset</SourceLine>
   <SourceLine>for i as Integer = fromOffset + 1 to maxOffset - 1</SourceLine>
   <SourceLine>dim char as String = TextStorage.getCharAt(i)</SourceLine>
   <SourceLine>if not IsWhitespace(char) then Return i</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>Return maxOffset</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>fromOffset as integer, maxOffset as integer = - 1</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>offsetForXPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function offsetForXPos(line as TextLine, xPos as integer) As integer</SourceLine>
   <SourceLine>//finds the offset (column) for a given line and desired screen position (xpos)</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim offset as Integer = line.length</SourceLine>
   <SourceLine>dim lineWidth as Integer</SourceLine>
   <SourceLine>xPos = max(0, xPos) //negative numbers would be in the margin</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim startPos as Integer</SourceLine>
   <SourceLine>dim searchWord as TextSegment = line.LocalSegmentForXPos(xPos)</SourceLine>
   <SourceLine>if searchWord &lt;&gt; nil then startPos = searchWord.offset</SourceLine>
   <SourceLine>dim tmp as Picture = tmpPicture</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if searchWord isa TextPlaceholder then</SourceLine>
   <SourceLine>lineWidth = line.TextWidth(TextStorage, tmp.Graphics, DisplayInvisibleCharacters, startPos) //width up to placeholder</SourceLine>
   <SourceLine>dim placeholderWidth as Double = searchWord.width</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if Dragging then</SourceLine>
   <SourceLine>if xPos &gt;= lineWidth + placeholderWidth / 2 then</SourceLine>
   <SourceLine>offset = searchWord.offset + searchWord.length</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>offset = searchWord.offset</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>offset = searchWord.offset + searchWord.length / 2 //put the offset in the middle of the thing</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as Integer = startPos to line.length</SourceLine>
   <SourceLine>//scan the chars in the line until we find the right column.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>lineWidth = line.TextWidth(TextStorage, tmp.Graphics, DisplayInvisibleCharacters, i)</SourceLine>
   <SourceLine>if lineWidth &gt;= xPos then</SourceLine>
   <SourceLine>dim matchChar as String = line.CharToDisplayAt(TextStorage, max(i - 1, 0), DisplayInvisibleCharacters)</SourceLine>
   <SourceLine>if searchWord &lt;&gt; nil then</SourceLine>
   <SourceLine>tmp.Graphics.Bold = searchWord.bold</SourceLine>
   <SourceLine>tmp.Graphics.Italic = searchWord.italic</SourceLine>
   <SourceLine>tmp.Graphics.Underline = searchWord.underline</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>dim charw as Integer = tmp.Graphics.StringWidth(matchChar)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if lineWidth - charw / 2 &gt; xPos then</SourceLine>
   <SourceLine>offset = max(i - 1, 0)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>offset = i</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>exit for</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//avoid delimiters</SourceLine>
   <SourceLine>offset = line.offset + min(offset, line.length - line.delimiterLength)</SourceLine>
   <SourceLine>Return offset</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>line as TextLine, xPos as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>OpeningBlockLineForLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function OpeningBlockLineForLine(lineIndex as integer) As integer</SourceLine>
   <SourceLine>// RDS - Did not work if cursor was ON the start line</SourceLine>
   <SourceLine>dim temp_value as integer</SourceLine>
   <SourceLine>temp_value = lines.previousBlockStartLine(LineIndex, true)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if temp_value &lt;= 0 then</SourceLine>
   <SourceLine>if lines.getline(LineIndex).isBlockStart then temp_value = LineIndex</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>return temp_value</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineIndex as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>PageDown</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub PageDown()</SourceLine>
   <SourceLine>ScrollPosition = min(lines.Count, ScrollPosition + MaxVisibleLines)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>PageUp</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub PageUp()</SourceLine>
   <SourceLine>ScrollPosition = max(ScrollPosition - MaxVisibleLines, 0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>PaintCaret</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub PaintCaret(atPos as integer, g as graphics)</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not hasFocus and DragSource = nil then Return</SourceLine>
   <SourceLine>if selLength &gt; 0  and DragTextSelection = nil then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>caretState = not caretState</SourceLine>
   <SourceLine>if caretState then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim xpos, ypos as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if atPos = CaretPos then</SourceLine>
   <SourceLine>XYAtCharPos(atPos, CaretLine, xpos, ypos)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>XYAtCharPos(atPos, xpos, ypos)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if ypos &lt; 0 or xpos &lt; 0 then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.ForeColor = CaretColor</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if ThickInsertionPoint then</SourceLine>
   <SourceLine>g.PenWidth = 2</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>g.DrawLine xpos - 1, ypos - 1 , xpos - 1, ypos - TextHeight + 1</SourceLine>
   <SourceLine>g.PenWidth = 1</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>atPos as integer, g as graphics</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>PaintHighlightedBlock</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub PaintHighlightedBlock(g as graphics)</SourceLine>
   <SourceLine>if not HighlightMatchingBrackets then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//paints a blue circle over the highlighted block char.</SourceLine>
   <SourceLine>g.PenWidth = 2</SourceLine>
   <SourceLine>g.PenHeight = 2</SourceLine>
   <SourceLine>g.ForeColor = &amp;c4444FF</SourceLine>
   <SourceLine>g.DrawOval blockBeginPosX - 2 - g.StringWidth("(")/2, blockBeginPosY - g.TextHeight - 1, g.TextHeight + 4, g.TextHeight + 4</SourceLine>
   <SourceLine>g.PenWidth = 1</SourceLine>
   <SourceLine>g.PenHeight = 1</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>g as graphics</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Paste</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Paste()</SourceLine>
   <SourceLine>dim c as new Clipboard</SourceLine>
   <SourceLine>if not c.TextAvailable then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>me.SelText = c.Text</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>previousAlpha</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function previousAlpha(fromOffset as integer) As integer</SourceLine>
   <SourceLine>//find Previous alphanumeric char starting at "fromOffset"</SourceLine>
   <SourceLine>for i as Integer = fromOffset - 1 downto 1</SourceLine>
   <SourceLine>dim char as String = TextStorage.getCharAt(i - 1)</SourceLine>
   <SourceLine>if IsAlpha(char) then Return i</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>fromOffset as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>PreviousBlockChar</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function PreviousBlockChar(forChar as string, offset as integer, byref charToFind as String) As integer</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find previous block char</SourceLine>
   <SourceLine>//dim charToFind as String</SourceLine>
   <SourceLine>charToFind = ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//select the appropriate one</SourceLine>
   <SourceLine>for i as Integer = 1 to BLOCK_CLOSE_CHARS.len</SourceLine>
   <SourceLine>if forChar = BLOCK_CLOSE_CHARS.Mid(i, 1) then</SourceLine>
   <SourceLine>charToFind = BLOCK_OPEN_CHARS.Mid(i, 1)</SourceLine>
   <SourceLine>exit for</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if charToFind = "" then Return - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim depth as integer</SourceLine>
   <SourceLine>dim char as String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim textToSearch as String = TextStorage.getText(0, offset)</SourceLine>
   <SourceLine>if textToSearch.Encoding &lt;&gt; nil and textToSearch.Encoding.Equals(Encodings.UTF16) then textToSearch = textToSearch.ConvertEncoding(encodings.UTF8)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>textToSearch = Reverse(textToSearch)</SourceLine>
   <SourceLine>dim scanner as new regex</SourceLine>
   <SourceLine>scanner.SearchPattern = "\"+forChar+"|\"+charToFind</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim match as RegExMatch = scanner.Search(textToSearch)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//scan text</SourceLine>
   <SourceLine>'for i as Integer = offset - 1 downto 0</SourceLine>
   <SourceLine>while match &lt;&gt; nil</SourceLine>
   <SourceLine>char = match.SubExpressionString(0) 'TextStorage.getCharAt(i)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//found</SourceLine>
   <SourceLine>if char = charToFind and depth = 0 then</SourceLine>
   <SourceLine>Return offset - 1 - textToSearch.leftb(match.SubExpressionStartB(0)).len</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//nest</SourceLine>
   <SourceLine>ElseIf char = forChar then</SourceLine>
   <SourceLine>depth = depth + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//un-nest</SourceLine>
   <SourceLine>ElseIf char = charToFind then</SourceLine>
   <SourceLine>depth = depth - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>'next</SourceLine>
   <SourceLine>match = scanner.Search</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine>Return -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>forChar as string, offset as integer, byref charToFind as String</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>previousCharInSet</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function previousCharInSet(fromOffset as integer, pattern as string = "[^\w\.]") As integer</SourceLine>
   <SourceLine>//find character not in the given set</SourceLine>
   <SourceLine>for i as Integer = fromOffset - 1 downto 1</SourceLine>
   <SourceLine>dim char as String = TextStorage.getCharAt(i - 1)</SourceLine>
   <SourceLine>if matchesRegex(pattern, char) then Return i</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>fromOffset as integer, pattern as string = "[^\w\.]"</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>previousNonAlpha</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function previousNonAlpha(fromOffset as integer) As integer</SourceLine>
   <SourceLine>//find Previous non alphanumeric char starting at "fromOffset"</SourceLine>
   <SourceLine>for i as Integer = fromOffset - 1 downto 1</SourceLine>
   <SourceLine>dim char as String = TextStorage.getCharAt(i - 1)</SourceLine>
   <SourceLine>if not IsAlpha(char) then Return i</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>fromOffset as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>previousNonWhitespace</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function previousNonWhitespace(fromOffset as integer) As integer</SourceLine>
   <SourceLine>//find Previous non whitespace char starting at "fromOffset"</SourceLine>
   <SourceLine>for i as Integer = fromOffset - 1 downto 1</SourceLine>
   <SourceLine>dim char as String = TextStorage.getCharAt(i - 1)</SourceLine>
   <SourceLine>if not IsWhitespace(char) then Return i</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>fromOffset as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>receiveMessage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub receiveMessage(theMessage as Message)</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Part of the MessageReceiver interface.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim type as Integer = theMessage.Info(1) //1 is the msg type in this particular scheme</SourceLine>
   <SourceLine>if theMessage.Sender = lines then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>select case type</SourceLine>
   <SourceLine>case LineManager.LineCountChangedMsg</SourceLine>
   <SourceLine>dim count as Integer = theMessage.Info(2) //2 holds the # of lines</SourceLine>
   <SourceLine>dim invisible as Integer = theMessage.Info(3) //3 holds the # of invisible lines</SourceLine>
   <SourceLine>self.LineCountChanged(count - invisible)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case LineManager.LineChangedMsg</SourceLine>
   <SourceLine>dim index as integer = theMessage.Info(2)</SourceLine>
   <SourceLine>dim length as Integer = theMessage.Info(3)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if index = CaretLine and highlighter.State = thread.Running then</SourceLine>
   <SourceLine>highlighter.HighlightLine(index)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if SyntaxDefinition = nil and loadingDocument then Return</SourceLine>
   <SourceLine>call modifiedLines.AddRange(new ModifiedLineRange(index, length))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case LineManager.MaxLineLengthChangedMsg</SourceLine>
   <SourceLine>dim index as integer = theMessage.Info(2)</SourceLine>
   <SourceLine>self.MaxLineLengthChanged(index)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case LineManager.LineSymbolsRemovedMsg</SourceLine>
   <SourceLine>LineSymbolsRemoved(theMessage.Info(2))</SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseIf theMessage.Sender = currentSuggestionWindow then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>select case Type</SourceLine>
   <SourceLine>case SuggestionWindow.AutocompleteCancelledMsg</SourceLine>
   <SourceLine>dim requestFocus as Boolean = theMessage.Info(2)</SourceLine>
   <SourceLine>AutocompleteCancelled(requestFocus)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case SuggestionWindow.KeyDownMsg</SourceLine>
   <SourceLine>dim key as String = theMessage.Info(2)</SourceLine>
   <SourceLine>call HandleKeyDown(key)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case SuggestionWindow.CurrentAutocompleteOptionsMsg</SourceLine>
   <SourceLine>theMessage.addInfo(3, CurrentAutocompleteOptions)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case SuggestionWindow.OptionSelectedMsg</SourceLine>
   <SourceLine>dim option as String = theMessage.Info(2)</SourceLine>
   <SourceLine>AutocompleteOptionSelected(option)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Elseif theMessage.Sender = highlighter then</SourceLine>
   <SourceLine>select case type</SourceLine>
   <SourceLine>case LineHighlighter.HighlightDoneMsg</SourceLine>
   <SourceLine>HighlightingComplete</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case LineHighlighter.LineHighlightedMsg</SourceLine>
   <SourceLine>LineHighlighted(theMessage.Info(2))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case LineHighlighter.ScreenLinesHighlightedMsg</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>theMessage as Message</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Redo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Redo()</SourceLine>
   <SourceLine>ignoreRepaint = true</SourceLine>
   <SourceLine>UndoMgr.Redo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//RaiseEvents</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(CaretLine)</SourceLine>
   <SourceLine>if line &lt;&gt; nil then _</SourceLine>
   <SourceLine>SelChanged(CaretLine + 1, SelStart - line.offset, SelLength)</SourceLine>
   <SourceLine>HandleTextChanged</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not UndoMgr.isDirty then ClearDirtyLines</SourceLine>
   <SourceLine>ignoreRepaint = False</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Redraw</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Redraw(ifBlinkerVisible as boolean = false)</SourceLine>
   <SourceLine>if ignoreRepaint then Return</SourceLine>
   <SourceLine>if Graphics = nil then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//avoid more than 30 redraws/sec</SourceLine>
   <SourceLine>'if ticks &lt; lastRedrawTicks + 1 then</SourceLine>
   <SourceLine>'Return</SourceLine>
   <SourceLine>'end if</SourceLine>
   <SourceLine>'lastRedrawTicks = ticks</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//see if caret is visible</SourceLine>
   <SourceLine>dim ScrollPosition as Integer = self.ScrollPosition</SourceLine>
   <SourceLine>if EnableLineFoldings then ScrollPosition = lines.getNumberOfLinesNeededToView(ScrollPosition)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if ifBlinkerVisible and (CaretLine &lt; ScrollPosition or CaretLine &gt; ScrollPosition + linesOnScreen) then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// We force the user to call Redraw instead of Refresh because</SourceLine>
   <SourceLine>// we don't want the user to be able to accidentally cause an</SourceLine>
   <SourceLine>// entire screen erase.  So we override Refresh by making it</SourceLine>
   <SourceLine>// a private function.</SourceLine>
   <SourceLine>#if TargetWin32</SourceLine>
   <SourceLine>Declare Sub InvalidateRect Lib "User32" ( hwnd as Integer, lpRect as Ptr, erase as Boolean )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim r as new MemoryBlock( 16 )</SourceLine>
   <SourceLine>r.Long( 0 ) = 0</SourceLine>
   <SourceLine>r.Long( 4 ) = 0</SourceLine>
   <SourceLine>r.Long( 8 ) = me.Width</SourceLine>
   <SourceLine>r.Long( 12 ) = me.Height</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>InvalidateRect( me.Handle, r, false )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Declare Sub UpdateWindow Lib "User32" ( hwnd as Integer )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>UpdateWindow( me.Window.Handle )</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>DrawContents(Graphics)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>ifBlinkerVisible as boolean = false</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ReHighlight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ReHighlight()</SourceLine>
   <SourceLine>//mark all lines as changed and rehighlight</SourceLine>
   <SourceLine>lines.MarkAllLinesAsChanged</SourceLine>
   <SourceLine>Highlight</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ReindentLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ReindentLine(lineIndex as Integer) As Integer</SourceLine>
   <SourceLine>dim previousLine, currentLine as TextLine</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>currentLine = lines.getLine(lineIndex)</SourceLine>
   <SourceLine>previousLine = lines.getLine(lineIndex - 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if previousLine = nil then Return 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find all first non-whitespace char in previous line</SourceLine>
   <SourceLine>dim firstCharPos as Integer = nextNonWhitespace(previousLine.offset - 1, previousLine.offset + previousLine.length - previousLine.delimiterLength)</SourceLine>
   <SourceLine>dim indentChars as String = TextStorage.getText(previousLine.offset, firstCharPos - previousLine.offset)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//remove any indentations...</SourceLine>
   <SourceLine>firstCharPos = nextNonWhitespace(currentLine.offset - 1, currentLine.offset + currentLine.length - currentLine.delimiterLength)</SourceLine>
   <SourceLine>Replace(currentLine.offset, firstCharPos - currentLine.offset, "")</SourceLine>
   <SourceLine>currentLine = lines.getLine(lineIndex)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//check extra indentations</SourceLine>
   <SourceLine>if SyntaxDefinition &lt;&gt; nil then</SourceLine>
   <SourceLine>//check current line first.</SourceLine>
   <SourceLine>dim count as Integer = SyntaxDefinition.isBlockStart(TextStorage.getText(previousLine.offset, previousLine.length))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if Count &gt; 0 then //extra indent</SourceLine>
   <SourceLine>indentChars = indentChars + indentStr(Count)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Elseif Count &lt; 0 then //remove indent</SourceLine>
   <SourceLine>indentChars = indentChars.left(indentChars.len + Count)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if indentChars.len = 0 then Return 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Replace(currentLine.offset, currentLine.length, indentChars + TextStorage.getText(currentLine.offset, currentLine.length))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return indentChars.len</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineIndex as Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>ReindentText</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ReindentText()</SourceLine>
   <SourceLine>self.ReindentText(0, lines.Count - 1)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ReindentText</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ReindentText(fromLine as Integer, toLine as integer)</SourceLine>
   <SourceLine>dim current as TextLine</SourceLine>
   <SourceLine>dim caretPos as Integer = self.CaretPos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>self.IgnoreRepaint = true</SourceLine>
   <SourceLine>for i as Integer = fromLine to toLine</SourceLine>
   <SourceLine>Current = lines.getLine(i)</SourceLine>
   <SourceLine>if current = nil then Continue for</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>call ReindentLine(i)</SourceLine>
   <SourceLine>call IndentBlockEndLine(i, False)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>self.CaretPos = CaretPos</SourceLine>
   <SourceLine>self.IgnoreRepaint = False</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>fromLine as Integer, toLine as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Remove</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Remove(offset as integer, length as integer, updateCaret as boolean = true)</SourceLine>
   <SourceLine>if ReadOnly then</SourceLine>
   <SourceLine>break</SourceLine>
   <SourceLine>beep</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if length = 0 then Return //nothing to delete</SourceLine>
   <SourceLine>//remove text</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim undoText as String = TextStorage.getText(max(offset,0), length)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if TextStorage.remove(offset, length) then</SourceLine>
   <SourceLine>TextRemoved(offset, undoText)</SourceLine>
   <SourceLine>UndoMgr.Push(new UndoableDelete(self, offset, undoText, CaretPos, CurrentEventID))</SourceLine>
   <SourceLine>lines.remove(offset, length)</SourceLine>
   <SourceLine>Highlight</SourceLine>
   <SourceLine>if updateCaret then changeSelection(selStart - length, 0)</SourceLine>
   <SourceLine>HandleTextChanged</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer, length as integer, updateCaret as boolean = true</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Replace</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Replace(offset as integer, length as integer, text as string, eventID as integer = - 1)</SourceLine>
   <SourceLine>if ReadOnly then</SourceLine>
   <SourceLine>break</SourceLine>
   <SourceLine>beep</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//get the default line ending from the line manager, if the text is an enter.</SourceLine>
   <SourceLine>if text = chr(13) or text = chr(3) then text = lines.lineEnding</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if eventID &lt; 0 then eventID = CurrentEventID</SourceLine>
   <SourceLine>UndoMgr.Push(new UndoableReplace(self, offset, TextStorage.getText(offset, length), text, CaretPos, eventID))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//modify buffer and rescan lines</SourceLine>
   <SourceLine>TextStorage.replace(offset, length, Text)</SourceLine>
   <SourceLine>lines.replace(offset, length, text)</SourceLine>
   <SourceLine>Highlight</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>changeSelection(offset + text.Len, 0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not UndoMgr.isUndoing then</SourceLine>
   <SourceLine>//fire textchanged event</SourceLine>
   <SourceLine>HandleTextChanged</SourceLine>
   <SourceLine>TextInserted(offset, text)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//is the text a closing element? ] } ) ?</SourceLine>
   <SourceLine>if text.len &gt; 1 or not IsBlockChar(text) or not HighlightMatchingBrackets then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if so, highlight it</SourceLine>
   <SourceLine>if BLOCK_CLOSE_CHARS.InStr(text) &gt; 0 then</SourceLine>
   <SourceLine>HighlightOpeningBlock(text, offset)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>HighlightClosingBlock(text, offset)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer, length as integer, text as string, eventID as integer = - 1</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ResetUndo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ResetUndo()</SourceLine>
   <SourceLine>UndoMgr.Reset</SourceLine>
   <SourceLine>ClearDirtyLines</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ResetUndoDirtyFlag</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ResetUndoDirtyFlag()</SourceLine>
   <SourceLine>UndoMgr.ResetDirtyFlag</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Reverse</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Reverse(s As String) As String</SourceLine>
   <SourceLine>//From Joe Strout's String Utils module.</SourceLine>
   <SourceLine>// Return s with the characters in reverse order.</SourceLine>
   <SourceLine>if Len(s) &lt; 2 then return s</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim characters() as String = Split( s, "" )</SourceLine>
   <SourceLine>Dim leftIndex as Integer = 0</SourceLine>
   <SourceLine>Dim rightIndex as Integer = UBound(characters)</SourceLine>
   <SourceLine>While leftIndex &lt; rightIndex</SourceLine>
   <SourceLine>Dim temp as String = characters(leftIndex)</SourceLine>
   <SourceLine>characters(leftIndex) = characters(rightIndex)</SourceLine>
   <SourceLine>characters(rightIndex) = temp</SourceLine>
   <SourceLine>leftIndex = leftIndex + 1</SourceLine>
   <SourceLine>rightIndex = rightIndex - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>Return Join( characters, "" )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>s As String</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>Save</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Save(toFile as folderItem, fileType as string = "Text", encoding as textencoding = nil) As boolean</SourceLine>
   <SourceLine>if toFile = nil then Return False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim stream as BinaryStream</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//Modified by Dr. Gerard Hammond to allow the file to be saved even if it's already open by another app.</SourceLine>
   <SourceLine>if toFile.Exists = false then</SourceLine>
   <SourceLine>stream = toFile.CreateBinaryFile(FileType)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>stream = toFile.OpenAsBinaryFile(true) //open Writeable</SourceLine>
   <SourceLine>stream.Length = 0 ////truncate the file</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if stream = nil then Return False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim txt as String = me.Text</SourceLine>
   <SourceLine>if Encoding &lt;&gt; nil and not Encoding.Equals(txt.Encoding) then txt = txt.ConvertEncoding(Encoding)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>stream.Write(txt)</SourceLine>
   <SourceLine>stream.Close</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>UndoMgr.ResetDirtyFlag</SourceLine>
   <SourceLine>ClearDirtyLines</SourceLine>
   <SourceLine>Return true</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>toFile as folderItem, fileType as string = "Text", encoding as textencoding = nil</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Save</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Save(toFile as folderItem, encoding as textencoding) As boolean</SourceLine>
   <SourceLine>Return save(toFile, "Text", encoding)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>toFile as folderItem, encoding as textencoding</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>ScrollEnd</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ScrollEnd()</SourceLine>
   <SourceLine>ScrollPosition = lines.Count</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ScrollHome</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ScrollHome()</SourceLine>
   <SourceLine>ScrollPosition = 0</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SelectAll</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SelectAll()</SourceLine>
   <SourceLine>changeSelection(0, TextStorage.Length)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SelectedTextDragImage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function SelectedTextDragImage() As picture</SourceLine>
   <SourceLine>dim text as String = SelText</SourceLine>
   <SourceLine>dim selection as String = text.Left(200) + " "</SourceLine>
   <SourceLine>if text.Len &gt; 200 then selection = selection + "..."</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim w, h as Integer</SourceLine>
   <SourceLine>dim tmp as Picture = tmpPicture</SourceLine>
   <SourceLine>w = min(tmp.Graphics.StringWidth(selection+" "), Width)</SourceLine>
   <SourceLine>h = tmp.Graphics.StringHeight(selection, w)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim image as Picture = NewPicture(w, h, 32)</SourceLine>
   <SourceLine>image.Graphics.TextSize = TextSize</SourceLine>
   <SourceLine>image.Graphics.TextFont = TextFont</SourceLine>
   <SourceLine>Image.Graphics.DrawString selection, 0, Image.Graphics.TextHeight - (Image.Graphics.TextHeight - Image.Graphics.TextAscent), w</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return image</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>picture</ItemResult>
 </Method>
 <Method>
  <ItemName>SelectLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SelectLine(lineNumber as integer, refresh as boolean = true)</SourceLine>
   <SourceLine>//selects the given line.</SourceLine>
   <SourceLine>if lineNumber &lt; 0 or lineNumber &gt;= lines.Count then</SourceLine>
   <SourceLine>break</SourceLine>
   <SourceLine>beep</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(lineNumber)</SourceLine>
   <SourceLine>if not line.visible then lines.revealLine(lineNumber)</SourceLine>
   <SourceLine>changeSelection(line.offset, line.length - line.delimiterLength)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if refresh then Redraw</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineNumber as integer, refresh as boolean = true</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SelectNextPlaceholder</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SelectNextPlaceholder()</SourceLine>
   <SourceLine>dim startLine as Integer = CaretLine</SourceLine>
   <SourceLine>dim offset as Integer = CaretPos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as Integer = CaretLine to lines.Count - 1</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(i)</SourceLine>
   <SourceLine>if line = nil or not line.visible then Continue for</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim nextPlaceholder as TextPlaceholder = line.NextPlaceholderFromOffset(offset)</SourceLine>
   <SourceLine>if nextPlaceholder = nil then</SourceLine>
   <SourceLine>offset = line.offset + line.length</SourceLine>
   <SourceLine>Continue for</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>changeSelection(line.offset + nextPlaceholder.offset + nextPlaceholder.length / 2, 0)</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//wrap around... todo make this prettier :P</SourceLine>
   <SourceLine>for i as Integer = 0 to startLine</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(i)</SourceLine>
   <SourceLine>if line = nil or not line.visible then Continue for</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim nextPlaceholder as TextPlaceholder = line.NextPlaceholderFromOffset(offset)</SourceLine>
   <SourceLine>if nextPlaceholder = nil then</SourceLine>
   <SourceLine>offset = line.offset + line.length</SourceLine>
   <SourceLine>Continue for</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>changeSelection(line.offset + nextPlaceholder.offset + nextPlaceholder.length / 2, 0)</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetScrollbars</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetScrollbars(horizontal as scrollbar, vertical as scrollbar)</SourceLine>
   <SourceLine>//sets the scrollbars</SourceLine>
   <SourceLine>horizontalSB = horizontal</SourceLine>
   <SourceLine>verticalSB = vertical</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>horizontal as scrollbar, vertical as scrollbar</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SymbolAtLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function SymbolAtLine(index as integer) As documentSymbol</SourceLine>
   <SourceLine>//check line first</SourceLine>
   <SourceLine>dim symbol as DocumentSymbol</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(index)</SourceLine>
   <SourceLine>if line &lt;&gt; nil and line.LineSymbols &lt;&gt; nil and line.LineSymbols.Count &gt; 0 then</SourceLine>
   <SourceLine>Symbol = line.LineSymbols.value(line.LineSymbols.Key(0))</SourceLine>
   <SourceLine>Return new DocumentSymbol(Symbol.Name, symbol.Offset + line.offset, Symbol.Type)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//else, if it's an opening block, check line above...</SourceLine>
   <SourceLine>elseif line &lt;&gt; nil and line.isBlockStart then</SourceLine>
   <SourceLine>line = lines.getLine(index - 1)</SourceLine>
   <SourceLine>if line &lt;&gt; nil and line.LineSymbols &lt;&gt; nil and line.LineSymbols.Count &gt; 0 then</SourceLine>
   <SourceLine>Symbol = line.LineSymbols.value(line.LineSymbols.Key(0))</SourceLine>
   <SourceLine>Return new DocumentSymbol(Symbol.Name, symbol.Offset + line.offset, Symbol.Type)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//else... start looking upwards</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find opening block for this line</SourceLine>
   <SourceLine>dim blockIdx as Integer = OpeningBlockLineForLine(index)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//no opening block found...</SourceLine>
   <SourceLine>if blockIdx &lt; 0 then Return nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//get line</SourceLine>
   <SourceLine>line = lines.getLine(blockIdx)</SourceLine>
   <SourceLine>if line = nil then Return nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if line doesn't contain any symbols... move one line up...</SourceLine>
   <SourceLine>if line.LineSymbols = nil or line.LineSymbols.Count = 0 then</SourceLine>
   <SourceLine>line = lines.getLine(blockIdx - 1)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>Symbol = line.LineSymbols.value(line.LineSymbols.Key(0))</SourceLine>
   <SourceLine>Return new DocumentSymbol(Symbol.Name, symbol.Offset + line.offset, Symbol.Type)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//recurse, search next enclosing block</SourceLine>
   <SourceLine>if line = nil or line.LineSymbols = nil or line.LineSymbols.Count = 0 then Return SymbolAtLine(blockIdx - 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Symbol = line.LineSymbols.value(line.LineSymbols.Key(0))</SourceLine>
   <SourceLine>Return new DocumentSymbol(Symbol.Name, symbol.Offset + line.offset, Symbol.Type)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer</ItemParams>
  <ItemResult>documentSymbol</ItemResult>
 </Method>
 <Method>
  <ItemName>SymbolCount</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function SymbolCount() As integer</SourceLine>
   <SourceLine>if CurrentDocumentSymbols = nil then Return 0</SourceLine>
   <SourceLine>Return CurrentDocumentSymbols.Count</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>tmpPicture</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function tmpPicture() As picture</SourceLine>
   <SourceLine>//return a temporary picture.</SourceLine>
   <SourceLine>if sharedTmpPicture = nil then</SourceLine>
   <SourceLine>sharedTmpPicture = NewPicture(2,2,16)</SourceLine>
   <SourceLine>#if EditFieldGlobals.UseOldRenderer</SourceLine>
   <SourceLine>sharedTmpPicture.Graphics.UseOldRenderer = true</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>sharedTmpPicture.Graphics.TextFont = TextFont</SourceLine>
   <SourceLine>sharedTmpPicture.Graphics.TextSize = TextSize</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//v1.1 fix, these weren't being cleared.</SourceLine>
   <SourceLine>sharedTmpPicture.Graphics.Bold = False</SourceLine>
   <SourceLine>sharedTmpPicture.Graphics.Italic = False</SourceLine>
   <SourceLine>sharedTmpPicture.Graphics.Underline = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return sharedTmpPicture</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>picture</ItemResult>
 </Method>
 <Method>
  <ItemName>ToggleLineFold</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ToggleLineFold(lineIndex as integer)</SourceLine>
   <SourceLine>if not EnableLineFoldings then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim topLine as Integer = lines.toggleLineFolding(lineIndex)</SourceLine>
   <SourceLine>if topLine &gt; -1 then</SourceLine>
   <SourceLine>//check if caret is in an invisible line</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(lines.getLineNumberForOffset(CaretPos))</SourceLine>
   <SourceLine>//if it's invisible, move caret to folded line</SourceLine>
   <SourceLine>if not line.visible then</SourceLine>
   <SourceLine>line = lines.getLine(topLine)</SourceLine>
   <SourceLine>if line &lt;&gt; nil then changeSelection(line.offset, 0)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>InvalidateLine(lineIndex)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineIndex as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Undo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Undo()</SourceLine>
   <SourceLine>ignoreRepaint = true</SourceLine>
   <SourceLine>UndoMgr.Undo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//RaiseEvents</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(CaretLine)</SourceLine>
   <SourceLine>if line &lt;&gt; nil then _</SourceLine>
   <SourceLine>SelChanged(CaretLine + 1, SelStart - line.offset, SelLength)</SourceLine>
   <SourceLine>HandleTextChanged</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not UndoMgr.isDirty then ClearDirtyLines</SourceLine>
   <SourceLine>ignoreRepaint = False</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>UnfoldAllLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub UnfoldAllLines()</SourceLine>
   <SourceLine>//hmmm</SourceLine>
   <SourceLine>if not EnableLineFoldings then Return</SourceLine>
   <SourceLine>lines.unfoldAll</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>updateDesiredColumn</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub updateDesiredColumn(charPos as integer = - 1)</SourceLine>
   <SourceLine>//saves the screenposition of the given offset</SourceLine>
   <SourceLine>if lines.Count = 0 then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if CharPos &lt; 0 then charPos = CaretPos</SourceLine>
   <SourceLine>desiredColumnCharPos = CharPos</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>charPos as integer = - 1</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ViewToCharPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ViewToCharPos(charPos as integer)</SourceLine>
   <SourceLine>ViewToCharPos(lines.getLineNumberForOffset(CharPos), CharPos)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>charPos as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ViewToCharPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ViewToCharPos(charLine as integer, charPos as integer)</SourceLine>
   <SourceLine>//move the view to the given char position.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim horizontal, vertical as Integer</SourceLine>
   <SourceLine>dim ScrollPosition as Integer = self.ScrollPosition</SourceLine>
   <SourceLine>if EnableLineFoldings then ScrollPosition = lines.getNumberOfLinesNeededToView(ScrollPosition)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>horizontal = ScrollPositionX</SourceLine>
   <SourceLine>vertical = self.ScrollPosition</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//vertical check</SourceLine>
   <SourceLine>if charLine &lt; ScrollPosition then</SourceLine>
   <SourceLine>vertical = charLine</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif charLine &gt; ScrollPosition + linesOnScreen - 2 then</SourceLine>
   <SourceLine>vertical = charLine - linesOnScreen + 2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//horizontal check</SourceLine>
   <SourceLine>dim x, y as Integer</SourceLine>
   <SourceLine>XYAtCharPos(charPos, charLine, x, y)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if x&lt; LineNumOffset or  x &gt;= self.Width then</SourceLine>
   <SourceLine>horizontal = ScrollPositionX + x - (me.Width - RightScrollMargin)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>changeScrollValues(horizontal, vertical)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>charLine as integer, charPos as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>XposForOffset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function XposForOffset(line as TextLine, charPos as integer) As single</SourceLine>
   <SourceLine>//screen position for the given CharPos</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim tmp as Picture = tmpPicture</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'dim linetext as String = line.TextToDisplay(TextStorage, DisplayInvisibleCharacters, charPos - line.offset)</SourceLine>
   <SourceLine>'return tmp.Graphics.StringWidth(linetext)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return line.TextWidth(TextStorage, tmp.Graphics, DisplayInvisibleCharacters, CharPos - line.offset)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>line as TextLine, charPos as integer</ItemParams>
  <ItemResult>single</ItemResult>
 </Method>
 <Method>
  <ItemName>XYAtCharPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub XYAtCharPos(charPos as integer, byref X as integer, byref Y as integer)</SourceLine>
   <SourceLine>dim lineNumber as Integer</SourceLine>
   <SourceLine>lineNumber = lines.getLineNumberForOffset(charPos)</SourceLine>
   <SourceLine>XYAtCharPos(CharPos, LineNumber, x, y)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>charPos as integer, byref X as integer, byref Y as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>XYAtCharPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub XYAtCharPos(charPos as integer, lineNumber as integer, byref X as integer, byref Y as integer)</SourceLine>
   <SourceLine>//find the screenx and screeny for the given CharPos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//y</SourceLine>
   <SourceLine>dim ypos as Integer</SourceLine>
   <SourceLine>if EnableLineFoldings then</SourceLine>
   <SourceLine>ypos = (lines.getNumberOfVisibleLinesUpToLine(lineNumber) - ScrollPosition) * TextHeight</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>ypos = (lineNumber - ScrollPosition) * TextHeight</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find the char offset.</SourceLine>
   <SourceLine>dim line as TextLine = lines.getLine(lineNumber)</SourceLine>
   <SourceLine>if line = nil then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim sx as Integer = leftMarginOffset + LineNumOffset - ScrollPositionX</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim xpos as integer = sx + XposForOffset(line, charPos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>x = xpos</SourceLine>
   <SourceLine>y = ypos + TextHeight</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>charPos as integer, lineNumber as integer, byref X as integer, byref Y as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Hook>
  <ItemName>AutocompleteOptionsForPrefix</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>prefix as string</ItemParams>
  <ItemResult>AutocompleteOptions</ItemResult>
 </Hook>
 <Hook>
  <ItemName>BlockCharsMatched</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>blockOpenChar as string, blockOpenOffset as Integer, blockCloseChar as string, blockCloseOffset as Integer</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>Close</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>ConstructContextualMenu</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>base as menuitem, x as integer, y as integer</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Hook>
 <Hook>
  <ItemName>EnableMenuItems</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>GotFocus</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>GutterClicked</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>onLine as integer, x as integer, y as integer</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>HighlightingComplete</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>HorizontalScrollValueChanged</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>KeyDown</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>key as string</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Hook>
 <Hook>
  <ItemName>LineCountChanged</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>newLineCount as integer</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>LostFocus</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>MaxLineLengthChanged</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>maxLineLengthInPixels as single</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>MouseDown</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>X as integer, Y as integer</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Hook>
 <Hook>
  <ItemName>MouseMove</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>X as integer, Y as integer</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>MouseUp</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>x as integer, y as integer</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>Open</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>PaintAboveLine</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>lineIndex as integer, g as graphics, x as integer, y as integer, w as integer, h as integer</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>PaintBelowLine</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>lineIndex as integer, g as graphics, x as integer, y as integer, w as integer, h as integer</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>PaintOver</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>g as Graphics</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>PlaceholderSelected</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>placeholderLabel as String, lineIndex as integer, line as textLine, placeholder as textPlaceholder, doubleClick as Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>ScrollValuesChanged</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>SelChanged</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>line as integer, column as integer, length as integer</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>ShouldDisplaySuggestionWindowAtPos</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>byref X as Integer, byref Y as Integer</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Hook>
 <Hook>
  <ItemName>ShouldTriggerAutocomplete</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>Key as string, hasAutocompleteOptions as boolean</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Hook>
 <Hook>
  <ItemName>TextChanged</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>TextInserted</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>offset as integer, text as String</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>TextRemoved</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>offset as integer, text as String</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>UseBackgroundColorForLine</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>lineIndex as integer, byref lineBackgroundColor as color</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Hook>
 <Hook>
  <ItemName>UseBookmarkIconForLine</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>lineIndex as integer</ItemParams>
  <ItemResult>Picture</ItemResult>
 </Hook>
 <Hook>
  <ItemName>VerticalScrollValueChanged</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>TextChange</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Note>
  <ItemName>KeyCodes</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>KeyCodes</NoteLine>
   <NoteLine>Key: beetlejuice</NoteLine>
   <NoteLine>taken from Aaron's blog</NoteLine>
   <NoteLine>http://ramblings.aaronballman.com/2006/02/Since_I_can_never_remember_this_sort_of_stuff_myself...html</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>AscB(Key) Keyboard.AsyncKeyDown    Explanation</NoteLine>
   <NoteLine>0          N/A             Null Byte</NoteLine>
   <NoteLine>1          115             Home</NoteLine>
   <NoteLine>4          119             End</NoteLine>
   <NoteLine>5          114             Insert</NoteLine>
   <NoteLine>8          51             Backspace</NoteLine>
   <NoteLine>9          48             Tab</NoteLine>
   <NoteLine>11          116             Page Up</NoteLine>
   <NoteLine>12          121             Page Down</NoteLine>
   <NoteLine>13          36             Return</NoteLine>
   <NoteLine>27          53             Escape</NoteLine>
   <NoteLine>28          123             Left Arrow</NoteLine>
   <NoteLine>29          124             Right Arrow</NoteLine>
   <NoteLine>30          125             Down Arrow</NoteLine>
   <NoteLine>31          126             Up Arrow</NoteLine>
   <NoteLine>32          49             Space</NoteLine>
   <NoteLine>33          N/A             !</NoteLine>
   <NoteLine>34          N/A             "</NoteLine>
   <NoteLine>35          N/A             #</NoteLine>
   <NoteLine>36          N/A             $</NoteLine>
   <NoteLine>37          N/A             %</NoteLine>
   <NoteLine>38          N/A             &amp;</NoteLine>
   <NoteLine>39          39             '</NoteLine>
   <NoteLine>40          N/A             (</NoteLine>
   <NoteLine>41          N/A             )</NoteLine>
   <NoteLine>42          N/A             *</NoteLine>
   <NoteLine>43          N/A             +</NoteLine>
   <NoteLine>44          43             ,</NoteLine>
   <NoteLine>45          27             -</NoteLine>
   <NoteLine>46          47             .</NoteLine>
   <NoteLine>47          44             /</NoteLine>
   <NoteLine>48          29             0</NoteLine>
   <NoteLine>49          18             1</NoteLine>
   <NoteLine>50          19             2</NoteLine>
   <NoteLine>51          20             3</NoteLine>
   <NoteLine>52          21             4</NoteLine>
   <NoteLine>53          23             5</NoteLine>
   <NoteLine>54          22             6</NoteLine>
   <NoteLine>55          26             7</NoteLine>
   <NoteLine>56          28             8</NoteLine>
   <NoteLine>57          25             9</NoteLine>
   <NoteLine>58          N/A             :</NoteLine>
   <NoteLine>59          41             ;</NoteLine>
   <NoteLine>60          N/A             &lt;</NoteLine>
   <NoteLine>61          N/A             =</NoteLine>
   <NoteLine>62          N/A             &gt;</NoteLine>
   <NoteLine>63          N/A             ?</NoteLine>
   <NoteLine>64          N/A             @</NoteLine>
   <NoteLine>65          0             A</NoteLine>
   <NoteLine>66          11             B</NoteLine>
   <NoteLine>67          8             C</NoteLine>
   <NoteLine>68          2             D</NoteLine>
   <NoteLine>69          14             E</NoteLine>
   <NoteLine>70          3             F</NoteLine>
   <NoteLine>71          5             G</NoteLine>
   <NoteLine>72          4             H</NoteLine>
   <NoteLine>73          34             I</NoteLine>
   <NoteLine>74          38             J</NoteLine>
   <NoteLine>75          40             K</NoteLine>
   <NoteLine>76          37             L</NoteLine>
   <NoteLine>77          46             M</NoteLine>
   <NoteLine>78          45             N</NoteLine>
   <NoteLine>79          31             O</NoteLine>
   <NoteLine>80          35             P</NoteLine>
   <NoteLine>81          12             Q</NoteLine>
   <NoteLine>82          15             R</NoteLine>
   <NoteLine>83          1             S</NoteLine>
   <NoteLine>84          17             T</NoteLine>
   <NoteLine>85          32             U</NoteLine>
   <NoteLine>86          9             V</NoteLine>
   <NoteLine>87          13             W</NoteLine>
   <NoteLine>88          7             X</NoteLine>
   <NoteLine>89          16             Y</NoteLine>
   <NoteLine>90          6             Z</NoteLine>
   <NoteLine>91          33             [</NoteLine>
   <NoteLine>92          42             \</NoteLine>
   <NoteLine>93          30             ]</NoteLine>
   <NoteLine>94          N/A             ^</NoteLine>
   <NoteLine>95          N/A             _</NoteLine>
   <NoteLine>96          50             `</NoteLine>
   <NoteLine>97          0             a</NoteLine>
   <NoteLine>98          11             b</NoteLine>
   <NoteLine>99          8             c</NoteLine>
   <NoteLine>100          2             d</NoteLine>
   <NoteLine>101          14             e</NoteLine>
   <NoteLine>102          3             f</NoteLine>
   <NoteLine>103          5             g</NoteLine>
   <NoteLine>104          4             h</NoteLine>
   <NoteLine>105          34             i</NoteLine>
   <NoteLine>106          38             j</NoteLine>
   <NoteLine>107          40             k</NoteLine>
   <NoteLine>108          37             l</NoteLine>
   <NoteLine>109          46             m</NoteLine>
   <NoteLine>110          45             n</NoteLine>
   <NoteLine>111          31             o</NoteLine>
   <NoteLine>112          35             p</NoteLine>
   <NoteLine>113          12             q</NoteLine>
   <NoteLine>114          15             r</NoteLine>
   <NoteLine>115          1             s</NoteLine>
   <NoteLine>116          17             t</NoteLine>
   <NoteLine>117          32             u</NoteLine>
   <NoteLine>118          9             v</NoteLine>
   <NoteLine>119          13             w</NoteLine>
   <NoteLine>120          7             x</NoteLine>
   <NoteLine>121          16             y</NoteLine>
   <NoteLine>122          6             z</NoteLine>
   <NoteLine>123          N/A             {</NoteLine>
   <NoteLine>124          N/A             |</NoteLine>
   <NoteLine>125          N/A             }</NoteLine>
   <NoteLine>126          N/A             ~</NoteLine>
   <NoteLine>127          117             Delete</NoteLine>
   <NoteLine>200          122             F1</NoteLine>
   <NoteLine>201          120             F2</NoteLine>
   <NoteLine>202          99             F3</NoteLine>
   <NoteLine>203          118             F4</NoteLine>
   <NoteLine>204          96             F5</NoteLine>
   <NoteLine>205          97             F6</NoteLine>
   <NoteLine>206          98             F7</NoteLine>
   <NoteLine>207          100             F8</NoteLine>
   <NoteLine>208          101             F9</NoteLine>
   <NoteLine>209          109             F10</NoteLine>
   <NoteLine>210          103             F11</NoteLine>
   <NoteLine>211          111             F12</NoteLine>
   <NoteLine>N/A          105             Print Screen</NoteLine>
   <NoteLine>N/A          107             Scroll Lock</NoteLine>
   <NoteLine>N/A          N/A             Pause</NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>AutoCloseBrackets</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>AutoCloseBrackets As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>AutoCloseBrackets As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>AutocompleteAppliesStandardCase</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>AutocompleteAppliesStandardCase As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>AutocompleteAppliesStandardCase As boolean = true</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>AutocompleteSuggestionInsertionX</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>AutocompleteSuggestionInsertionX As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>AutocompleteSuggestionInsertionX As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>AutoIndentNewLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>AutoIndentNewLines As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>AutoIndentNewLines As boolean = true</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>BackColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>BackColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>BackColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mBackColor = value</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mBackColor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>blockBeginPosX</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>blockBeginPosX As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>blockBeginPosX As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>blockBeginPosY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>blockBeginPosY As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>blockBeginPosY As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>blockCharsPattern</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>blockCharsPattern As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>blockCharsPattern As string</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>BlockEndImage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared BlockEndImage As picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>BlockEndImage As picture</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>1</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if mBlockendimage = nil then</SourceLine>
   <SourceLine>mBlockendimage = loadMaskedPicture(blockEndMarker)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>return mBlockendimage</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>BlockFoldedImage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared BlockFoldedImage As picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>BlockFoldedImage As picture</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>1</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if mBlockfoldedimage = nil then</SourceLine>
   <SourceLine>mBlockfoldedimage = loadMaskedPicture(blockFoldedMarker)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>return mBlockfoldedimage</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>BlockStartImage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared BlockStartImage As picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>BlockStartImage As picture</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>1</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if mBlockstartimage = nil then</SourceLine>
   <SourceLine>mBlockstartimage = loadMaskedPicture(blockStartMarker)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>return mBlockstartimage</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>BookmarkImage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared BookmarkImage As Picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>BookmarkImage As Picture</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>1</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if mBookmarkimage = nil then</SourceLine>
   <SourceLine>mBookmarkimage = loadMaskedPicture(bookmarksimg)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>return mBookmarkimage</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>BookmarkTable</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>BookmarkTable As Dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>BookmarkTable As Dictionary</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mBookmarktable = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if mBookmarktable = nil then</SourceLine>
   <SourceLine>//bookmarks</SourceLine>
   <SourceLine>mBookmarktable = new Dictionary</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>return mBookmarktable</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Border</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Border As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Border As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mDrawFrame = value</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mDrawFrame</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>BorderColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>BorderColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>BorderColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mFrameColor = value</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mFrameColor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>BracketHighlightColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>BracketHighlightColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>BracketHighlightColor As color = &amp;cFFFF00</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>caretBlinker</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>caretBlinker As CaretBlinker</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>caretBlinker As CaretBlinker</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>CaretColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CaretColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CaretColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mCaretColor = value</SourceLine>
   <SourceLine>redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mCaretColor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>caretDesiredColumn</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>caretDesiredColumn As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>caretDesiredColumn As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>dim x, y as Integer</SourceLine>
   <SourceLine>dim calcPos as Integer = desiredColumnCharPos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//or the caretpos</SourceLine>
   <SourceLine>if desiredColumnCharPos &lt; 0 then calcPos = CaretPos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find screenpos</SourceLine>
   <SourceLine>XYatCharPos(calcPos, x, y)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return x - LineNumOffset - LeftMarginOffset + ScrollPositionX</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>CaretLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CaretLine As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CaretLine As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mCaretline</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>CaretPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CaretPos As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CaretPos As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>if value = mCaretPos then Return</SourceLine>
   <SourceLine>changeSelection(value, 0)</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mCaretPos</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>CaretState</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CaretState As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CaretState As boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>ClearHighlightedRangesOnTextChange</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ClearHighlightedRangesOnTextChange As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ClearHighlightedRangesOnTextChange As boolean = true</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>CurrentDocumentSymbols</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CurrentDocumentSymbols As dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CurrentDocumentSymbols As dictionary</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>CurrentEventID</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CurrentEventID As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CurrentEventID As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>CurrentFocusedField</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared CurrentFocusedField As CustomEditField</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CurrentFocusedField As CustomEditField</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>1</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mCurrentfocusedfield</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>currentSuggestionWindow</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>currentSuggestionWindow As suggestionWindow</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>currentSuggestionWindow As suggestionWindow</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>cursorIsIbeam</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>cursorIsIbeam As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>cursorIsIbeam As boolean = true</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>desiredColumnCharPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>desiredColumnCharPos As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>desiredColumnCharPos As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>DirtyLinesColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DirtyLinesColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DirtyLinesColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mDirtylinescolor = value</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mDirtylinescolor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>DisplayDirtyLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DisplayDirtyLines As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DisplayDirtyLines As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mDisplaydirtylines = value</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mDisplaydirtylines</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>DisplayInvisibleCharacters</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DisplayInvisibleCharacters As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DisplayInvisibleCharacters As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mDisplayInvisibleCharacters = value</SourceLine>
   <SourceLine>updateDesiredColumn</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mDisplayInvisibleCharacters</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>DisplayLineNumbers</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DisplayLineNumbers As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DisplayLineNumbers As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mDisplayLineNumbers = value</SourceLine>
   <SourceLine>updateDesiredColumn</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mDisplayLineNumbers</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>DisplayRightMarginMarker</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DisplayRightMarginMarker As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DisplayRightMarginMarker As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mDisplayrightmarginmarker = value</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mDisplayrightmarginmarker</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Dragging</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Dragging As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Dragging As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>DragSource</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared DragSource As CustomEditField</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DragSource As CustomEditField</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>1</Shared>
 </Property>
 <Property>
  <ItemName>DragTextOnDrag</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DragTextOnDrag As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DragTextOnDrag As boolean</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>DragTextPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DragTextPos As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DragTextPos As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>DragTextSelection</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DragTextSelection As datarange</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DragTextSelection As datarange</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>EnableAutocomplete</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>EnableAutocomplete As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>EnableAutocomplete As boolean = false</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>EnableLineFoldings</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>EnableLineFoldings As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>EnableLineFoldings As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>if mEnablelinefoldings and not value then lines.unfoldAll</SourceLine>
   <SourceLine>mEnablelinefoldings = value</SourceLine>
   <SourceLine>LineNumOffset = 0</SourceLine>
   <SourceLine>updateDesiredColumn</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mEnablelinefoldings</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>fullRefresh</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>fullRefresh As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>fullRefresh As boolean</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Gutter</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Gutter As picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Gutter As picture</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>GutterBackgroundColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>GutterBackgroundColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>GutterBackgroundColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mGutterBackgroundColor = value</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mGutterBackgroundColor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>GutterSeparationLineColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>GutterSeparationLineColor As Color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>GutterSeparationLineColor As Color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mGutterSeparationLineColor = value</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mGutterSeparationLineColor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>GutterWidth</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>GutterWidth As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>GutterWidth As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return LineNumOffset</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>hasFocus</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>hasFocus As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>hasFocus As boolean</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>HighlightBlocksOnMouseOverGutter</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>HighlightBlocksOnMouseOverGutter As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>HighlightBlocksOnMouseOverGutter As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>HighlightedRanges</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>HighlightedRanges As CharSelectionManager</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>HighlightedRanges As CharSelectionManager</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mHighlightedranges = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if mHighlightedranges = nil then</SourceLine>
   <SourceLine>mHighlightedranges = new CharSelectionManager</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>return mHighlightedranges</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>highlighter</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>highlighter As linehighlighter</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>highlighter As linehighlighter</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mHighlighter = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if mHighlighter = nil then</SourceLine>
   <SourceLine>//create Highlighter thread</SourceLine>
   <SourceLine>mHighlighter = new LineHighlighter(self, SyntaxDefinition, modifiedLines, TextStorage, lines)</SourceLine>
   <SourceLine>self.registerForMessage(mHighlighter)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return mHighlighter</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>HighlightMatchingBrackets</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>HighlightMatchingBrackets As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>HighlightMatchingBrackets As boolean = true</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>HighlightMatchingBracketsMode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>HighlightMatchingBracketsMode As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>HighlightMatchingBracketsMode As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>horizontalSB</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>horizontalSB As scrollbar</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>horizontalSB As scrollbar</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>IgnoreRepaint</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>IgnoreRepaint As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>IgnoreRepaint As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mIgnorerepaint = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mIgnorerepaint</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>invalidLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>invalidLines As dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>invalidLines As dictionary</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mInvalidlines = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if mInvalidlines = nil then</SourceLine>
   <SourceLine>//dictionaries to keep track of modified and updated lines.</SourceLine>
   <SourceLine>mInvalidlines = new Dictionary</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return mInvalidlines</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>keyDownTime</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>keyDownTime As double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>keyDownTime As double</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>lastClickTicks</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>lastClickTicks As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lastClickTicks As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>lastDragTicks</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>lastDragTicks As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lastDragTicks As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>lastDrawnTopLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>lastDrawnTopLine As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lastDrawnTopLine As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>lastLongestLineLength</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>lastLongestLineLength As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lastLongestLineLength As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>lastLongestLinePixels</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>lastLongestLinePixels As single</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lastLongestLinePixels As single</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>lastMouseDownX</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>lastMouseDownX As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lastMouseDownX As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>lastMouseDownY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>lastMouseDownY As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lastMouseDownY As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>lastMouseUpX</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>lastMouseUpX As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lastMouseUpX As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>lastMouseUpY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>lastMouseUpY As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lastMouseUpY As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>lastRedrawTicks</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>lastRedrawTicks As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lastRedrawTicks As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>LeftMarginOffset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>LeftMarginOffset As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>LeftMarginOffset As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mLeftMarginOffset = value</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mLeftMarginOffset</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>LineNumbersColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>LineNumbersColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>LineNumbersColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mLineNumbersColor = value</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mLineNumbersColor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>LineNumbersTextFont</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>LineNumbersTextFont As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>LineNumbersTextFont As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mLinenumberstextfont = value</SourceLine>
   <SourceLine>LineNumOffset = 0</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mLinenumberstextfont</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>LineNumbersTextSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>LineNumbersTextSize As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>LineNumbersTextSize As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mLinenumberstextsize = min(value, max(TextSize, value))</SourceLine>
   <SourceLine>LineNumOffset = 0</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mLinenumberstextsize</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>LineNumOffset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>LineNumOffset As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>LineNumOffset As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mlineNumOffset = 0</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if not displayLineNumbers then Return 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mlineNumOffset = 0 then</SourceLine>
   <SourceLine>dim tmp as Picture = tmpPicture</SourceLine>
   <SourceLine>tmp.graphics.TextFont = LineNumbersTextFont</SourceLine>
   <SourceLine>tmp.graphics.TextSize = LineNumbersTextSize</SourceLine>
   <SourceLine>tmp.Graphics.Bold = true</SourceLine>
   <SourceLine>mlineNumOffset = tmp.graphics.StringWidth(str(lines.Count)) + 10</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if EnableLineFoldings then</SourceLine>
   <SourceLine>mlineNumOffset = LineNumOffset + blockStartImage.Width + 2</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return mlineNumOffset</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>lines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>lines As LineManager</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lines As LineManager</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mLines = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if mLines = nil then</SourceLine>
   <SourceLine>//and line manager</SourceLine>
   <SourceLine>mLines = new LineManager(TextStorage, TabWidth)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//register to receive messages from this line manager only</SourceLine>
   <SourceLine>self.registerForMessage(mLines)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return mLines</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>linesOnScreen</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>linesOnScreen As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>linesOnScreen As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>loadingDocument</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>loadingDocument As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>loadingDocument As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>MatchingBlockHighlight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>MatchingBlockHighlight As CharSelection</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>MatchingBlockHighlight As CharSelection</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>MaxVisibleLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>MaxVisibleLines As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>MaxVisibleLines As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return min(me.Height / TextHeight, lines.Count)</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>mBackBuffer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mBackBuffer As Picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mBackBuffer As Picture</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mBackColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mBackColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mBackColor As color</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mBlockendimage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared mBlockendimage As picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mBlockendimage As picture</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>1</Shared>
 </Property>
 <Property>
  <ItemName>mBlockfoldedimage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared mBlockfoldedimage As picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mBlockfoldedimage As picture</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>1</Shared>
 </Property>
 <Property>
  <ItemName>mBlockstartimage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared mBlockstartimage As picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mBlockstartimage As picture</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>1</Shared>
 </Property>
 <Property>
  <ItemName>mBookmarkimage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared mBookmarkimage As Picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mBookmarkimage As Picture</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>1</Shared>
 </Property>
 <Property>
  <ItemName>mBookmarktable</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mBookmarktable As Dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mBookmarktable As Dictionary</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mCaretColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mCaretColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mCaretColor As color</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mCaretline</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mCaretline As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mCaretline As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mCaretPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mCaretPos As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mCaretPos As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mCurrentAutocompleteOptions</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mCurrentAutocompleteOptions As AutocompleteOptions</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mCurrentAutocompleteOptions As AutocompleteOptions</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mCurrentfocusedfield</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared mCurrentfocusedfield As CustomEditField</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mCurrentfocusedfield As CustomEditField</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>1</Shared>
 </Property>
 <Property>
  <ItemName>mDirtylinescolor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mDirtylinescolor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mDirtylinescolor As color = &amp;cFF9999</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mDisplaydirtylines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mDisplaydirtylines As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mDisplaydirtylines As boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mDisplayInvisibleCharacters</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mDisplayInvisibleCharacters As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mDisplayInvisibleCharacters As boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mDisplayLineNumbers</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mDisplayLineNumbers As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mDisplayLineNumbers As boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mDisplayrightmarginmarker</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mDisplayrightmarginmarker As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mDisplayrightmarginmarker As boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mDrawFrame</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mDrawFrame As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mDrawFrame As boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mEnablelinefoldings</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mEnablelinefoldings As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mEnablelinefoldings As boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mFrameColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mFrameColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mFrameColor As color</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mGutterBackgroundColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mGutterBackgroundColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mGutterBackgroundColor As color</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mGutterSeparationLineColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mGutterSeparationLineColor As Color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mGutterSeparationLineColor As Color</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mHighlightedranges</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mHighlightedranges As CharSelectionManager</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mHighlightedranges As CharSelectionManager</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mHighlighter</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mHighlighter As linehighlighter</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mHighlighter As linehighlighter</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mIgnorerepaint</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mIgnorerepaint As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mIgnorerepaint As boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mInvalidlines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mInvalidlines As dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mInvalidlines As dictionary</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mLeftMarginOffset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mLeftMarginOffset As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mLeftMarginOffset As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mLineNumbersColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mLineNumbersColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mLineNumbersColor As color</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mLinenumberstextfont</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mLinenumberstextfont As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mLinenumberstextfont As string = "System"</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mLinenumberstextsize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mLinenumberstextsize As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mLinenumberstextsize As Integer = 9</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mlineNumOffset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mlineNumOffset As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mlineNumOffset As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mLines As LineManager</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mLines As LineManager</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mModifiedlines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mModifiedlines As ModifiedLineRangeManager</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mModifiedlines As ModifiedLineRangeManager</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>modifiedLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>modifiedLines As ModifiedLineRangeManager</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>modifiedLines As ModifiedLineRangeManager</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mModifiedlines = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if mModifiedlines = nil then</SourceLine>
   <SourceLine>//dictionaries to keep track of modified and updated lines.</SourceLine>
   <SourceLine>mModifiedlines = new ModifiedLineRangeManager</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return mModifiedlines</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>MouseOverBlock</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>MouseOverBlock As Dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>MouseOverBlock As Dictionary</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mReadOnly</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mReadOnly As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mReadOnly As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mRightmargin</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mRightmargin As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mRightmargin As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mRightmarginlineimage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared mRightmarginlineimage As picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mRightmarginlineimage As picture</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>1</Shared>
 </Property>
 <Property>
  <ItemName>mscrollPosition</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mscrollPosition As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mscrollPosition As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mScrollPositionX</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mScrollPositionX As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mScrollPositionX As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mSelLength</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mSelLength As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mSelLength As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mSelStart</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mSelStart As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mSelStart As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mSyntaxDefinition</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mSyntaxDefinition As HighlightDefinition</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mSyntaxDefinition As HighlightDefinition</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mTabwidth</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mTabwidth As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mTabwidth As Integer = 4</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mTextColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mTextColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mTextColor As color</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mTextFont</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mTextFont As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mTextFont As string</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mTextHeight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mTextHeight As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mTextHeight As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mTextselectioncolor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mTextselectioncolor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mTextselectioncolor As color</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mTextSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mTextSize As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mTextSize As Integer = 0</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mTextstorage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mTextstorage As gapBuffer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mTextstorage As gapBuffer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mThickInsertionPoint</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mThickInsertionPoint As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mThickInsertionPoint As boolean = true</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mUndomgr</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mUndomgr As undomanager</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mUndomgr As undomanager</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mVisibleLineRange</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mVisibleLineRange As ModifiedLineRange</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mVisibleLineRange As ModifiedLineRange</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>OptionForTrailingSuggestion</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>OptionForTrailingSuggestion As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>OptionForTrailingSuggestion As string</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>previouslyDrawnSelection</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>previouslyDrawnSelection As charSelection</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>previouslyDrawnSelection As charSelection</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>ReadOnly</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ReadOnly As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ReadOnly As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mReadOnly = value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not value then enableBlinker(False)</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mReadOnly</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>redrawTime</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>redrawTime As double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>redrawTime As double</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>RightMarginAtPixel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>RightMarginAtPixel As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>RightMarginAtPixel As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mRightmargin = value</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if mRightmargin = 0 then</SourceLine>
   <SourceLine>//get default printer area from printer.</SourceLine>
   <SourceLine>dim tmpPrinter as new PrinterSetup</SourceLine>
   <SourceLine>mRightmargin = tmpPrinter.Width</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>return mRightmargin</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>RightMarginLineImage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared RightMarginLineImage As picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>RightMarginLineImage As picture</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>1</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if mRightmarginlineimage = nil then</SourceLine>
   <SourceLine>mRightmarginlineimage = NewPicture(1,1,32)</SourceLine>
   <SourceLine>mRightmarginlineimage.Graphics.Pixel(0,0) = &amp;cff</SourceLine>
   <SourceLine>mRightmarginlineimage.Mask.Graphics.Pixel(0,0) = &amp;cAAAAAA</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return mRightmarginlineimage</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>RightScrollMargin</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>RightScrollMargin As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>RightScrollMargin As Integer = 150</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>ScrollPosition</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ScrollPosition As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ScrollPosition As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>changeScrollValues(ScrollPositionX, value)</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mScrollPosition</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ScrollPositionX</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ScrollPositionX As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ScrollPositionX As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>changeScrollValues(value, ScrollPosition)</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mScrollPositionX</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>selectedLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>selectedLine As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>selectedLine As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>SelLength</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SelLength As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SelLength As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>changeSelection(SelStart, value)</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mSelLength</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>SelStart</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SelStart As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SelStart As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>changeSelection(value, 0)</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mSelStart</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>SelText</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SelText As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SelText As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>CurrentEventID = 0</SourceLine>
   <SourceLine>Replace(selStart, selLength, value)</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return TextStorage.getText(selStart, selLength)</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>sharedTmpPicture</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>sharedTmpPicture As picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>sharedTmpPicture As picture</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Stats</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Stats As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Stats As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return TextStorage.Stats + EndOfLine + "Last keydown (ms): "+str(keyDownTime/1000)+", last redraw (ms): "+str(redrawTime/1000)+ _</SourceLine>
   <SourceLine>" Sel start: "+str(selStart)+", Sel length: "+str(selLength)+", CaretPos:"+str(CaretPos)</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>SyntaxDefinition</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SyntaxDefinition As HighlightDefinition</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SyntaxDefinition As HighlightDefinition</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>if mSyntaxDefinition &lt;&gt; value then</SourceLine>
   <SourceLine>mSyntaxDefinition = value</SourceLine>
   <SourceLine>lines.unfoldAll</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if CurrentDocumentSymbols &lt;&gt; nil then CurrentDocumentSymbols.Clear</SourceLine>
   <SourceLine>ModifiedLines.Clear</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if highlighter &lt;&gt; nil then</SourceLine>
   <SourceLine>//stop highligher</SourceLine>
   <SourceLine>if highlighter.state = Thread.Running then highlighter.kill</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>highlighter.definition = value</SourceLine>
   <SourceLine>lines.MarkAllLinesAsChanged</SourceLine>
   <SourceLine>VisibleLineRange.length = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Highlight</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if value = nil then HighlightingComplete</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mSyntaxDefinition</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TabWidth</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TabWidth As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TabWidth As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>if value &lt;= 0 then value = 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mTabwidth = value</SourceLine>
   <SourceLine>lines.TabWidth = value</SourceLine>
   <SourceLine>updateDesiredColumn</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mTabwidth</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Text</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Text As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Text As String</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>loadingDocument = true</SourceLine>
   <SourceLine>ignoreRepaint = true</SourceLine>
   <SourceLine>mCaretLine = 0</SourceLine>
   <SourceLine>changeSelection(0,0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if highlighter.state = Thread.Running then highlighter.Kill</SourceLine>
   <SourceLine>UndoMgr.Reset</SourceLine>
   <SourceLine>modifiedLines.Clear</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>textStorage.setText(value)</SourceLine>
   <SourceLine>lines.setText(value.Len)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Highlight</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>ignoreRepaint = False</SourceLine>
   <SourceLine>loadingDocument = False</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return textStorage.getText(0, textStorage.Length)</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TextColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mTextColor = value</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mTextColor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TextFont</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextFont As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextFont As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>if Value = mTextFont then Return</SourceLine>
   <SourceLine>mTextFont = value</SourceLine>
   <SourceLine>TextHeight = 0</SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>CalculateMaxHorizontalSB</SourceLine>
   <SourceLine>CalculateMaxVerticalSB</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mTextFont</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TextHeight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextHeight As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextHeight As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mTextHeight = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if mTextHeight = 0 then</SourceLine>
   <SourceLine>dim tmp as Picture = tmpPicture</SourceLine>
   <SourceLine>mTextHeight = tmp.Graphics.TextHeight</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>return mTextHeight + 1</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TextLength</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextLength As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextLength As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return TextStorage.Length</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TextSelectionColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextSelectionColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextSelectionColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mTextselectioncolor = value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//set default selection color to system default, if none specified.</SourceLine>
   <SourceLine>if mTextselectioncolor = &amp;c000000 then</SourceLine>
   <SourceLine>mTextselectioncolor = HighlightColor</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mTextselectioncolor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TextSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextSize As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextSize As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>if Value = mTextSize then Return</SourceLine>
   <SourceLine>mTextSize = value</SourceLine>
   <SourceLine>TextHeight = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>lastLongestLineLength = 0</SourceLine>
   <SourceLine>lastLongestLinePixels = 0</SourceLine>
   <SourceLine>MaxLineLengthChanged(lines.LongestLineIdx)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>CalculateMaxHorizontalSB</SourceLine>
   <SourceLine>CalculateMaxVerticalSB</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>InvalidateAllLines</SourceLine>
   <SourceLine>Redraw</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mTextSize</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TextStorage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextStorage As gapBuffer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextStorage As gapBuffer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mTextstorage = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if mTextstorage = nil then</SourceLine>
   <SourceLine>//create a new text buffer</SourceLine>
   <SourceLine>mTextstorage = new GapBuffer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//and blinker timer.</SourceLine>
   <SourceLine>caretBlinker = new CaretBlinker(self)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return mTextstorage</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ThickInsertionPoint</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ThickInsertionPoint As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ThickInsertionPoint As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mThickInsertionPoint = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mThickInsertionPoint</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>trailingSuggestion</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>trailingSuggestion As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>trailingSuggestion As string</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>typing</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>typing As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>typing As boolean</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>UndoMgr</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>UndoMgr As undomanager</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>UndoMgr As undomanager</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mUndomgr = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if mUndomgr = nil then</SourceLine>
   <SourceLine>mUndomgr = new UndoManager</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>return mUndomgr</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>verticalSB</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>verticalSB As scrollbar</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>verticalSB As scrollbar</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>VisibleLineRange</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>VisibleLineRange As ModifiedLineRange</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>VisibleLineRange As ModifiedLineRange</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mVisibleLineRange = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if mVisibleLineRange = nil then mVisibleLineRange = new ModifiedLineRange</SourceLine>
   <SourceLine>return mVisibleLineRange</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>AcceptFocus</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AcceptTabs</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AutoCloseBrackets</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>false</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AutocompleteAppliesStandardCase</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>true</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AutoDeactivate</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AutoIndentNewLines</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>true</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>BackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>&amp;cffffff</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Backdrop</ObjName>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>Picture</ItemType>
   <EditorType>Picture</EditorType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Border</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>true</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>BorderColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>&amp;h888888</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>BracketHighlightColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;cFFFF00</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>CaretColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>&amp;c000000</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>CaretLine</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>CaretPos</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ClearHighlightedRangesOnTextChange</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>true</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DirtyLinesColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>&amp;cFF9999</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DisplayDirtyLines</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>false</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DisplayInvisibleCharacters</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>false</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DisplayLineNumbers</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>true</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DisplayRightMarginMarker</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>false</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DoubleBuffer</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EnableAutocomplete</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>false</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Enabled</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EnableLineFoldings</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>false</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EraseBackground</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>GutterBackgroundColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>&amp;cEEEEEE</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>GutterSeparationLineColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>&amp;c888888</PropertyValue>
   <ItemType>Color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>GutterWidth</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Height</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>100</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HelpTag</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>MultiLineEditor</EditorType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HighlightBlocksOnMouseOverGutter</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>true</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HighlightMatchingBrackets</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>true</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HighlightMatchingBracketsMode</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <Enumeration>
    <ItemDef>0 - Circle</ItemDef>
    <ItemDef>1 - Highlight</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ignoreRepaint</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>InitialParent</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>leftMarginOffset</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>4</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LineNumbersColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>&amp;c888888</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LineNumbersTextFont</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>System</PropertyValue>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LineNumbersTextSize</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>9</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockBottom</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockLeft</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockRight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockTop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaxVisibleLines</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ReadOnly</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>RightMarginAtPixel</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>RightScrollMargin</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>150</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ScrollPosition</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ScrollPositionX</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>selLength</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>selStart</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>SelText</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Stats</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabIndex</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabPanelIndex</ObjName>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabStop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabWidth</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Text</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextFont</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextHeight</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextLength</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextSelectionColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextSize</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ThickInsertionPoint</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>true</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>UseFocusRing</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>false</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Visible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Width</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>200</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Canvas</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>BLOCK_CLOSE_CHARS</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>BLOCK_CLOSE_CHARS</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>)]}</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>BLOCK_OPEN_CHARS</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>BLOCK_OPEN_CHARS</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>([{</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>CURRENT_CARET_WORD_DELIMITER_PATTERN</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>CURRENT_CARET_WORD_DELIMITER_PATTERN</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>[^\w\.]</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>DEFAULT_FONT</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>DEFAULT_FONT</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>System</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>DEFAULT_FONTSIZE</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>DEFAULT_FONTSIZE</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>11</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>FlashRefreshRanges</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>FlashRefreshRanges</ItemName>
  <ItemType>3</ItemType>
  <ItemDef>false</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>KEY_BACKSPACE</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>KEY_BACKSPACE</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>51</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>KEY_DELETE</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>KEY_DELETE</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>117</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>KEY_DOWN</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>KEY_DOWN</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>125</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>KEY_END</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>KEY_END</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>119</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>KEY_ESC</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>KEY_ESC</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>53</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>KEY_HOME</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>KEY_HOME</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>115</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>KEY_LEFT</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>KEY_LEFT</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>123</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>KEY_PGDWN</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>KEY_PGDWN</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>121</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>KEY_PGUP</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>KEY_PGUP</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>116</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>KEY_RIGHT</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>KEY_RIGHT</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>124</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>KEY_TAB</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>KEY_TAB</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>48</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>KEY_UP</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>KEY_UP</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>126</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>UNDO_EVT_BLOCK_SECS</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>UNDO_EVT_BLOCK_SECS</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>3</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
</block>
<block type="Module" ID="980495687">
 <ObjName>CustomEditFieldPrinter</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(g as graphics, textStorage as gapBuffer, lines as linemanager, defaultColor as color, displayInvisible as boolean)</SourceLine>
   <SourceLine>self.g = g</SourceLine>
   <SourceLine>self.TextStorage = TextStorage</SourceLine>
   <SourceLine>self.lines = lines</SourceLine>
   <SourceLine>self.defaultColor = defaultColor</SourceLine>
   <SourceLine>self.displayInvisible = displayInvisible</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>g as graphics, textStorage as gapBuffer, lines as linemanager, defaultColor as color, displayInvisible as boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DrawBlock</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function DrawBlock(x as integer, y as integer, width as integer, height as integer, lineRange as dataRange, wrap as boolean = false, lineNumbers as boolean = false) As integer</SourceLine>
   <SourceLine>if g = nil then Return -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim minLine, maxLine as Integer</SourceLine>
   <SourceLine>if lineRange = nil then //paint all</SourceLine>
   <SourceLine>minLine = 0</SourceLine>
   <SourceLine>maxLine = lines.Count - 1</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>minLine = lineRange.offset</SourceLine>
   <SourceLine>maxLine = lineRange.offset + lineRange.length</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim currentLine as TextLine</SourceLine>
   <SourceLine>dim sx, sy, lineNumOffset as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>sx = x</SourceLine>
   <SourceLine>sy = y + g.TextHeight - (g.TextHeight - g.TextAscent)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if lineNumbers then</SourceLine>
   <SourceLine>lineNumOffset = g.StringWidth(str(maxLine)+".") + 4</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim linesUsed as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as Integer = minLine to maxLine</SourceLine>
   <SourceLine>currentLine = lines.getLine(i)</SourceLine>
   <SourceLine>if currentLine = nil then Continue for</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>linesUsed = currentLine.PrinterPaint(TextStorage, g, sx + lineNumOffset, sy, width - lineNumOffset, defaultColor, displayInvisible, wrap)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if lineNumbers then</SourceLine>
   <SourceLine>g.ForeColor = &amp;c888888</SourceLine>
   <SourceLine>g.DrawString str(i+1), sx + lineNumOffset - g.StringWidth(str(i+1)+".") - 2, sy</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.ForeColor = &amp;cCCCCCC</SourceLine>
   <SourceLine>g.DrawLine sx + lineNumOffset - 2, sy - g.TextAscent, sx + lineNumOffset - 2, sy - g.TextAscent + (g.TextHeight * linesUsed)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>sy = sy + g.TextHeight * linesUsed</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if sy &gt; y + height or sy &gt; g.Height then Return i</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return maxLine</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>x as integer, y as integer, width as integer, height as integer, lineRange as dataRange, wrap as boolean = false, lineNumbers as boolean = false</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Property>
  <ItemName>defaultColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>defaultColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>defaultColor As color</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>displayInvisible</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>displayInvisible As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>displayInvisible As boolean</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>g</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>g As graphics</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>g As graphics</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>lines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>lines As linemanager</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lines As linemanager</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>TextStorage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextStorage As gapBuffer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextStorage As gapBuffer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Window" ID="1855682492">
 <ObjName>CustomScrollableEditField</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>ContainerControl</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <HookInstance>
  <ItemName>Activate</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Activate()</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>Close</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Close()</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>ConstructContextualMenu</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ConstructContextualMenu(base as MenuItem, x as Integer, y as Integer) As Boolean</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>ContentsChanged</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ContentsChanged()</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>ContextualMenuAction</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ContextualMenuAction(hitItem as MenuItem) As Boolean</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>Deactivate</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Deactivate()</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>DragEnter</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function DragEnter(obj As DragItem, action As Integer) As Boolean</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>DragExit</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DragExit(obj As DragItem, action As Integer)</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>DragOver</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function DragOver(x As Integer, y As Integer, obj As DragItem, action As Integer) As Boolean</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>DropObject</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DropObject(obj As DragItem, action As Integer)</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>EnableMenuItems</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub EnableMenuItems()</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>GotFocus</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub GotFocus()</SourceLine>
   <SourceLine>break</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>KeyDown</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function KeyDown(Key As String) As Boolean</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>KeyUp</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub KeyUp(Key As String)</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>LostFocus</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub LostFocus()</SourceLine>
   <SourceLine>break</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>Maximize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Maximize()</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>Minimize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Minimize()</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>MouseDown</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function MouseDown(X As Integer, Y As Integer) As Boolean</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>MouseDrag</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub MouseDrag(X As Integer, Y As Integer)</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>MouseEnter</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub MouseEnter()</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>MouseExit</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub MouseExit()</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>MouseMove</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub MouseMove(X As Integer, Y As Integer)</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>MouseUp</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub MouseUp(X As Integer, Y As Integer)</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>MouseWheel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function MouseWheel(X As Integer, Y As Integer, DeltaX as Integer, DeltaY as Integer) As Boolean</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>Moved</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Moved()</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>Open</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Open()</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>Paint</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Paint(g As Graphics)</SourceLine>
   <SourceLine>self.updateFocusRing</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>Resized</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Resized()</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>Resizing</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Resizing()</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>Restore</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Restore()</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <Method>
  <ItemName>AddBookmark</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AddBookmark(lineIndex as integer)</SourceLine>
   <SourceLine>contentField.AddBookmark(lineIndex)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineIndex as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>AppendText</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AppendText(text as string)</SourceLine>
   <SourceLine>contentField.AppendText(text)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>text as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>CanRedo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CanRedo() As boolean</SourceLine>
   <SourceLine>Return contentField.CanRedo</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>CanUndo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CanUndo() As boolean</SourceLine>
   <SourceLine>Return contentField.CanUndo</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>CaretSymbol</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CaretSymbol() As documentSymbol</SourceLine>
   <SourceLine>Return contentField.CaretSymbol</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>documentSymbol</ItemResult>
 </Method>
 <Method>
  <ItemName>CharPosAtLineNum</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CharPosAtLineNum(lineNumber as integer) As integer</SourceLine>
   <SourceLine>Return  contentField.CharPosAtLineNum(lineNumber)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineNumber as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>CharPosAtXY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CharPosAtXY(X as integer, Y as integer) As integer</SourceLine>
   <SourceLine>Return contentField.CharPosAtXY(x,y)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>X as integer, Y as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>ClearBookmark</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ClearBookmark(lineIndex as integer)</SourceLine>
   <SourceLine>contentField.ClearBookmark(lineIndex)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineIndex as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ClearBookmarks</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ClearBookmarks()</SourceLine>
   <SourceLine>contentField.ClearBookmarks</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ClearDirtyLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ClearDirtyLines()</SourceLine>
   <SourceLine>contentField.ClearDirtyLines</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ClearHighlightedCharacterRanges</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ClearHighlightedCharacterRanges()</SourceLine>
   <SourceLine>contentField.ClearHighlightedCharacterRanges</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ClearLineIcons</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ClearLineIcons()</SourceLine>
   <SourceLine>contentField.ClearLineIcons</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Copy</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Copy()</SourceLine>
   <SourceLine>contentField.Copy</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>CustomEditFieldPrinter</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CustomEditFieldPrinter(printerGraphics as graphics) As CustomEditFieldPrinter</SourceLine>
   <SourceLine>Return contentField.CustomEditFieldPrinter(printerGraphics)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>printerGraphics as graphics</ItemParams>
  <ItemResult>CustomEditFieldPrinter</ItemResult>
 </Method>
 <Method>
  <ItemName>DocumentSymbols</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function DocumentSymbols() As DocumentSymbol()</SourceLine>
   <SourceLine>Return contentField.DocumentSymbols</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>DocumentSymbol()</ItemResult>
 </Method>
 <Method>
  <ItemName>drawFocusRing</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function drawFocusRing(ringVisible as Boolean = true) As Boolean</SourceLine>
   <SourceLine>#if TargetMacOS</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>declare function QDBeginCGContext lib "Carbon" (port as Int32, ByRef contextPtr as Int32) as Integer</SourceLine>
   <SourceLine>declare sub CGContextSynchronize lib "Carbon" (context as Int32)</SourceLine>
   <SourceLine>declare function QDEndCGContext lib "Carbon" (port as Int32, ByRef context as Int32) as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim context, grafPort as Int32</SourceLine>
   <SourceLine>dim res as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim meTop, meLeft as Integer</SourceLine>
   <SourceLine>meTop = me.Top</SourceLine>
   <SourceLine>meLeft = me.Left</SourceLine>
   <SourceLine>dim w as Window = me.Window</SourceLine>
   <SourceLine>while w isA ContainerControl</SourceLine>
   <SourceLine>w = ContainerControl(w).Window</SourceLine>
   <SourceLine>if w isA ContainerControl then</SourceLine>
   <SourceLine>meTop = meTop + w.Top</SourceLine>
   <SourceLine>meLeft = meLeft + w.Left</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// We have to open a new drawing context because otherwise we might get our drawings clipped</SourceLine>
   <SourceLine>// or we might draw into the wrong window</SourceLine>
   <SourceLine>grafPort = w.Graphics.Handle(Graphics.HandleTypeCGrafPtr)</SourceLine>
   <SourceLine>res = QDBeginCGContext (grafPort, context)</SourceLine>
   <SourceLine>if res = 0 then</SourceLine>
   <SourceLine>// Now draw the ring</SourceLine>
   <SourceLine>declare function DrawThemeFocusRect lib "Carbon" (inRect as Ptr, DrawRing as Boolean) as Integer</SourceLine>
   <SourceLine>dim mb as new MemoryBlock(8)</SourceLine>
   <SourceLine>mb.Short(0) = meTop</SourceLine>
   <SourceLine>mb.Short(2) = meLeft</SourceLine>
   <SourceLine>mb.Short(4) = meTop+me.Height</SourceLine>
   <SourceLine>mb.Short(6) = meLeft+me.Width</SourceLine>
   <SourceLine>call DrawThemeFocusRect (mb, ringVisible)</SourceLine>
   <SourceLine>// Close the drawing context again</SourceLine>
   <SourceLine>if grafPort &lt;&gt; 0 then</SourceLine>
   <SourceLine>CGContextSynchronize context</SourceLine>
   <SourceLine>call QDEndCGContext (grafPort, context)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>if res &lt;&gt; 0 then break</SourceLine>
   <SourceLine>return res = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Draw something with RB's own functions</SourceLine>
   <SourceLine>//++++</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>ringVisible as Boolean = true</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Find</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Find(what as string, ignoreCase as boolean, wrap as boolean, redraw as boolean = true, startPos as integer = - 1) As integer</SourceLine>
   <SourceLine>Return contentField.Find(what, ignoreCase, wrap, redraw, startPos)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>what as string, ignoreCase as boolean, wrap as boolean, redraw as boolean = true, startPos as integer = - 1</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>FoldAllLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub FoldAllLines()</SourceLine>
   <SourceLine>contentField.FoldAllLines</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>FoldBlockAtCaretPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub FoldBlockAtCaretPos()</SourceLine>
   <SourceLine>contentField.FoldBlockAtCaretPos</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetLine(index as integer) As string</SourceLine>
   <SourceLine>Return contentField.GetLine(index)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer</ItemParams>
  <ItemResult>string</ItemResult>
 </Method>
 <Method>
  <ItemName>HasFocus</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function HasFocus() As Boolean</SourceLine>
   <SourceLine>return mHasFocus and CustomEditField.CurrentFocusedField = contentField</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>HighlightCharacterRange</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub HighlightCharacterRange(offset as integer, length as integer, withColor as color, rounded as boolean = false)</SourceLine>
   <SourceLine>contentField.HighlightCharacterRange(offset, length, withColor, rounded)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer, length as integer, withColor as color, rounded as boolean = false</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Insert</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Insert(offset as integer, text as string)</SourceLine>
   <SourceLine>contentField.Insert(offset, text)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer, text as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>InvalidateAllLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub InvalidateAllLines()</SourceLine>
   <SourceLine>contentField.InvalidateAllLines</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>InvalidateLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub InvalidateLine(index as integer)</SourceLine>
   <SourceLine>contentField.InvalidateLine(index)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>IsDirty</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsDirty() As boolean</SourceLine>
   <SourceLine>Return contentField.IsDirty</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>LineCount</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function LineCount() As integer</SourceLine>
   <SourceLine>Return contentField.LineCount</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>LineIcon</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function LineIcon(index as integer) As picture</SourceLine>
   <SourceLine>Return contentField.LineIcon(index)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer</ItemParams>
  <ItemResult>picture</ItemResult>
 </Method>
 <Method>
  <ItemName>LineIcon</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub LineIcon(index as integer, assigns value as picture)</SourceLine>
   <SourceLine>contentField.LineIcon(index) = value</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer, assigns value as picture</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>LineNumAtCharPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function LineNumAtCharPos(offset as integer) As integer</SourceLine>
   <SourceLine>Return contentField.LineNumAtCharPos(offset)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Paste</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Paste()</SourceLine>
   <SourceLine>contentField.Paste</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Redo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Redo()</SourceLine>
   <SourceLine>contentField.Redo</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Redraw</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Redraw()</SourceLine>
   <SourceLine>contentField.Redraw</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ReHighlight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ReHighlight()</SourceLine>
   <SourceLine>contentField.ReHighlight</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ReindentText</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ReindentText()</SourceLine>
   <SourceLine>contentField.ReindentText</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ReindentText</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ReindentText(fromLine as Integer, toLine as integer)</SourceLine>
   <SourceLine>contentField.ReindentText(fromLine, toLine)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>fromLine as Integer, toLine as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Remove</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Remove(offset as integer, length as integer, updateCaret as boolean = true)</SourceLine>
   <SourceLine>contentField.Remove(offset, length, updateCaret)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer, length as integer, updateCaret as boolean = true</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Replace</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Replace(offset as integer, length as integer, text as string, eventID as integer = - 1)</SourceLine>
   <SourceLine>contentField.Replace(offset, length, text, eventID)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer, length as integer, text as string, eventID as integer = - 1</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ResetUndo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ResetUndo()</SourceLine>
   <SourceLine>contentField.ResetUndo</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ResetUndoDirtyFlag</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ResetUndoDirtyFlag()</SourceLine>
   <SourceLine>contentField.ResetUndoDirtyFlag</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Save</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Save(toFile as folderItem, fileType as string = "Text", encoding as textencoding = nil) As boolean</SourceLine>
   <SourceLine>return contentField.Save(toFile, FileType, Encoding)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>toFile as folderItem, fileType as string = "Text", encoding as textencoding = nil</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Save</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Save(toFile as folderItem, encoding as textencoding) As boolean</SourceLine>
   <SourceLine>Return contentField.save(toFile, "Text", encoding)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>toFile as folderItem, encoding as textencoding</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>SelectAll</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SelectAll()</SourceLine>
   <SourceLine>contentField.SelectAll</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SelectLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SelectLine(lineNumber as integer, refresh as boolean = true)</SourceLine>
   <SourceLine>contentField.SelectLine(lineNumber, refresh)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineNumber as integer, refresh as boolean = true</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetDefaults</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetDefaults()</SourceLine>
   <SourceLine>contentField.BackColor = &amp;cffffff</SourceLine>
   <SourceLine>contentField.Border = true</SourceLine>
   <SourceLine>contentField.BorderColor = &amp;c888888</SourceLine>
   <SourceLine>contentField.CaretColor = &amp;c000000</SourceLine>
   <SourceLine>contentField.DirtyLinesColor = &amp;cFF9999</SourceLine>
   <SourceLine>contentField.DisplayDirtyLines = true</SourceLine>
   <SourceLine>contentField.DisplayLineNumbers = true</SourceLine>
   <SourceLine>contentField.DisplayRightMarginMarker = false</SourceLine>
   <SourceLine>contentField.GutterBackgroundColor = &amp;cEEEEEE</SourceLine>
   <SourceLine>contentField.GutterSeparationLineColor = &amp;C888888</SourceLine>
   <SourceLine>contentField.LeftMarginOffset = 4</SourceLine>
   <SourceLine>contentField.LineNumbersColor = &amp;c888888</SourceLine>
   <SourceLine>contentField.RightMarginAtPixel = 0</SourceLine>
   <SourceLine>contentField.TextColor = &amp;c000000</SourceLine>
   <SourceLine>contentField.TextFont = "Courier"</SourceLine>
   <SourceLine>contentField.TextSize = 11</SourceLine>
   <SourceLine>contentField.TextSelectionColor = &amp;c000000</SourceLine>
   <SourceLine>contentField.ThickInsertionPoint = true</SourceLine>
   <SourceLine>contentField.AutoCloseBrackets = False</SourceLine>
   <SourceLine>contentField.AutocompleteAppliesStandardCase = true</SourceLine>
   <SourceLine>contentField.AutoIndentNewLines = true</SourceLine>
   <SourceLine>contentField.ClearHighlightedRangesOnTextChange = true</SourceLine>
   <SourceLine>contentField.DisplayInvisibleCharacters = False</SourceLine>
   <SourceLine>contentField.EnableAutocomplete = true</SourceLine>
   <SourceLine>contentField.EnableLineFoldings = true</SourceLine>
   <SourceLine>contentField.HighlightMatchingBrackets = true</SourceLine>
   <SourceLine>contentField.HighlightMatchingBracketsMode = 1</SourceLine>
   <SourceLine>contentField.BracketHighlightColor = &amp;cFFFF00</SourceLine>
   <SourceLine>contentField.LineNumbersTextFont = "Courier"</SourceLine>
   <SourceLine>contentField.LineNumbersTextSize = 9</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetFocus</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetFocus()</SourceLine>
   <SourceLine>contentField.SetFocus</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SymbolAtLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function SymbolAtLine(index as integer) As documentSymbol</SourceLine>
   <SourceLine>Return contentField.SymbolAtLine(index)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer</ItemParams>
  <ItemResult>documentSymbol</ItemResult>
 </Method>
 <Method>
  <ItemName>SymbolCount</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function SymbolCount() As integer</SourceLine>
   <SourceLine>Return contentField.SymbolCount</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>TheEditField</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function TheEditField() As CustomEditField</SourceLine>
   <SourceLine>return contentField</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>CustomEditField</ItemResult>
 </Method>
 <Method>
  <ItemName>ToggleLineFold</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ToggleLineFold(lineIndex as integer)</SourceLine>
   <SourceLine>contentField.ToggleLineFold(lineIndex)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineIndex as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>TopInWindow</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function TopInWindow() As Integer</SourceLine>
   <SourceLine>// Helper function in place of "Top". Useful when this is embedded inside a ContainerControl</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim n as Integer = self.Top</SourceLine>
   <SourceLine>dim w as Window</SourceLine>
   <SourceLine>w = me.Window</SourceLine>
   <SourceLine>while w isA ContainerControl</SourceLine>
   <SourceLine>n = n + w.Top</SourceLine>
   <SourceLine>w = ContainerControl(w).Window</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine>return n</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Undo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Undo()</SourceLine>
   <SourceLine>contentField.Undo</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>UnfoldAllLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub UnfoldAllLines()</SourceLine>
   <SourceLine>contentField.UnfoldAllLines</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>updateFocusRing</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub updateFocusRing()</SourceLine>
   <SourceLine>if me.UseFocusRing and mHasFocus then</SourceLine>
   <SourceLine>mHadFocus = me.drawFocusRing</SourceLine>
   <SourceLine>elseif mHadFocus then</SourceLine>
   <SourceLine>// We need to make sure the focus ring gets erased.</SourceLine>
   <SourceLine>Window.RefreshRect me.Left-8, me.Top-8, me.Width+16, me.Height+16</SourceLine>
   <SourceLine>mHadFocus = false</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VerticalOffset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function VerticalOffset(line_0 as Integer, findTop as Boolean) As Integer</SourceLine>
   <SourceLine>dim x, y, charPos as Integer</SourceLine>
   <SourceLine>if line_0 &gt;= 0 then</SourceLine>
   <SourceLine>charPos = contentField.CharPosAtLineNum (line_0)</SourceLine>
   <SourceLine>if charPos &lt; 0 then</SourceLine>
   <SourceLine>// we are looking for the point past the last line</SourceLine>
   <SourceLine>charPos = contentField.CharPosAtLineNum (contentField.LineCount-1)</SourceLine>
   <SourceLine>if charPos &lt; 0 then return 0</SourceLine>
   <SourceLine>contentField.XYAtCharPos (charPos, x, y)</SourceLine>
   <SourceLine>return y</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>contentField.XYAtCharPos (charPos, x, y)</SourceLine>
   <SourceLine>if findTop then</SourceLine>
   <SourceLine>return y - contentField.TextHeight</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>return y - 1</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>line_0 as Integer, findTop as Boolean</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>XYAtCharPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub XYAtCharPos(charPos as integer, byref X as integer, byref Y as integer)</SourceLine>
   <SourceLine>contentField.XYAtCharPos(CharPos, x, y)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>charPos as integer, byref X as integer, byref Y as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Hook>
  <ItemName>AutocompleteOptionsForPrefix</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>prefix as string</ItemParams>
  <ItemResult>AutocompleteOptions</ItemResult>
 </Hook>
 <Hook>
  <ItemName>BlockCharsMatched</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>blockOpenChar as string, blockOpenOffset as Integer, blockCloseChar as string, blockCloseOffset as Integer</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>Close</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>ConstructContextualMenu</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>base as menuitem, x as integer, y as integer</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Hook>
 <Hook>
  <ItemName>ContextualMenuAction</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>hititem as MenuItem</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>DragExit</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>obj as DragItem, action as Integer</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>EnableMenuItems</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>GotFocus</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>GutterClicked</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>onLine as integer, x as integer, y as integer</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>HighlightingComplete</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>HorizontalScrollValueChanged</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>KeyDown</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>key as String</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Hook>
 <Hook>
  <ItemName>KeyUp</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>key as String</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>LineCountChanged</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>newLineCount as integer</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>LostFocus</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>MaxLineLengthChanged</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>maxLineLengthInPixels as single</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>MouseDown</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>X as integer, Y as integer</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Hook>
 <Hook>
  <ItemName>MouseEnter</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>MouseExit</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>MouseMove</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>X as integer, Y as integer</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>MouseUp</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>x as integer, y as integer</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>Open</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>PaintAboveLine</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>lineIndex as integer, g as graphics, x as integer, y as integer, w as integer, h as integer</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>PaintBelowLine</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>lineIndex as integer, g as graphics, x as integer, y as integer, w as integer, h as integer</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>PaintOver</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>g as Graphics</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>PlaceholderSelected</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>lineIndex as integer, placeholderLabel as String</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>ScrollValuesChanged</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>SelChanged</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>ShouldDisplaySuggestionWindowAtPos</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>ByRef x as Integer, ByRef y as Integer</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Hook>
 <Hook>
  <ItemName>ShouldTriggerAutocomplete</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>Key as string, hasAutocompleteOptions as boolean</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Hook>
 <Hook>
  <ItemName>TextChanged</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>TextInserted</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>offset as integer, text as String</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>TextRemoved</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>offset as integer, text as String</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>UseBackgroundColorForLine</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>lineIndex as integer, byref lineBackgroundColor as color</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Hook>
 <Hook>
  <ItemName>UseBookmarkIconForLine</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>lineIndex as integer</ItemParams>
  <ItemResult>Picture</ItemResult>
 </Hook>
 <Hook>
  <ItemName>VerticalScrollValueChanged</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Note>
  <ItemName>About</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>About</NoteLine>
   <NoteLine>This is a drop-in class for a scrollable CustomEditField.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>It includes the Scrollbars so that you do not have to add them yourself,</NoteLine>
   <NoteLine>making it easier to replace an existing edit control (EditField, TextArea)</NoteLine>
   <NoteLine>with a CustomEditField.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>It may be that some methods that CustomEditField are missing here. This</NoteLine>
   <NoteLine>might happen if CustomEditField gets new functions and we forget to add</NoteLine>
   <NoteLine>them here, too. Simply add them yourself, and possibly notify Alex of this</NoteLine>
   <NoteLine>so he can fix this for everyone.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>If you want to access the edit field of this container from the outside, use</NoteLine>
   <NoteLine>the "TheEditField" function.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Note: Due to limitations in RB or the IDE, you will need to set all the default</NoteLine>
   <NoteLine>property values in code. See the "SetDefaults" method for that.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Authors: Thomas Tempelmann and Alex Restrepo</NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>AutoCloseBrackets</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>AutoCloseBrackets As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>AutoCloseBrackets As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.AutoCloseBrackets = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.AutoCloseBrackets</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>AutocompleteAppliesStandardCase</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>AutocompleteAppliesStandardCase As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>AutocompleteAppliesStandardCase As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.AutocompleteAppliesStandardCase = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.AutocompleteAppliesStandardCase</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>AutoIndentNewLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>AutoIndentNewLines As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>AutoIndentNewLines As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.AutoIndentNewLines = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.AutoIndentNewLines</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Border</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Border As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Border As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.Border = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.Border</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>BorderColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>BorderColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>BorderColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.BorderColor = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.BorderColor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>CaretColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CaretColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CaretColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.CaretColor = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.CaretColor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>CaretPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CaretPos As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CaretPos As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.CaretPos = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.CaretPos</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ClearHighlightedRangesOnTextChange</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ClearHighlightedRangesOnTextChange As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ClearHighlightedRangesOnTextChange As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.ClearHighlightedRangesOnTextChange = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.ClearHighlightedRangesOnTextChange</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>DirtyLinesColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DirtyLinesColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DirtyLinesColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.DirtyLinesColor = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.DirtyLinesColor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>DisplayDirtyLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DisplayDirtyLines As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DisplayDirtyLines As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.DisplayDirtyLines = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.DisplayDirtyLines</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>DisplayInvisibleCharacters</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DisplayInvisibleCharacters As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DisplayInvisibleCharacters As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.DisplayInvisibleCharacters = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.DisplayInvisibleCharacters</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>DisplayLineNumbers</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DisplayLineNumbers As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DisplayLineNumbers As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.DisplayLineNumbers = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.DisplayLineNumbers</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>DisplayRightMarginMarker</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DisplayRightMarginMarker As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DisplayRightMarginMarker As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.DisplayRightMarginMarker = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.DisplayRightMarginMarker</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>EnableAutocomplete</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>EnableAutocomplete As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>EnableAutocomplete As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.EnableAutocomplete = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.EnableAutocomplete</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>EnableLineFoldings</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>EnableLineFoldings As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>EnableLineFoldings As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.EnableLineFoldings = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.EnableLineFoldings</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>GutterBackgroundColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>GutterBackgroundColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>GutterBackgroundColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.GutterBackgroundColor = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.GutterBackgroundColor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>GutterSeparationLineColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>GutterSeparationLineColor As Color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>GutterSeparationLineColor As Color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.GutterSeparationLineColor = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.GutterSeparationLineColor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>GutterWidth</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>GutterWidth As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>GutterWidth As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return contentField.GutterWidth</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>HighlightMatchingBrackets</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>HighlightMatchingBrackets As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>HighlightMatchingBrackets As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.HighlightMatchingBrackets = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.HighlightMatchingBrackets</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>HighlightMatchingBracketsMode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>HighlightMatchingBracketsMode As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>HighlightMatchingBracketsMode As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.HighlightMatchingBracketsMode = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.HighlightMatchingBracketsMode</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>LeftMarginOffset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>LeftMarginOffset As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>LeftMarginOffset As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.LeftMarginOffset = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.LeftMarginOffset</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>LineNumbersColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>LineNumbersColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>LineNumbersColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.LineNumbersColor = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.LineNumbersColor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>LineNumbersTextFont</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>LineNumbersTextFont As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>LineNumbersTextFont As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.LineNumbersTextFont = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.LineNumbersTextFont</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>LineNumbersTextSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>LineNumbersTextSize As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>LineNumbersTextSize As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.LineNumbersTextSize = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.LineNumbersTextSize</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>MaxVisibleLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>MaxVisibleLines As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>MaxVisibleLines As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.MaxVisibleLines</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>mHadFocus</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mHadFocus As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mHadFocus As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mHasFocus</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mHasFocus As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mHasFocus As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mSettingSelection</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mSettingSelection As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mSettingSelection As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>RighScrollMargin</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>RighScrollMargin As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>RighScrollMargin As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.RightScrollMargin = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.RightScrollMargin</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>RightMarginAtPixel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>RightMarginAtPixel As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>RightMarginAtPixel As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.RightMarginAtPixel = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return contentField.RightMarginAtPixel</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ScrollPosition</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ScrollPosition As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ScrollPosition As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.ScrollPosition = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.ScrollPosition</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ScrollPositionX</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ScrollPositionX As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ScrollPositionX As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.ScrollPositionX = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.ScrollPositionX</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>SelLength</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SelLength As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SelLength As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mSettingSelection = true // necessary to avoid</SourceLine>
   <SourceLine>contentField.SelLength = value</SourceLine>
   <SourceLine>mSettingSelection = false</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.SelLength</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>SelStart</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SelStart As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SelStart As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mSettingSelection = true</SourceLine>
   <SourceLine>contentField.SelStart = value</SourceLine>
   <SourceLine>mSettingSelection = false</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.SelStart</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>SelText</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SelText As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SelText As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.SelText = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return contentField.SelText</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Stats</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Stats As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Stats As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return contentField.Stats</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>SyntaxDefinition</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SyntaxDefinition As HighlightDefinition</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SyntaxDefinition As HighlightDefinition</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.SyntaxDefinition = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.SyntaxDefinition</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TabWidth</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TabWidth As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TabWidth As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.TabWidth = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.TabWidth</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Text</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Text As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Text As String</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.Text = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.Text</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TextColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.TextColor = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.TextColor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TextFont</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextFont As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextFont As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.TextFont = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.TextFont</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TextHeight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextHeight As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextHeight As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.TextHeight = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return contentField.TextHeight</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TextLength</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextLength As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextLength As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return contentField.TextLength</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TextSelectionColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextSelectionColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextSelectionColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.TextSelectionColor = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.TextSelectionColor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TextSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextSize As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextSize As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.TextSize = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.TextSize</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ThickInsertionPoint</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ThickInsertionPoint As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ThickInsertionPoint As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>contentField.ThickInsertionPoint = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return contentField.ThickInsertionPoint</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <PropertyVal Name="EraseBackground">True</PropertyVal>
 <PropertyVal Name="AcceptTabs"></PropertyVal>
 <PropertyVal Name="AcceptFocus">True</PropertyVal>
 <PropertyVal Name="Backdrop"></PropertyVal>
 <PropertyVal Name="BackColor">16777215</PropertyVal>
 <PropertyVal Name="HasBackColor">False</PropertyVal>
 <PropertyVal Name="UseFocusRing">True</PropertyVal>
 <PropertyVal Name="HelpTag"></PropertyVal>
 <PropertyVal Name="AutoDeactivate">True</PropertyVal>
 <PropertyVal Name="Enabled">True</PropertyVal>
 <PropertyVal Name="Visible">True</PropertyVal>
 <PropertyVal Name="TabStop">false</PropertyVal>
 <PropertyVal Name="TabIndex">0</PropertyVal>
 <PropertyVal Name="TabPanelIndex">0</PropertyVal>
 <PropertyVal Name="LockBottom">False</PropertyVal>
 <PropertyVal Name="LockRight">False</PropertyVal>
 <PropertyVal Name="LockTop">False</PropertyVal>
 <PropertyVal Name="LockLeft">False</PropertyVal>
 <PropertyVal Name="Height">118</PropertyVal>
 <PropertyVal Name="Width">208</PropertyVal>
 <PropertyVal Name="Top">32</PropertyVal>
 <PropertyVal Name="Left">32</PropertyVal>
 <PropertyVal Name="InitialParent"></PropertyVal>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>HasBackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>BackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>&amp;hFFFFFF</PropertyValue>
   <ItemType>Color</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Backdrop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>Picture</ItemType>
   <EditorType>Picture</EditorType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>InitialParent</ObjName>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>String</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Width</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>300</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Height</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>300</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockLeft</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockTop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockRight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockBottom</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabPanelIndex</ObjName>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabIndex</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabStop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Visible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Enabled</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AutoDeactivate</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HelpTag</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>String</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>UseFocusRing</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AcceptFocus</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AcceptTabs</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EraseBackground</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>ContainerControl</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AutoCloseBrackets</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AutocompleteAppliesStandardCase</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AutoIndentNewLines</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Border</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>BorderColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>CaretColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>CaretPos</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ClearHighlightedRangesOnTextChange</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DirtyLinesColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DisplayDirtyLines</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DisplayInvisibleCharacters</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DisplayLineNumbers</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DisplayRightMarginMarker</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EnableAutocomplete</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EnableLineFoldings</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>GutterBackgroundColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>GutterSeparationLineColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>Color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>GutterWidth</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HighlightMatchingBrackets</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HighlightMatchingBracketsMode</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LeftMarginOffset</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LineNumbersColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LineNumbersTextFont</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LineNumbersTextSize</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaxVisibleLines</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>RighScrollMargin</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>RightMarginAtPixel</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ScrollPosition</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ScrollPositionX</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>SelLength</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>SelStart</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>SelText</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Stats</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabWidth</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Text</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextFont</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextHeight</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextLength</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextSelectionColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextSize</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ThickInsertionPoint</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>boolean</ItemType>
  </ViewProperty>
 </ViewBehavior>
 <ControlBehavior>
  <Superclass>CustomEditField</Superclass>
  <HookInstance>
   <ItemName>TextChanged</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub TextChanged()</SourceLine>
    <SourceLine>TextChanged()</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>SelChanged</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub SelChanged(line as integer, column as integer, length as integer)</SourceLine>
    <SourceLine>if mSettingSelection then</SourceLine>
    <SourceLine>// not sure if this needs to be called at all when we're setting the selection explicitly, but at least</SourceLine>
    <SourceLine>// we must not defer it then because it'll cause trouble in SourceCodeView.handleSourceChange</SourceLine>
    <SourceLine>// because that method couldn't prevent repeated (usually recursive) calls to itself then.</SourceLine>
    <SourceLine>RaiseEvent SelChanged()</SourceLine>
    <SourceLine>else</SourceLine>
    <SourceLine>// We postpone the SelChange event so that, if there's also a TextChange,</SourceLine>
    <SourceLine>// we pass on the SelChange after the TextChange</SourceLine>
    <SourceLine>SelChangeDeferrer.Mode = Timer.ModeSingle</SourceLine>
    <SourceLine>end if</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>UseBackgroundColorForLine</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Function UseBackgroundColorForLine(lineIndex as integer, byref lineBackgroundColor as color) As boolean</SourceLine>
    <SourceLine>Return UseBackgroundColorForLine(lineIndex, lineBackgroundColor)</SourceLine>
    <SourceLine>End Function</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>GotFocus</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub GotFocus()</SourceLine>
    <SourceLine>self.mHasFocus = true</SourceLine>
    <SourceLine>GotFocus()</SourceLine>
    <SourceLine>self.updateFocusRing</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>LostFocus</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub LostFocus()</SourceLine>
    <SourceLine>self.mHasFocus = false</SourceLine>
    <SourceLine>self.updateFocusRing</SourceLine>
    <SourceLine>LostFocus()</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>Open</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Open()</SourceLine>
    <SourceLine>contentField.SetScrollbars hScrollBar, vScrollBar</SourceLine>
    <SourceLine>self.SetDefaults</SourceLine>
    <SourceLine>Open()</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>EnableMenuItems</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub EnableMenuItems()</SourceLine>
    <SourceLine>EnableMenuItems()</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>KeyDown</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Function KeyDown(key as string) As boolean</SourceLine>
    <SourceLine>return KeyDown (key)</SourceLine>
    <SourceLine>End Function</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>AutocompleteOptionsForPrefix</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Function AutocompleteOptionsForPrefix(prefix as string) As AutocompleteOptions</SourceLine>
    <SourceLine>Return AutocompleteOptionsForPrefix(prefix)</SourceLine>
    <SourceLine>End Function</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>Close</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Close()</SourceLine>
    <SourceLine>Close</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>ConstructContextualMenu</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Function ConstructContextualMenu(base as menuitem, x as integer, y as integer) As boolean</SourceLine>
    <SourceLine>Return ConstructContextualMenu(base, x, y)</SourceLine>
    <SourceLine>End Function</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>HighlightingComplete</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub HighlightingComplete()</SourceLine>
    <SourceLine>HighlightingComplete</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>LineCountChanged</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub LineCountChanged(newLineCount as integer)</SourceLine>
    <SourceLine>LineCountChanged(newLineCount)</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>MaxLineLengthChanged</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub MaxLineLengthChanged(maxLineLengthInPixels as single)</SourceLine>
    <SourceLine>MaxLineLengthChanged(maxLineLengthInPixels)</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>MouseDown</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Function MouseDown(X as integer, Y as integer) As boolean</SourceLine>
    <SourceLine>Return MouseDown(x,y)</SourceLine>
    <SourceLine>End Function</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>MouseMove</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub MouseMove(X as integer, Y as integer)</SourceLine>
    <SourceLine>MouseMove(x,y)</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>MouseUp</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub MouseUp(x as integer, y as integer)</SourceLine>
    <SourceLine>MouseUp(x,y)</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>ScrollValuesChanged</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub ScrollValuesChanged()</SourceLine>
    <SourceLine>ScrollValuesChanged</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>ShouldTriggerAutocomplete</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Function ShouldTriggerAutocomplete(Key as string, hasAutocompleteOptions as boolean) As boolean</SourceLine>
    <SourceLine>Return ShouldTriggerAutocomplete(key, hasAutocompleteOptions)</SourceLine>
    <SourceLine>End Function</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>TextInserted</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub TextInserted(offset as integer, text as String)</SourceLine>
    <SourceLine>TextInserted(offset, text)</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>TextRemoved</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub TextRemoved(offset as integer, text as String)</SourceLine>
    <SourceLine>TextRemoved(offset, text)</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>ContextualMenuAction</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Function ContextualMenuAction(hitItem as MenuItem) As Boolean</SourceLine>
    <SourceLine>ContextualMenuAction(hitItem)</SourceLine>
    <SourceLine>End Function</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>PaintAboveLine</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub PaintAboveLine(lineIndex as integer, g as graphics, x as integer, y as integer, w as integer, h as integer)</SourceLine>
    <SourceLine>PaintAboveLine(lineIndex, g, x, y, w, h)</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>PaintBelowLine</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub PaintBelowLine(lineIndex as integer, g as graphics, x as integer, y as integer, w as integer, h as integer)</SourceLine>
    <SourceLine>PaintBelowLine(lineIndex, g, x, y, w, h)</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>PaintOver</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub PaintOver(g as Graphics)</SourceLine>
    <SourceLine>PaintOver(g)</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>VerticalScrollValueChanged</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub VerticalScrollValueChanged()</SourceLine>
    <SourceLine>VerticalScrollValueChanged</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>HorizontalScrollValueChanged</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub HorizontalScrollValueChanged()</SourceLine>
    <SourceLine>HorizontalScrollValueChanged</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>UseBookmarkIconForLine</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Function UseBookmarkIconForLine(lineIndex as integer) As Picture</SourceLine>
    <SourceLine>Return UseBookmarkIconForLine(lineIndex)</SourceLine>
    <SourceLine>End Function</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>GutterClicked</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub GutterClicked(onLine as integer, x as integer, y as integer)</SourceLine>
    <SourceLine>GutterClicked(onLine, x, y)</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>BlockCharsMatched</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub BlockCharsMatched(blockOpenChar as string, blockOpenOffset as Integer, blockCloseChar as string, blockCloseOffset as Integer)</SourceLine>
    <SourceLine>BlockCharsMatched(blockOpenChar, blockOpenOffset, blockCloseChar, blockCloseOffset)</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>PlaceholderSelected</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub PlaceholderSelected(placeholderLabel as String, lineIndex as integer, line as textLine, placeholder as textPlaceholder, doubleClick as Boolean)</SourceLine>
    <SourceLine>PlaceholderSelected(lineIndex, placeholderLabel)</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>DragExit</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub DragExit(obj As DragItem, action As Integer)</SourceLine>
    <SourceLine>DragExit obj, action</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>KeyUp</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub KeyUp(Key As String)</SourceLine>
    <SourceLine>KeyUp (key)</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>MouseEnter</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub MouseEnter()</SourceLine>
    <SourceLine>MouseEnter</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>MouseExit</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub MouseExit()</SourceLine>
    <SourceLine>MouseExit</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>ShouldDisplaySuggestionWindowAtPos</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Function ShouldDisplaySuggestionWindowAtPos(byref X as Integer, byref Y as Integer) As Boolean</SourceLine>
    <SourceLine>return ShouldDisplaySuggestionWindowAtPos (x, y)</SourceLine>
    <SourceLine>End Function</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>ScrollBar</Superclass>
  <HookInstance>
   <ItemName>ValueChanged</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub ValueChanged()</SourceLine>
    <SourceLine>contentField.ScrollPosition = me.Value</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>ScrollBar</Superclass>
  <HookInstance>
   <ItemName>ValueChanged</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub ValueChanged()</SourceLine>
    <SourceLine>contentField.ScrollPositionX = me.Value</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>Timer</Superclass>
  <HookInstance>
   <ItemName>Action</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Action()</SourceLine>
    <SourceLine>RaiseEvent SelChanged</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <Control>
  <ControlClass>CustomEditField</ControlClass>
  <ItemName>CustomEditField</ItemName>
  <PropertyVal Name="Width">192</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="UseFocusRing">False</PropertyVal>
  <PropertyVal Name="Top">0</PropertyVal>
  <PropertyVal Name="ThickInsertionPoint">true</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="TextSelectionColor">0</PropertyVal>
  <PropertyVal Name="TextFont">Courier</PropertyVal>
  <PropertyVal Name="TextColor">0</PropertyVal>
  <PropertyVal Name="Text"></PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabIndex">4</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Super">CustomEditField</PropertyVal>
  <PropertyVal Name="RightScrollMargin">150</PropertyVal>
  <PropertyVal Name="RightMarginAtPixel">0</PropertyVal>
  <PropertyVal Name="ReadOnly">False</PropertyVal>
  <PropertyVal Name="Name">contentField</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockRight">True</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockBottom">True</PropertyVal>
  <PropertyVal Name="LineNumbersTextSize">9</PropertyVal>
  <PropertyVal Name="LineNumbersTextFont">Courier</PropertyVal>
  <PropertyVal Name="LineNumbersColor">8947848</PropertyVal>
  <PropertyVal Name="leftMarginOffset">4</PropertyVal>
  <PropertyVal Name="Left">0</PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="ignoreRepaint">0</PropertyVal>
  <PropertyVal Name="HighlightMatchingBracketsMode">1</PropertyVal>
  <PropertyVal Name="HighlightMatchingBrackets">true</PropertyVal>
  <PropertyVal Name="HighlightBlocksOnMouseOverGutter">true</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="Height">102</PropertyVal>
  <PropertyVal Name="GutterSeparationLineColor">8947848</PropertyVal>
  <PropertyVal Name="GutterBackgroundColor">15658734</PropertyVal>
  <PropertyVal Name="EraseBackground"></PropertyVal>
  <PropertyVal Name="EnableLineFoldings">True</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="EnableAutocomplete">True</PropertyVal>
  <PropertyVal Name="DoubleBuffer">True</PropertyVal>
  <PropertyVal Name="DisplayRightMarginMarker">false</PropertyVal>
  <PropertyVal Name="DisplayLineNumbers">True</PropertyVal>
  <PropertyVal Name="DisplayInvisibleCharacters">False</PropertyVal>
  <PropertyVal Name="DisplayDirtyLines">True</PropertyVal>
  <PropertyVal Name="DirtyLinesColor">16751001</PropertyVal>
  <PropertyVal Name="ClearHighlightedRangesOnTextChange">true</PropertyVal>
  <PropertyVal Name="CaretColor">0</PropertyVal>
  <PropertyVal Name="BracketHighlightColor">16776960</PropertyVal>
  <PropertyVal Name="BorderColor">8947848</PropertyVal>
  <PropertyVal Name="Border">true</PropertyVal>
  <PropertyVal Name="BackColor">16777215</PropertyVal>
  <PropertyVal Name="AutoIndentNewLines">true</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="AutocompleteAppliesStandardCase">true</PropertyVal>
  <PropertyVal Name="AutoCloseBrackets">false</PropertyVal>
  <PropertyVal Name="AcceptTabs"></PropertyVal>
  <PropertyVal Name="AcceptFocus">False</PropertyVal>
  <ControlIndex>0</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>ScrollBar</ControlClass>
  <ItemName>ScrollBar</ItemName>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="AcceptFocus">true</PropertyVal>
  <PropertyVal Name="LiveScroll">True</PropertyVal>
  <PropertyVal Name="PageStep">20</PropertyVal>
  <PropertyVal Name="LineStep">1</PropertyVal>
  <PropertyVal Name="Maximum">100</PropertyVal>
  <PropertyVal Name="Value">0</PropertyVal>
  <PropertyVal Name="Minimum">0</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TabIndex">5</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="LockBottom">True</PropertyVal>
  <PropertyVal Name="LockRight">True</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockLeft">False</PropertyVal>
  <PropertyVal Name="Height">118</PropertyVal>
  <PropertyVal Name="Width">16</PropertyVal>
  <PropertyVal Name="Top">0</PropertyVal>
  <PropertyVal Name="Left">192</PropertyVal>
  <PropertyVal Name="Scope">2</PropertyVal>
  <PropertyVal Name="Super">ScrollBar</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Name">vScrollBar</PropertyVal>
  <ControlIndex>1</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>ScrollBar</ControlClass>
  <ItemName>ScrollBar</ItemName>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="AcceptFocus">true</PropertyVal>
  <PropertyVal Name="LiveScroll">True</PropertyVal>
  <PropertyVal Name="PageStep">20</PropertyVal>
  <PropertyVal Name="LineStep">1</PropertyVal>
  <PropertyVal Name="Maximum">100</PropertyVal>
  <PropertyVal Name="Value">0</PropertyVal>
  <PropertyVal Name="Minimum">0</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TabIndex">6</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="LockBottom">True</PropertyVal>
  <PropertyVal Name="LockRight">True</PropertyVal>
  <PropertyVal Name="LockTop"></PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="Height">16</PropertyVal>
  <PropertyVal Name="Width">192</PropertyVal>
  <PropertyVal Name="Top">102</PropertyVal>
  <PropertyVal Name="Left">0</PropertyVal>
  <PropertyVal Name="Scope">2</PropertyVal>
  <PropertyVal Name="Super">ScrollBar</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Name">hScrollBar</PropertyVal>
  <ControlIndex>2</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>Timer</ControlClass>
  <ItemName>Timer</ItemName>
  <PropertyVal Name="Width">32</PropertyVal>
  <PropertyVal Name="Height">32</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="Period">0</PropertyVal>
  <PropertyVal Name="Mode">0</PropertyVal>
  <PropertyVal Name="Top">0</PropertyVal>
  <PropertyVal Name="Left">-44</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Super">Timer</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Name">SelChangeDeferrer</PropertyVal>
  <ControlIndex>3</ControlIndex>
  <Locked>0</Locked>
 </Control>
</block>
<block type="Module" ID="1308477559">
 <ObjName>DragImage</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
 <IsClass>0</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>NewCGImage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function NewCGImage(p as Picture) As Ptr</SourceLine>
   <SourceLine>#if targetMacOS</SourceLine>
   <SourceLine>if p is nil then</SourceLine>
   <SourceLine>return nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>dim g as Graphics = p.Graphics</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if g is nil then //copy into new picture</SourceLine>
   <SourceLine>dim pCopy as new Picture(p.Width, p.Height, 32)</SourceLine>
   <SourceLine>dim gCopy as Graphics = pCopy.Graphics</SourceLine>
   <SourceLine>if gCopy is nil then</SourceLine>
   <SourceLine>return nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>gCopy.DrawPicture p, 0, 0</SourceLine>
   <SourceLine>p = pCopy</SourceLine>
   <SourceLine>g = gCopy</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>if g is nil then //I give up</SourceLine>
   <SourceLine>return nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim gworldData as Ptr = Ptr(g.Handle(Graphics.HandleTypeCGrafPtr))</SourceLine>
   <SourceLine>if gworldData = nil then</SourceLine>
   <SourceLine>return nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>soft declare function QDBeginCGContext lib CarbonFramework (port as Ptr, ByRef contextPtr as Ptr) as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim c as Ptr</SourceLine>
   <SourceLine>dim OSError as Integer = QDBeginCGContext(gworldData, c)</SourceLine>
   <SourceLine>if OSError &lt;&gt; 0 or c = nil then</SourceLine>
   <SourceLine>return nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>soft declare function CGBitmapContextCreateImage lib CarbonFramework (c as Ptr) as Ptr</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim image as Ptr = CGBitmapContextCreateImage(c)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>soft declare function QDEndCGContext lib CarbonFramework (port as Ptr, ByRef context as Ptr) as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OSError = QDEndCGContext(gworldData, c)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return image</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>p as Picture</ItemParams>
  <ItemResult>Ptr</ItemResult>
 </Method>
 <Method>
  <ItemName>SetImage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetImage(extends d as Dragitem, p as Picture)</SourceLine>
   <SourceLine>#if targetMacOS</SourceLine>
   <SourceLine>dim theImage as Ptr = NewCGImage(p)</SourceLine>
   <SourceLine>if theImage = nil then</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>soft declare function SetDragImageWithCGImage lib "Carbon.framework" (inDrag as Integer, inCGImage as Ptr, inImageOffsetPt as Ptr, inImageFlags as UInt32) as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>soft declare function CGImageGetHeight lib "Carbon.framework" (image as Ptr) as UInt32</SourceLine>
   <SourceLine>soft declare function CGImageGetWidth lib "Carbon.framework" (image as Ptr) as UInt32</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>const sizeOfHIPoint = 8</SourceLine>
   <SourceLine>dim offset as new MemoryBlock(sizeOfHIPoint)</SourceLine>
   <SourceLine>offset.SingleValue(0) = -CGImageGetWidth(theImage)/2</SourceLine>
   <SourceLine>offset.SingleValue(4) = -CGImageGetHeight(theImage)/2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>const kDragStandardTranslucency = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'kDragRegionAndImage = (1L &lt;&lt; 4)</SourceLine>
   <SourceLine>'kDragStandardTranslucency = 0, 65%</SourceLine>
   <SourceLine>'kDragDarkTranslucency = 1, 50%</SourceLine>
   <SourceLine>'kDragDarkerTranslucency = 2, 25%</SourceLine>
   <SourceLine>'kDragOpaqueTranslucency = 3 0%</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim OSError as Integer = SetDragImageWithCGImage(d.Handle, theImage, offset, kDragStandardTranslucency)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>finally</SourceLine>
   <SourceLine>#if targetMacOS</SourceLine>
   <SourceLine>soft declare sub CFRelease lib "Carbon.framework" (cf as Ptr)</SourceLine>
   <SourceLine>CFRelease theImage</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends d as Dragitem, p as Picture</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Note>
  <ItemName>Info</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>Info</NoteLine>
   <NoteLine>Code by Charles Yeomans</NoteLine>
   <NoteLine>http://www.declaresub.com/article/121/providing-a-better-drag-image</NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>CarbonFramework</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>CarbonFramework</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>Carbon.framework</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
</block>
<block type="Module" ID="1013520339">
 <ObjName>EditFieldGlobals</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
 <IsClass>0</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>DarkerColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function DarkerColor(extends forColor as color, offset as integer) As color</SourceLine>
   <SourceLine>//get a darker color for the given color.</SourceLine>
   <SourceLine>Return rgb( max(forColor.Red - offset, 0), max(forColor.green - offset, 0), max(forColor.blue - offset, 0))</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends forColor as color, offset as integer</ItemParams>
  <ItemResult>color</ItemResult>
 </Method>
 <Method>
  <ItemName>InvertColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function InvertColor(extends input as Color) As color</SourceLine>
   <SourceLine>Return rgb(255 - input.Red, 255 - input.Green, 255 - input.Blue)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends input as Color</ItemParams>
  <ItemResult>color</ItemResult>
 </Method>
 <Method>
  <ItemName>LighterColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function LighterColor(extends forColor as color, offset as integer) As color</SourceLine>
   <SourceLine>//get a darker color for the given color.</SourceLine>
   <SourceLine>Return rgb( min(forColor.Red + offset, 255), min(forColor.green + offset, 255), min(forColor.blue + offset, 255))</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends forColor as color, offset as integer</ItemParams>
  <ItemResult>color</ItemResult>
 </Method>
 <Method>
  <ItemName>loadMaskedPicture</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function loadMaskedPicture(image as picture) As picture</SourceLine>
   <SourceLine>if Image = nil then Return nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim newpic as Picture = NewPicture(image.Width/2, Image.Height, 32)</SourceLine>
   <SourceLine>NewPic.Graphics.DrawPicture Image, 0,0</SourceLine>
   <SourceLine>NewPic.Mask.Graphics.DrawPicture Image, 0, 0, NewPic.Width, NewPic.Height, Image.Width/2, 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return newpic</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>image as picture</ItemParams>
  <ItemResult>picture</ItemResult>
 </Method>
 <Method>
  <ItemName>LongestCommonPrefixIndex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function LongestCommonPrefixIndex(extends source as string, target as string) As integer</SourceLine>
   <SourceLine>//finds the longest common prefix between 2 strings</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim i as Integer</SourceLine>
   <SourceLine>for i = 1 to min(source.len, Target.Len)</SourceLine>
   <SourceLine>if source.Mid(i,1) &lt;&gt; Target.Mid(i,1) then Exit for</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>Return i - 1</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends source as string, target as string</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>SquaredColorDistance</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function SquaredColorDistance(color1 as Color, color2 as Color) As integer</SourceLine>
   <SourceLine>Return pow(color1.Red * 0.299 - color2.Red * 0.299, 2) + pow(color1.Green * 0.587 - color2.Green * 0.587, 2) + pow(color1.Blue * 0.114 - color2.Blue * 0.114, 2)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>color1 as Color, color2 as Color</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Note>
  <ItemName>TextStorageType</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>TextStorageType</NoteLine>
   <NoteLine>MemoryBlockStorageWide on Linux doesn't work right,</NoteLine>
   <NoteLine>but the MemoryBlockStorage works.</NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>BlockFoldedTrailImage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>BlockFoldedTrailImage As picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>BlockFoldedTrailImage As picture</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if mBlocktrailimage = nil then</SourceLine>
   <SourceLine>mBlocktrailimage = loadMaskedPicture(blockFoldedTrailMarker)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return mBlocktrailimage</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>mBlocktrailimage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mBlocktrailimage As picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mBlocktrailimage As picture</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>blockFoldedTrailImage</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>picture</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>CEF_VERSION</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>CEF_VERSION</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>1.6.3</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>STORAGE_ARRAY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>STORAGE_ARRAY</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>1</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>STORAGE_MEMORYBLOCK</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>STORAGE_MEMORYBLOCK</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>0</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>STORAGE_WIDEMEMORYBLOCK</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>STORAGE_WIDEMEMORYBLOCK</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>2</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>TextStorageType</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>TextStorageType</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>2</ItemDef>
  <ItemFlags>1</ItemFlags>
  <ConstantInstance>
   <ItemPlatform>5</ItemPlatform>
   <ItemLanguage>0</ItemLanguage>
   <ItemDef>1</ItemDef>
  </ConstantInstance>
 </Constant>
 <Constant>
  <ItemName>UseOldRenderer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>UseOldRenderer</ItemName>
  <ItemType>3</ItemType>
  <ItemDef>false</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
</block>
<block type="Folder" ID="508593666">
 <ObjName>Extras</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
</block>
<block type="Module" ID="2001356951">
 <ObjName>CaretBlinker</ObjName>
 <ObjContainerID>508593666</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>timer</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <HookInstance>
  <ItemName>Action</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Action()</SourceLine>
   <SourceLine>if owner = nil then Return</SourceLine>
   <SourceLine>owner.Redraw(true)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(owner as CustomEditField)</SourceLine>
   <SourceLine>me.Reference = new WeakRef(owner)</SourceLine>
   <SourceLine>me.Period = 500</SourceLine>
   <SourceLine>me.Mode = timer.ModeMultiple</SourceLine>
   <SourceLine>me.Enabled = true</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>owner as CustomEditField</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>owner</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>owner As CustomEditField</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>owner As CustomEditField</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if me.Reference &lt;&gt; nil then</SourceLine>
   <SourceLine>return CustomEditField(me.Reference.Value)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>return nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Reference</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Reference As weakRef</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Reference As weakRef</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>timer</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <InheritsFrom>timer</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Mode</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>2</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <InheritsFrom>timer</InheritsFrom>
   <Enumeration>
    <ItemDef>0 - Off</ItemDef>
    <ItemDef>1 - Single</ItemDef>
    <ItemDef>2 - Multiple</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>timer</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Period</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>1000</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>timer</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>timer</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <InheritsFrom>timer</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="505901505">
 <ObjName>CharSelection</ObjName>
 <ObjContainerID>508593666</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>DataRange</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(offset as integer, length as integer, startLine as integer, endLine as integer, selectionColor as color)</SourceLine>
   <SourceLine>// Calling the overridden superclass constructor.</SourceLine>
   <SourceLine>// Note that this may need modifications if there are multiple constructor choices.</SourceLine>
   <SourceLine>// Possible constructor calls:</SourceLine>
   <SourceLine>// Constructor(offset as integer, length as integer) -- From DataRange</SourceLine>
   <SourceLine>// Constructor() -- From DataRange</SourceLine>
   <SourceLine>Super.Constructor(offset, length)</SourceLine>
   <SourceLine>self.StartLine = StartLine</SourceLine>
   <SourceLine>self.EndLine = EndLine</SourceLine>
   <SourceLine>self.SelectionColor = SelectionColor</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>LosesFocus = True</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer, length as integer, startLine as integer, endLine as integer, selectionColor as color</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>IsLineIndexInRange</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsLineIndexInRange(lineIndex as integer) As boolean</SourceLine>
   <SourceLine>Return lineIndex &gt;= self.StartLine and lineIndex &lt;= self.EndLine</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineIndex as integer</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>OverlapsSelection</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function OverlapsSelection(selection as charSelection) As integer</SourceLine>
   <SourceLine>if self.offset = selection.offset and self.length = Selection.length then Return OVERLAP_SAME</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if selection.inRange(self.offset) and self.EndOffset = selection.EndOffset then</SourceLine>
   <SourceLine>Return OVERLAP_WITHIN_AT_START</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if self.offset = selection.offset and selection.inRange(self.EndOffset) then</SourceLine>
   <SourceLine>Return OVERLAP_WITHIN_AT_END</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if inRange(selection.offset) and not inRange(selection.EndOffset) then //head in self</SourceLine>
   <SourceLine>return OVERLAP_END</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if selection.inRange(self.offset) and not selection.inRange(self.EndOffset) then //tail of Selection is within self</SourceLine>
   <SourceLine>Return OVERLAP_START</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if selection.inRange(self.offset) and selection.inRange(self.EndOffset) then //self within selection</SourceLine>
   <SourceLine>Return OVERLAP_WITHIN</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if self.inRange(selection.offset) and self.inRange(selection.EndOffset) then</SourceLine>
   <SourceLine>Return OVERLAP_CONTAINS</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return OVERLAP_NONE</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>selection as charSelection</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Property>
  <ItemName>EndLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>EndLine As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>EndLine As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>LosesFocus</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>LosesFocus As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>LosesFocus As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Rounded</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Rounded As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Rounded As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>SelectionColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SelectionColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SelectionColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>StartLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>StartLine As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>StartLine As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>EndOffset</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>DataRange</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>length</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>DataRange</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>offset</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>DataRange</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EndLine</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LosesFocus</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Rounded</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>SelectionColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>StartLine</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>OVERLAP_CONTAINS</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>OVERLAP_CONTAINS</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>5</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>OVERLAP_END</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>OVERLAP_END</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>1</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>OVERLAP_NONE</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>OVERLAP_NONE</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>0</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>OVERLAP_SAME</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>OVERLAP_SAME</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>7</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>OVERLAP_START</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>OVERLAP_START</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>4</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>OVERLAP_WITHIN</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>OVERLAP_WITHIN</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>2</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>OVERLAP_WITHIN_AT_END</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>OVERLAP_WITHIN_AT_END</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>6</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>OVERLAP_WITHIN_AT_START</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>OVERLAP_WITHIN_AT_START</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>3</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
</block>
<block type="Module" ID="798852868">
 <ObjName>CharSelectionManager</ObjName>
 <ObjContainerID>508593666</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>AddSelection</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function AddSelection(selection as CharSelection) As charSelection</SourceLine>
   <SourceLine>if Selection.length = 0 then Return nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim tmpSelection as CharSelection</SourceLine>
   <SourceLine>dim overlapResult as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as Integer = 0 to UBound(Selections)</SourceLine>
   <SourceLine>tmpSelection = Selections(i)</SourceLine>
   <SourceLine>overlapResult = tmpSelection.OverlapsSelection(Selection)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if overlapResult &lt;&gt; CharSelection.OVERLAP_NONE then</SourceLine>
   <SourceLine>dim newOffset as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if tmpSelection.SelectionColor = selection.SelectionColor then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim newLength as Integer</SourceLine>
   <SourceLine>dim newStartLine as Integer</SourceLine>
   <SourceLine>dim newEndLine as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//merge selections if colors are the same</SourceLine>
   <SourceLine>newOffset = min(tmpSelection.offset, Selection.offset)</SourceLine>
   <SourceLine>newLength = max(tmpSelection.offset + tmpSelection.length, selection.offset + selection.length) - newOffset</SourceLine>
   <SourceLine>newStartLine = min(tmpSelection.StartLine, selection.StartLine)</SourceLine>
   <SourceLine>newEndLine = max(tmpSelection.EndLine, Selection.EndLine)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Selection.StartLine = newStartLine</SourceLine>
   <SourceLine>Selection.EndLine = newEndLine</SourceLine>
   <SourceLine>Selection.offset = newOffset</SourceLine>
   <SourceLine>Selection.length = newLength</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>selections.Remove(i)</SourceLine>
   <SourceLine>i = i - 1</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>select case overlapResult</SourceLine>
   <SourceLine>case CharSelection.OVERLAP_END, CharSelection.OVERLAP_CONTAINS</SourceLine>
   <SourceLine>//add the remaining range to the range arrays for further sub-splitting or merging down the line...</SourceLine>
   <SourceLine>dim tmp as new CharSelection(Selection.offset, tmpSelection.offset + tmpSelection.length - Selection.offset, Selection.StartLine, tmpSelection.EndLine, tmpSelection.SelectionColor)</SourceLine>
   <SourceLine>tmp.LosesFocus = tmpSelection.LosesFocus</SourceLine>
   <SourceLine>tmp.Rounded = tmpSelection.Rounded</SourceLine>
   <SourceLine>selections.Append(tmp)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//split tmpSelection at end and merge the end with Selection</SourceLine>
   <SourceLine>tmpSelection.length = Selection.offset - tmpSelection.offset</SourceLine>
   <SourceLine>tmpSelection.EndLine = Selection.StartLine</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case CharSelection.OVERLAP_START</SourceLine>
   <SourceLine>newOffset = Selection.offset + selection.length</SourceLine>
   <SourceLine>tmpSelection.length = tmpSelection.offset + tmpSelection.length - newOffset</SourceLine>
   <SourceLine>tmpSelection.offset = newOffset</SourceLine>
   <SourceLine>tmpSelection.StartLine = Selection.EndLine</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>//new selection totally swallows the old</SourceLine>
   <SourceLine>selections.Remove(i)</SourceLine>
   <SourceLine>i = i - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>selections.Append(Selection)</SourceLine>
   <SourceLine>mSelectioncount = UBound(Selections) + 1</SourceLine>
   <SourceLine>Return selection</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>selection as CharSelection</ItemParams>
  <ItemResult>charSelection</ItemResult>
 </Method>
 <Method>
  <ItemName>Clear</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Clear()</SourceLine>
   <SourceLine>ReDim Selections(-1)</SourceLine>
   <SourceLine>mSelectioncount = 0</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SelectionsForLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function SelectionsForLine(lineIndex as integer) As charSelection()</SourceLine>
   <SourceLine>dim result() as CharSelection</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim Selection as CharSelection</SourceLine>
   <SourceLine>for each Selection in Selections</SourceLine>
   <SourceLine>if Selection.IsLineIndexInRange(lineIndex) then</SourceLine>
   <SourceLine>result.Append Selection</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return result</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineIndex as integer</ItemParams>
  <ItemResult>charSelection()</ItemResult>
 </Method>
 <Property>
  <ItemName>mSelectioncount</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mSelectioncount As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mSelectioncount As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>SelectionCount</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SelectionCount As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SelectionCount As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mSelectioncount</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Selections()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Selections() As charSelection</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Selections() As charSelection</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>SelectionCount</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="1673914563">
 <ObjName>DataRange</ObjName>
 <ObjContainerID>508593666</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>Constructor(0,0)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(offset as integer, length as integer)</SourceLine>
   <SourceLine>moffset = offset</SourceLine>
   <SourceLine>mLength = length</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer, length as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>inRange</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function inRange(offset as integer) As boolean</SourceLine>
   <SourceLine>Return offset &gt;= self.offset and offset &lt; self.offset + self.length //changed to  &lt; instead of &lt;= per Thomas Tempelmann's suggestion.</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Hook>
  <ItemName>LengthChanged</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Property>
  <ItemName>EndOffset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>EndOffset As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>EndOffset As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return offset + length</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>length</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>length As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>length As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>if mLength = value then Return</SourceLine>
   <SourceLine>mLength = value</SourceLine>
   <SourceLine>LengthChanged</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mLength</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>mLength</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mLength As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mLength As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>moffset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>moffset As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>moffset As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>offset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>offset As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>offset As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>moffset = value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return moffset</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>EndOffset</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>length</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>offset</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="610914761">
 <ObjName>ModifiedLineRange</ObjName>
 <ObjContainerID>508593666</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>DataRange</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <HookInstance>
  <ItemName>LengthChanged</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub LengthChanged()</SourceLine>
   <SourceLine>NeedsReset = NeedsReset + 1</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(offset as integer, length as integer)</SourceLine>
   <SourceLine>// Calling the overridden superclass constructor.</SourceLine>
   <SourceLine>// Note that this may need modifications if there are multiple constructor choices.</SourceLine>
   <SourceLine>// Possible constructor calls:</SourceLine>
   <SourceLine>// Constructor(offset as integer, length as integer) -- From DataRange</SourceLine>
   <SourceLine>// Constructor() -- From DataRange</SourceLine>
   <SourceLine>Super.Constructor(offset, length)</SourceLine>
   <SourceLine>mCurrentIndex = offset</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer, length as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>CurrentIndex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CurrentIndex() As Integer</SourceLine>
   <SourceLine>if NeedsReset &gt; 0 then</SourceLine>
   <SourceLine>mCurrentIndex = offset</SourceLine>
   <SourceLine>NeedsReset = 0</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mCurrentIndex &lt; 0 then Return mCurrentIndex</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim tmp as integer = mCurrentIndex</SourceLine>
   <SourceLine>mCurrentIndex = mCurrentIndex + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mCurrentIndex &gt;= self.offset + self.length then mCurrentIndex = -1</SourceLine>
   <SourceLine>Return tmp</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>NextIndex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function NextIndex() As Boolean</SourceLine>
   <SourceLine>Return mCurrentIndex &gt;= 0 or NeedsReset &gt; 0</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>OverlapsRange</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function OverlapsRange(selection as ModifiedLineRange) As integer</SourceLine>
   <SourceLine>if self.offset = selection.offset and self.length = Selection.length then Return OVERLAP_SAME</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if selection.inRange(self.offset) and self.EndOffset = selection.EndOffset then</SourceLine>
   <SourceLine>Return OVERLAP_WITHIN_AT_START</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if self.offset = selection.offset and selection.inRange(self.EndOffset) then</SourceLine>
   <SourceLine>Return OVERLAP_WITHIN_AT_END</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if inRange(selection.offset) and not inRange(selection.EndOffset) then //head in self</SourceLine>
   <SourceLine>return OVERLAP_END</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if selection.inRange(self.offset) and not selection.inRange(self.EndOffset) then //tail of Selection is within self</SourceLine>
   <SourceLine>Return OVERLAP_START</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if selection.inRange(self.offset) and selection.inRange(self.EndOffset) then //self within selection</SourceLine>
   <SourceLine>Return OVERLAP_WITHIN</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if self.inRange(selection.offset) and self.inRange(selection.EndOffset) then</SourceLine>
   <SourceLine>Return OVERLAP_CONTAINS</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if self.offset + self.length + 1 = selection.offset then</SourceLine>
   <SourceLine>Return MERGE_AT_END</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if selection.offset + selection.length + 1 = self.offset then</SourceLine>
   <SourceLine>Return MERGE_AT_START</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return OVERLAP_NONE</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>selection as ModifiedLineRange</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>ResetIndex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ResetIndex()</SourceLine>
   <SourceLine>NeedsReset = NeedsReset + 1</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>mCurrentIndex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mCurrentIndex As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mCurrentIndex As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>NeedsReset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>NeedsReset As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>NeedsReset As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>EndOffset</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>DataRange</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>length</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>DataRange</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>offset</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>DataRange</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>MERGE_AT_END</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>MERGE_AT_END</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>8</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>MERGE_AT_START</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>MERGE_AT_START</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>9</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>OVERLAP_CONTAINS</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>OVERLAP_CONTAINS</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>5</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>OVERLAP_END</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>OVERLAP_END</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>1</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>OVERLAP_NONE</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>OVERLAP_NONE</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>0</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>OVERLAP_SAME</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>OVERLAP_SAME</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>7</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>OVERLAP_START</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>OVERLAP_START</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>4</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>OVERLAP_WITHIN</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>OVERLAP_WITHIN</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>2</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>OVERLAP_WITHIN_AT_END</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>OVERLAP_WITHIN_AT_END</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>6</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>OVERLAP_WITHIN_AT_START</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>OVERLAP_WITHIN_AT_START</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>3</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
</block>
<block type="Module" ID="2085445093">
 <ObjName>ModifiedLineRangeManager</ObjName>
 <ObjContainerID>508593666</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>AddRange</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function AddRange(range as ModifiedLineRange) As ModifiedLineRange</SourceLine>
   <SourceLine>if Range.length = 0 then Return nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim tmpRange as ModifiedLineRange</SourceLine>
   <SourceLine>dim overlapResult as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as Integer = 0 to ranges.Ubound</SourceLine>
   <SourceLine>tmpRange = Ranges(i)</SourceLine>
   <SourceLine>overlapResult = tmpRange.OverlapsRange(range)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if overlapResult &lt;&gt; CharSelection.OVERLAP_NONE then</SourceLine>
   <SourceLine>dim newOffset as Integer</SourceLine>
   <SourceLine>dim newLength as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//merge ranges</SourceLine>
   <SourceLine>newOffset = min(tmpRange.offset, Range.offset)</SourceLine>
   <SourceLine>newLength = max(tmpRange.offset + tmpRange.length, Range.offset + Range.length) - newOffset</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Range.offset = newOffset</SourceLine>
   <SourceLine>Range.length = newLength</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Ranges.Remove(i)</SourceLine>
   <SourceLine>i = i - 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ranges.Append(Range)</SourceLine>
   <SourceLine>Return Range</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>range as ModifiedLineRange</ItemParams>
  <ItemResult>ModifiedLineRange</ItemResult>
 </Method>
 <Method>
  <ItemName>Clear</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Clear()</SourceLine>
   <SourceLine>ReDim Ranges(-1)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>containsLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function containsLine(lineIndex as Integer) As Boolean</SourceLine>
   <SourceLine>for each tmp as ModifiedLineRange in ranges</SourceLine>
   <SourceLine>if tmp.inRange(lineIndex) then Return true</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>Return false</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineIndex as Integer</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>NextRange</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function NextRange() As ModifiedLineRange</SourceLine>
   <SourceLine>Return Ranges.Pop</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>ModifiedLineRange</ItemResult>
 </Method>
 <Property>
  <ItemName>RangeCount</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>RangeCount As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>RangeCount As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return ranges.Ubound + 1</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Ranges()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Ranges() As ModifiedLineRange</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Ranges() As ModifiedLineRange</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>RangeCount</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Window" ID="1827361240">
 <ObjName>FindWindow</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>Window</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <HookInstance>
  <ItemName>Close</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Close()</SourceLine>
   <SourceLine>lastLeft = me.Left</SourceLine>
   <SourceLine>lastTop = me.top</SourceLine>
   <SourceLine>CurrentFindWindow = nil</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>Open</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Open()</SourceLine>
   <SourceLine>if findTerms = nil then</SourceLine>
   <SourceLine>findTerms = new Dictionary</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if replaceTerms = nil then</SourceLine>
   <SourceLine>replaceTerms = new Dictionary</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>CurrentFindWindow = self</SourceLine>
   <SourceLine>txtToFind.Text = lastSearchTerm</SourceLine>
   <SourceLine>txtToReplace.text = lastReplaceTerm</SourceLine>
   <SourceLine>wrapAround.Value = lastWrapAroundValue</SourceLine>
   <SourceLine>ignoreCase.Value = lastIgnoreCaseValue</SourceLine>
   <SourceLine>if lastLeft &gt;= 0 then me.Left = lastLeft</SourceLine>
   <SourceLine>if lastTop &gt;=0 then me.Top = lastTop</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as Integer = 0 to findTerms.Count - 1</SourceLine>
   <SourceLine>txtToFind.AddRow findTerms.Key(i)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as Integer = 0 to replaceTerms.Count - 1</SourceLine>
   <SourceLine>txtToReplace.AddRow replaceTerms.Key(i)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <Method>
  <ItemName>addFindTerm</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Sub addFindTerm()</SourceLine>
   <SourceLine>if findTerms = nil then</SourceLine>
   <SourceLine>findTerms = new Dictionary</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if findTerms.HasKey(lastSearchTerm) then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>findTerms.Value(lastSearchTerm) = nil</SourceLine>
   <SourceLine>if CurrentFindWindow &lt;&gt; nil then</SourceLine>
   <SourceLine>CurrentFindWindow.txtToFind.AddRow lastSearchTerm</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>1</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>addReplaceTerm</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Sub addReplaceTerm()</SourceLine>
   <SourceLine>if replaceTerms = nil then</SourceLine>
   <SourceLine>replaceTerms = new Dictionary</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if replaceTerms.HasKey(lastReplaceTerm) then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>replaceTerms.Value(lastReplaceTerm) = nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if CurrentFindWindow &lt;&gt; nil then</SourceLine>
   <SourceLine>CurrentFindWindow.txtToReplace.AddRow lastReplaceTerm</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>1</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>findNext</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine> Shared Function findNext() As boolean</SourceLine>
   <SourceLine>if CurrentFindWindow &lt;&gt; nil then</SourceLine>
   <SourceLine>CurrentFindWindow.results.Text = ""</SourceLine>
   <SourceLine>lastIgnoreCaseValue = CurrentFindWindow.ignoreCase.Value</SourceLine>
   <SourceLine>lastWrapAroundValue = CurrentFindWindow.wrapAround.Value</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if CurrentFindWindow &lt;&gt; nil and CurrentFindWindow.txtToFind.Text = "" then</SourceLine>
   <SourceLine>beep</SourceLine>
   <SourceLine>Return false</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return findNext(lastIgnoreCaseValue, lastWrapAroundValue, true, -1)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>1</Shared>
  <ItemParams></ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>findNext</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function findNext(ignoreCase as boolean, wrapAround as boolean, redraw as boolean, startPos as integer) As boolean</SourceLine>
   <SourceLine>dim Target as CustomEditField = CustomEditField.CurrentFocusedField</SourceLine>
   <SourceLine>if Target = nil then Return false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>addFindTerm</SourceLine>
   <SourceLine>if Target.Find(lastSearchTerm, ignoreCase, wrapAround, redraw, startPos) &gt; -1 then Return true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>beep</SourceLine>
   <SourceLine>if CurrentFindWindow &lt;&gt; nil then</SourceLine>
   <SourceLine>CurrentFindWindow.results.Text = "Not Found"</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>1</Shared>
  <ItemParams>ignoreCase as boolean, wrapAround as boolean, redraw as boolean, startPos as integer</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>replace</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine> Shared Sub replace()</SourceLine>
   <SourceLine>if CurrentFindWindow &lt;&gt; nil then</SourceLine>
   <SourceLine>CurrentFindWindow.results.Text = ""</SourceLine>
   <SourceLine>lastIgnoreCaseValue = CurrentFindWindow.ignoreCase.Value</SourceLine>
   <SourceLine>lastWrapAroundValue = CurrentFindWindow.wrapAround.Value</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim Target as CustomEditField = CustomEditField.CurrentFocusedField</SourceLine>
   <SourceLine>if Target = nil then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>addReplaceTerm</SourceLine>
   <SourceLine>Target.SelText = lastReplaceTerm</SourceLine>
   <SourceLine>Target.Redraw</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>1</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>replaceAll</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Sub replaceAll()</SourceLine>
   <SourceLine>dim Target as CustomEditField = CustomEditField.CurrentFocusedField</SourceLine>
   <SourceLine>if Target = nil then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim count as Integer</SourceLine>
   <SourceLine>dim eventID as Integer = Ticks</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>addFindTerm</SourceLine>
   <SourceLine>addReplaceTerm</SourceLine>
   <SourceLine>Target.ignoreRepaint = true</SourceLine>
   <SourceLine>dim startPos as Integer = 0 //start at begining of file</SourceLine>
   <SourceLine>while findNext(lastIgnoreCaseValue, false, false, startPos) //WITHOUT wrapping, since this could lead to an infinite loop if replacement contains find term.</SourceLine>
   <SourceLine>Target.Replace(Target.SelStart, Target.SelLength, lastReplaceTerm, eventID)</SourceLine>
   <SourceLine>count = count + 1</SourceLine>
   <SourceLine>startPos = Target.CaretPos //update startPos</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine>Target.ignoreRepaint = false</SourceLine>
   <SourceLine>Target.Redraw</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if Count &gt; 1 and CurrentFindWindow &lt;&gt; nil then</SourceLine>
   <SourceLine>CurrentFindWindow.results.Text = str(Count) + " Replaced"</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>1</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>replaceAndFind</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine> Shared Sub replaceAndFind()</SourceLine>
   <SourceLine>replace</SourceLine>
   <SourceLine>call findNext</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>1</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>CurrentFindWindow</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared CurrentFindWindow As FindWindow</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CurrentFindWindow As FindWindow</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>1</Shared>
 </Property>
 <Property>
  <ItemName>findTerms</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared findTerms As dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>findTerms As dictionary</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>1</Shared>
 </Property>
 <Property>
  <ItemName>lastIgnoreCaseValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared lastIgnoreCaseValue As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lastIgnoreCaseValue As Boolean = true</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>1</Shared>
 </Property>
 <Property>
  <ItemName>lastLeft</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared lastLeft As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lastLeft As Integer = -1</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>1</Shared>
 </Property>
 <Property>
  <ItemName>lastReplaceTerm</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared lastReplaceTerm As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lastReplaceTerm As string</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>1</Shared>
 </Property>
 <Property>
  <ItemName>lastSearchTerm</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared lastSearchTerm As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lastSearchTerm As String</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>1</Shared>
 </Property>
 <Property>
  <ItemName>lastTop</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared lastTop As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lastTop As Integer = -1</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>1</Shared>
 </Property>
 <Property>
  <ItemName>lastWrapAroundValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared lastWrapAroundValue As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lastWrapAroundValue As Boolean = true</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>1</Shared>
 </Property>
 <Property>
  <ItemName>replaceTerms</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared replaceTerms As dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>replaceTerms As dictionary</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>1</Shared>
 </Property>
 <PropertyVal Name="ImplicitInstance">True</PropertyVal>
 <PropertyVal Name="MenuBar"></PropertyVal>
 <PropertyVal Name="MacProcID">0</PropertyVal>
 <PropertyVal Name="MinimizeButton">False</PropertyVal>
 <PropertyVal Name="MaximizeButton">False</PropertyVal>
 <PropertyVal Name="LiveResize">True</PropertyVal>
 <PropertyVal Name="Resizeable">False</PropertyVal>
 <PropertyVal Name="CloseButton">True</PropertyVal>
 <PropertyVal Name="MenuBarVisible">True</PropertyVal>
 <PropertyVal Name="FullScreen">False</PropertyVal>
 <PropertyVal Name="Visible">True</PropertyVal>
 <PropertyVal Name="Title">Find</PropertyVal>
 <PropertyVal Name="Backdrop"></PropertyVal>
 <PropertyVal Name="BackColor">16777215</PropertyVal>
 <PropertyVal Name="HasBackColor">False</PropertyVal>
 <PropertyVal Name="Composite">False</PropertyVal>
 <PropertyVal Name="Frame">0</PropertyVal>
 <PropertyVal Name="MaxHeight">32000</PropertyVal>
 <PropertyVal Name="MaxWidth">32000</PropertyVal>
 <PropertyVal Name="MinHeight">64</PropertyVal>
 <PropertyVal Name="MinWidth">64</PropertyVal>
 <PropertyVal Name="Height">154</PropertyVal>
 <PropertyVal Name="Width">527</PropertyVal>
 <PropertyVal Name="Placement">0</PropertyVal>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Interfaces</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Placement</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <InheritsFrom>Window</InheritsFrom>
   <Enumeration>
    <ItemDef>0 - Default</ItemDef>
    <ItemDef>1 - Parent Window</ItemDef>
    <ItemDef>2 - Main Screen</ItemDef>
    <ItemDef>3 - Parent Window Screen</ItemDef>
    <ItemDef>4 - Stagger</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Width</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>600</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Height</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>400</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinWidth</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>64</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinHeight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>64</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaxWidth</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>32000</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaxHeight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>32000</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Frame</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <InheritsFrom>Window</InheritsFrom>
   <Enumeration>
    <ItemDef>0 - Document</ItemDef>
    <ItemDef>1 - Movable Modal</ItemDef>
    <ItemDef>2 - Modal Dialog</ItemDef>
    <ItemDef>3 - Floating Window</ItemDef>
    <ItemDef>4 - Plain Box</ItemDef>
    <ItemDef>5 - Shadowed Box</ItemDef>
    <ItemDef>6 - Rounded Window</ItemDef>
    <ItemDef>7 - Global Floating Window</ItemDef>
    <ItemDef>8 - Sheet Window</ItemDef>
    <ItemDef>9 - Metal Window</ItemDef>
    <ItemDef>10 - Drawer Window</ItemDef>
    <ItemDef>11 - Modeless Dialog</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Composite</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HasBackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>BackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>&amp;hFFFFFF</PropertyValue>
   <ItemType>Color</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Backdrop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>Picture</ItemType>
   <EditorType>Picture</EditorType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Title</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>Untitled</PropertyValue>
   <ItemType>String</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Visible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>FullScreen</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MenuBarVisible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>CloseButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Resizeable</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LiveResize</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaximizeButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinimizeButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MacProcID</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MenuBar</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>MenuBar</ItemType>
   <EditorType>MenuBar</EditorType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ImplicitInstance</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <EditorType>Boolean</EditorType>
   <InheritsFrom>Window</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
 <ControlBehavior>
  <Superclass>Label</Superclass>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>Label</Superclass>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>ComboBox</Superclass>
  <HookInstance>
   <ItemName>TextChanged</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub TextChanged()</SourceLine>
    <SourceLine>lastSearchTerm = me.Text</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>ComboBox</Superclass>
  <HookInstance>
   <ItemName>TextChanged</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub TextChanged()</SourceLine>
    <SourceLine>lastReplaceTerm = me.text</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>CheckBox</Superclass>
  <HookInstance>
   <ItemName>Action</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Action()</SourceLine>
    <SourceLine>lastIgnoreCaseValue = me.Value</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>CheckBox</Superclass>
  <HookInstance>
   <ItemName>Action</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Action()</SourceLine>
    <SourceLine>lastWrapAroundValue = me.Value</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>PushButton</Superclass>
  <HookInstance>
   <ItemName>Action</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Action()</SourceLine>
    <SourceLine>replaceAll</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>PushButton</Superclass>
  <HookInstance>
   <ItemName>Action</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Action()</SourceLine>
    <SourceLine>replace</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>PushButton</Superclass>
  <HookInstance>
   <ItemName>Action</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Action()</SourceLine>
    <SourceLine>replaceAndFind</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>PushButton</Superclass>
  <HookInstance>
   <ItemName>Action</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Action()</SourceLine>
    <SourceLine>call findNext</SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>Label</Superclass>
 </ControlBehavior>
 <Control>
  <ControlClass>Label</ControlClass>
  <ItemName>Label</ItemName>
  <PropertyVal Name="Name">StaticText1</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="DataField"></PropertyVal>
  <PropertyVal Name="DataSource"></PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Left">18</PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="Multiline"></PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="TabIndex">0</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="Text">Find:</PropertyVal>
  <PropertyVal Name="TextAlign">2</PropertyVal>
  <PropertyVal Name="TextColor">0</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="Top">14</PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="Width">100</PropertyVal>
  <PropertyVal Name="Super">Label</PropertyVal>
  <ControlIndex>0</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>Label</ControlClass>
  <ItemName>Label</ItemName>
  <PropertyVal Name="Name">StaticText2</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="DataField"></PropertyVal>
  <PropertyVal Name="DataSource"></PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Left">18</PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="Multiline"></PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="TabIndex">1</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="Text">Replace With:</PropertyVal>
  <PropertyVal Name="TextAlign">2</PropertyVal>
  <PropertyVal Name="TextColor">0</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="Top">46</PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="Width">100</PropertyVal>
  <PropertyVal Name="Super">Label</PropertyVal>
  <ControlIndex>1</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>ComboBox</ControlClass>
  <ItemName>ComboBox</ItemName>
  <PropertyVal Name="Name">txtToFind</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="AutoComplete">False</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="DataField"></PropertyVal>
  <PropertyVal Name="DataSource"></PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="InitialValue"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Left">123</PropertyVal>
  <PropertyVal Name="ListIndex">0</PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="TabIndex">2</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="Top">15</PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="UseFocusRing">True</PropertyVal>
  <PropertyVal Name="Width">384</PropertyVal>
  <PropertyVal Name="Super">ComboBox</PropertyVal>
  <ControlIndex>2</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>ComboBox</ControlClass>
  <ItemName>ComboBox</ItemName>
  <PropertyVal Name="Name">txtToReplace</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="AutoComplete">False</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="DataField"></PropertyVal>
  <PropertyVal Name="DataSource"></PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="InitialValue"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Left">123</PropertyVal>
  <PropertyVal Name="ListIndex">0</PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="TabIndex">3</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="Top">47</PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="UseFocusRing">True</PropertyVal>
  <PropertyVal Name="Width">384</PropertyVal>
  <PropertyVal Name="Super">ComboBox</PropertyVal>
  <ControlIndex>3</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>CheckBox</ControlClass>
  <ItemName>CheckBox</ItemName>
  <PropertyVal Name="Name">ignoreCase</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="Caption">Ignore Case</PropertyVal>
  <PropertyVal Name="DataField"></PropertyVal>
  <PropertyVal Name="DataSource"></PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Left">123</PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="State">1</PropertyVal>
  <PropertyVal Name="TabIndex">4</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="Top">79</PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="Value">True</PropertyVal>
  <PropertyVal Name="Width">100</PropertyVal>
  <PropertyVal Name="Super">CheckBox</PropertyVal>
  <ControlIndex>4</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>CheckBox</ControlClass>
  <ItemName>CheckBox</ItemName>
  <PropertyVal Name="Name">wrapAround</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="Caption">Wrap Around</PropertyVal>
  <PropertyVal Name="DataField"></PropertyVal>
  <PropertyVal Name="DataSource"></PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Left">235</PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="State">1</PropertyVal>
  <PropertyVal Name="TabIndex">5</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="Top">79</PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="Value">True</PropertyVal>
  <PropertyVal Name="Width">110</PropertyVal>
  <PropertyVal Name="Super">CheckBox</PropertyVal>
  <ControlIndex>5</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>PushButton</ControlClass>
  <ItemName>PushButton</ItemName>
  <PropertyVal Name="Name">btnReplaceAll</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="Cancel"></PropertyVal>
  <PropertyVal Name="Caption">Replace All</PropertyVal>
  <PropertyVal Name="Default"></PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="HelpTag">Replace all occurrences of the find text</PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Left">100</PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="TabIndex">6</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="Top">114</PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="Width">93</PropertyVal>
  <PropertyVal Name="Super">PushButton</PropertyVal>
  <ControlIndex>6</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>PushButton</ControlClass>
  <ItemName>PushButton</ItemName>
  <PropertyVal Name="Name">btnReplace</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="Cancel"></PropertyVal>
  <PropertyVal Name="Caption">Replace</PropertyVal>
  <PropertyVal Name="Default"></PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="HelpTag">Replace selected text with the replacement text</PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Left">205</PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="TabIndex">7</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="Top">114</PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="Width">80</PropertyVal>
  <PropertyVal Name="Super">PushButton</PropertyVal>
  <ControlIndex>7</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>PushButton</ControlClass>
  <ItemName>PushButton</ItemName>
  <PropertyVal Name="Name">btnReplaceAndFind</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="Cancel"></PropertyVal>
  <PropertyVal Name="Caption">Replace &amp;&amp; Find</PropertyVal>
  <PropertyVal Name="Default"></PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="HelpTag">Replace selected text and find next occurrence of the find text</PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Left">297</PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="TabIndex">8</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="Top">114</PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="Width">118</PropertyVal>
  <PropertyVal Name="Super">PushButton</PropertyVal>
  <ControlIndex>8</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>PushButton</ControlClass>
  <ItemName>PushButton</ItemName>
  <PropertyVal Name="Name">btnNext</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="Cancel"></PropertyVal>
  <PropertyVal Name="Caption">Next</PropertyVal>
  <PropertyVal Name="Default">True</PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="HelpTag">find next occurrence of the find text</PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Left">427</PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="TabIndex">9</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="Top">114</PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="Width">80</PropertyVal>
  <PropertyVal Name="Super">PushButton</PropertyVal>
  <ControlIndex>9</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>Label</ControlClass>
  <ItemName>Label</ItemName>
  <PropertyVal Name="Name">results</PropertyVal>
  <PropertyVal Name="Index">-2147483648</PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="Bold"></PropertyVal>
  <PropertyVal Name="DataField"></PropertyVal>
  <PropertyVal Name="DataSource"></PropertyVal>
  <PropertyVal Name="Height">20</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Italic"></PropertyVal>
  <PropertyVal Name="Left">357</PropertyVal>
  <PropertyVal Name="LockBottom"></PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="LockRight"></PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="Multiline"></PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="TabIndex">10</PropertyVal>
  <PropertyVal Name="TabPanelIndex">0</PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="Text"></PropertyVal>
  <PropertyVal Name="TextAlign">2</PropertyVal>
  <PropertyVal Name="TextColor">8947848</PropertyVal>
  <PropertyVal Name="TextFont">System</PropertyVal>
  <PropertyVal Name="TextSize">0</PropertyVal>
  <PropertyVal Name="Top">79</PropertyVal>
  <PropertyVal Name="Underline"></PropertyVal>
  <PropertyVal Name="Width">150</PropertyVal>
  <PropertyVal Name="Super">Label</PropertyVal>
  <ControlIndex>10</ControlIndex>
  <Locked>0</Locked>
 </Control>
</block>
<block type="Folder" ID="1608411760">
 <ObjName>imgs</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
</block>
<block type="Module" ID="176072794">
 <ObjName>Info</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
 <IsClass>0</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Note>
  <ItemName>1. Info</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>1. Info</NoteLine>
   <NoteLine>Note: The code is now hosted and updated here:</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>  http://code.google.com/p/custom-editfield/</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>CustomEditField version 1.6.2</NoteLine>
   <NoteLine>Well, here it is, a canvas-based, custom editfield.</NoteLine>
   <NoteLine>Enjoy.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Known Issues: </NoteLine>
   <NoteLine><Hex bytes="125">E280A2204C696E75782068617320612070726F626C656D20706F736974696F6E696E67207468652063617265742C206173204920646F6E277420686176652061206C696E757820626F782C207468697320697373756520697320756E6C696B656C7920746F20626520736F6C76656420616E7974696D6520736F6F6E2E</Hex></NoteLine>
   <NoteLine><Hex bytes="101">E280A220412062756720696E2052423230303872332E312072616973657320746865206B6579646F776E206576656E7420747769636520666F72207370656369616C20636861727320656E7465726564207573696E67206F7074696F6E202B205B6B65795D</Hex></NoteLine>
   <NoteLine><Hex bytes="169">E280A22041206275673F20696E203230303872352B2070726576656E74732074686520656469746669656C6420746F206163636F756E7420666F722074686520766572746963616C206F6666736574206F662074686520746F6F6C626172202869662070726573656E74292C207768656E20746865206175746F636F6D706C6574652073756767657374696F6E732077696E646F77206170706572612C2077696C6C20617070656172</Hex></NoteLine>
   <NoteLine>shifted up by the height of the toolbar. This is a Windows-only issue. To work around it, use the ShouldDisplaySuggestionWindowAtPos event and account for the vertical offset.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Special Thanks to:</NoteLine>
   <NoteLine>Ryan Dary, Scott Fortmann-Roe, Dr Gerard Hammond, Roger Meier, Paul Rodman, Dave Sisemore, Bobby Skinner, Thomas Tempelmann, Seth Verrinder, Dave Wooldridge</NoteLine>
   <NoteLine>And to all of you out there who bought the source, reported bugs and made suggestions!</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine><Hex bytes="20">C2A93230303920416C657820526573747265706F</Hex></NoteLine>
   <NoteLine>send comments, suggestions, fixes to alexrestrepo@mac.com</NoteLine>
   <NoteLine>Use in whatever way you like... at your own risk, no warranties! :P</NoteLine>
   <NoteLine>let me know if you find it useful.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>License:</NoteLine>
   <NoteLine>This control is licensed under the Creative Commons Attribution License. That is to say, anybody can use my work for any reason,</NoteLine>
   <NoteLine>I only ask that you give me credit where credit is due (About window or documentation).</NoteLine>
   <NoteLine>Also, if you make any changes/improvements please send them to me so I can make them available to the public.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Thank you.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Alex Restrepo</NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Note>
  <ItemName>2. Release Notes</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>2. Release Notes</NoteLine>
   <NoteLine>Note: The code is now hosted and updated here:</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>  http://code.google.com/p/custom-editfield/</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Version history (not updated any more, see above link instead)</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>1.6.2  9/5/2009</NoteLine>
   <NoteLine><Hex bytes="100">E280A2204368616E67653A20506C616365686F6C64657253656C6563746564206576656E74206E6F7720686173206120706172616D74657220666F72207768656E2074686520706C616365686F6C64657220697320646F75626C652D636C69636B65642E</Hex></NoteLine>
   <NoteLine><Hex bytes="73">E280A2204669783A20506C616365686F6C646572732063616E206E6F77206861766520626F6C642C206974616C696320616E6420756E6465726C696E652070726F706572746965732E</Hex></NoteLine>
   <NoteLine><Hex bytes="93">E280A2204669783A2044656C6574652F6261636B7370616365206B657973206E6F7720776F726B7320636F72726563746C79207768656E20746865206361726574206973206E65787420746F206120706C616365686F6C6465722E2E2E</Hex></NoteLine>
   <NoteLine><Hex bytes="112">E280A2204669783A20446F63756D656E747320776974686F757420612073796E74617820646566696E6974696F6E20617265206E6F206C6F6E676572207363616E6E656420666F722073796D626F6C732C20616C6C6F77696E6720666173746572206C6F6164696E672074696D65732E</Hex></NoteLine>
   <NoteLine><Hex bytes="76">E280A2204669783A2054686520506C616365686F6C64657253656C6563746564206576656E74206E6F7720676574732072616973656420696E2074686520636F7272656374206F726465722E</Hex></NoteLine>
   <NoteLine><Hex bytes="76">E280A2204669783A205468652076697375616C20626C6F636B2D686967686C69676874696E6720636F646520686173206265656E20696D70726F76656420756E6465722077696E646F77732E</Hex></NoteLine>
   <NoteLine><Hex bytesex></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>1.6.1  8/28/2009</NoteLine>
   <NoteLine><Hex bytes="129">E280A2204368616E67653A204345462E446F63756D656E7453796D626F6C73206E6F772072657475726E7320616E206172726179206F6620446F63756D656E7453796D626F6C2C20616C6C6F77696E67206D756C7469706C65206964656E746963616C2073796D626F6C7320696E20612073696E676C6520646F63756D656E742E</Hex></NoteLine>
   <NoteLine><Hex bytes="57">E280A2204669783A204C6F6164696E672074696D6520696D70726F766564207768656E206E6F2073796E74617820697320646566696E65642E</Hex></NoteLine>
   <NoteLine><Hex bytes="139">E280A2204669783A2048756765205365745465787420737065656420696D70726F76656D656E742C206E6F77206120313030303030206C696E652066696C65206C6F61647320696E206A75737420756E6465722032207365636F6E647320696E206D7920322E313647487A204D6163426F6F6B50726F202866697273742067656E20636F72652064756F29</Hex></NoteLine>
   <NoteLine><Hex bytes="77">E280A2204669783A20796F752063616E206E6F7720736176652066696C6573206576656E20696620746865792061726520616C7265616479206F70656E20696E20616E6F74686572206170702E</Hex></NoteLine>
   <NoteLine><Hex bytes="203">E280A2204669783A204175746F636F6D706C657465206973206E6F206C6F6E67657220747269676765726564206A757374206265666F7265206669727374206C6574746572202873686F756C64547269676765724175746F636F6D706C657465206576656E742077696C6C20706173732066616C736520666F7220746865206861734175746F636F6D706C6574654F7074696F6E7320706172616D657465722C2069662074686520637572736F72206973206A757374206265666F7265206669727374206C657474657229</Hex></NoteLine>
   <NoteLine><Hex bytes="39">E280A2204669783A207461627769647468203D2030206E6F772064656661756C747320746F2031</Hex></NoteLine>
   <NoteLine><Hex bytes="35">E280A2204669783A20537570706F727420666F7220436F6E74726F6C20417272617973</Hex></NoteLine>
   <NoteLine><Hex bytes="58">E280A2204669783A20496D70726F766564206B6579626F61726420696E7075742C207370656369616C6C7920756E6465722077696E646F77732E</Hex></NoteLine>
   <NoteLine><Hex bytes="116">E280A2204669783A20446F63756D656E747320617265206E6F7720686967686C69676874656420696E206F726465722C2069662074686520646F63756D656E74206973207363726F6C6C65642C206C696E6573206F6E2073637265656E2067657420686967686C6967687465642066697273742E</Hex></NoteLine>
   <NoteLine><Hex bytes="182">E280A2204E65773A2058636F64652D6C696B6520506C616365686F6C646572732120796F752063616E206E6F7720646566696E6520706C616365686F6C6465727320696E207468652073796E74617820646566696E6974696F6E2C207468657365206172652073696E676C6520756E6974732C206D65616E696E67207468617420746865792077696C6C20616C7761797320626520746F74616C6C7920636F6E7461696E656420696E20612073656C656374696F6E2E</Hex></NoteLine>
   <NoteLine>If clicked on, they will select themselves automatically and raise the PlaceholderSelected event. see the note on Syntax Definitions for more info.</NoteLine>
   <NoteLine><Hex bytes="93">E280A2204E65773A2058636F64652D6C696B6520636F646520626C6F636B20686967686C69676874696E672C207768656E20746865206D6F757365206973206F7665722074686520666F6C64696E67206D61726B65727320617265612E</Hex></NoteLine>
   <NoteLine><Hex bytes="26">E280A2204E65773A20526561644F6E6C792070726F7065727479</Hex></NoteLine>
   <NoteLine><Hex bytes="140">E280A2204E65773A204576656E7420426C6F636B43686172734D61746368656428626C6F636B4F70656E4368617220617320737472696E672C20626C6F636B4F70656E4F666673657420617320496E74656765722C20626C6F636B436C6F73654368617220617320737472696E672C20626C6F636B436C6F73654F666673657420617320496E746567657229</Hex></NoteLine>
   <NoteLine><Hex bytes="100">E280A2204E65773A204175746F636F6D706C6574652073756767657374696F6E732077696E646F77206E6F77206175746F20726573697A657320746F20746865207769647468206F662074686520617661696C61626C652073756767657374696F6E732E</Hex></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>1.6   2/2/2009</NoteLine>
   <NoteLine><Hex bytes="93">E280A2204669786564206175746F636F6D706C6574652062756720776869636820696E20736F6D6520636173657320776F756C6420736B6970206C65747465727320696E20746865206175746F636F6D706C6574656420776F7264732E</Hex></NoteLine>
   <NoteLine><Hex bytes="80">E280A220466978656420612062756720696E207468652073796E74617820686967686C696768746572207768656E206465616C696E67207769746820616363656E74656420636861726163746572732E</Hex></NoteLine>
   <NoteLine><Hex bytes="99">E280A22046697865642046696E642057696E646F772C2069742773206E6F206C6F6E676572206265696E672068696464656E202870726576656E74696E6720746865206170702066726F6D20636F6C6F73696E6720756E6465722077696E646F777329</Hex></NoteLine>
   <NoteLine><Hex bytes="153">E280A220416464656420612077617920746F20686967686C69676874206D756C7469706C65206368617261637465722072616E6765733A2073656520486967686C6967687443686172616374657252616E6765286D6574686F642920616E6420436C656172486967686C69676874656452616E6765734F6E546578744368616E67652870726F70657274792920696E2074686520646F63732E</Hex></NoteLine>
   <NoteLine><Hex bytes="146">E280A2204164646564205573654261636B67726F756E64436F6C6F72466F724C696E65206576656E742C20746F206368616E676520746865206261636B67726F756E6420636F6C6F72206F66206120706172746963756C6172206C696E652C207365652044656D6F57696E646F772E546573744669656C642E5573654261636B67726F756E64436F6C6F72466F724C696E65</Hex></NoteLine>
   <NoteLine><Hex bytes="51">E280A2204164646564204175746F636F6D706C6574654170706C6965735374616E64617264436173652070726F70657274792E</Hex></NoteLine>
   <NoteLine><Hex bytes="38">E280A2204164646564204C696E654E756D626572735465787453697A652070726F7065727479</Hex></NoteLine>
   <NoteLine><Hex bytes="38">E280A2204164646564204C696E654E756D6265727354657874466F6E742070726F7065727479</Hex></NoteLine>
   <NoteLine><Hex bytes="112">E280A220416464656420557365426F6F6B6D61726B49636F6E466F724C696E65206576656E742C20696620796F752077616E7420746F20757365206120637573746F6D20626F6F6B6D61726B207069637475726520696E7374656164206F66207468652064656661756C74206F6E652E</Hex></NoteLine>
   <NoteLine><Hex bytes="96">E280A220416464656420416464426F6F6B6D61726B2C20436C656172426F6F6B6D61726B202F20436C656172426F6F6B6D61726B732C20426F6F6B6D61726B4C697374206D6574686F647320746F206D616E61676520626F6F6B6D61726B732E</Hex></NoteLine>
   <NoteLine><Hex bytes="168">E280A220416464656420477574746572436C69636B6564206576656E742C2075736566756C20696E206361736520796F752077616E7420746F2073657420626F6F6B6D61726B73207768656E20746865207573657220636C69636B73206F6E20746865206C696E65206E756D626572732E205365652044656D6F57696E646F772E546573744669656C642E477574746572436C69636B656420666F7220616E206578616D706C652E</Hex></NoteLine>
   <NoteLine><Hex bytes="73">E280A22041646465642047757474657257696474682070726F70657274792C2072657475726E73207468652073697A65206F66207468652067757474657220696E20706978656C732E</Hex></NoteLine>
   <NoteLine><Hex bytes="177">E280A2204164646564205061696E7442656C6F774C696E65206576656E742C20696E206361736520796F75206E65656420746F206472617720616E797468696E672042454C4F5720612074657874206C696E652C20746865206F72646572206F66207061696E74206F7065726174696F6E73206172653A20686967686C69676874732C2073656C656374696F6E2C207061696E7442656C6F772C207061696E74206C696E652C207061696E7441626F7665</Hex></NoteLine>
   <NoteLine><Hex bytes="193">E280A2204164646564205061696E7441626F76654C696E65206576656E742C20696E206361736520796F75206E65656420746F206472617720616E797468696E672041424F56452020612074657874206C696E652C20746865206F72646572206F66207061696E74206F7065726174696F6E73206172653A20686967686C6967687452616E6765732C20746578742073656C656374696F6E2C207061696E7442656C6F772C207061696E742074657874206C696E652C207061696E7441626F7665</Hex></NoteLine>
   <NoteLine><Hex bytes="136">E280A2204164646564205061696E744F766572206576656E742C207261697365642061667465722074686520656469746669656C6420697320646F6E652064726177696E6720697473656C662C206865726520796F752063616E206472617720637573746F6D206772617068696373206F6E20746F70206F662074686520656469746669656C642E</Hex></NoteLine>
   <NoteLine><Hex bytes="102">E280A2204164646564205265696E64656E7454657874206D6574686F642C20746869732077696C6C20666F726365207265696E64656E74207468652074657874207573696E672074686520686967686C6967687420646566696E6974696F6E2072756C65732E</Hex></NoteLine>
   <NoteLine><Hex bytes="63">E280A22041646465642054657874496E736572746564286F666673657420617320696E74656765722C207465787420617320537472696E6729204576656E74</Hex></NoteLine>
   <NoteLine><Hex bytes="62">E280A2204164646564205465787452656D6F766564286F666673657420617320696E74656765722C207465787420617320537472696E6729204576656E74</Hex></NoteLine>
   <NoteLine><Hex bytes="143">E280A220416464656420486967686C696768744D61746368696E67427261636B6574734D6F64652070726F70657274792C2030206973207468652064656661756C742022636972636C6522206D6F64652C20312069732061206E65772022686967686C6967687422206D6F64652C20776869636820697320636F6D6D6F6E20696E206D6F737420656469746F72732E</Hex></NoteLine>
   <NoteLine><Hex bytes="96">E280A220416464656420427261636B6574486967686C69676874436F6C6F722070726F70657274792C206F6E6C792075736566756C2069662074686520486967686C696768744D61746368696E67427261636B6574734D6F646520697320312E</Hex></NoteLine>
   <NoteLine><Hex bytes="93">E280A220416464656420486F72697A6F6E74616C5363726F6C6C56616C75654368616E676564206576656E742C20726169736564207768656E2074686520656469746669656C64207363726F6C6C7320686F72697A6F6E74616C6C792E</Hex></NoteLine>
   <NoteLine><Hex bytes="90">E280A220416464656420566572746963616C5363726F6C6C56616C75654368616E676564206576656E74202C20726169736564207768656E2074686520656469746669656C64207363726F6C6C7320766572746963616C6C792E</Hex></NoteLine>
   <NoteLine><Hex bytes="102">E280A2204164646564205363726F6C6C56616C7565734368616E676564206576656E742C20726169736564207768656E2074686520656469746669656C64206973207363726F6C6C656420686F72697A6F6E74616C6C79206F7220766572746963616C6C792E</Hex></NoteLine>
   <NoteLine><Hex bytes="133">E280A2204164646564206120436F6E7461696E6572436F6E74726F6C207468617420636F6E7461696E7320616E20656469746669656C6420616E6420697473207363726F6C6C626172732E2049742070726F7869657320616C6C206F6620746865206576656E74732F70726F70657274696573206F662074686520656469746669656C642E</Hex></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>1.5.1   9/10/2008</NoteLine>
   <NoteLine><Hex bytes="81">E280A220666978656420756E646F42756720696E2077696E646F77732C206E6577206C696E65732028656E746572732920776572656E2774206265696E672068616E646C656420636F72726563746C792E</Hex></NoteLine>
   <NoteLine><Hex bytes="81">E280A2206669786564206D6F7573654D6F7665206576656E742C206E6F77206974277320726169736564206576657279776865726520696E7374656164206F66206A75737420746865206775747465722E</Hex></NoteLine>
   <NoteLine><Hex bytes="55">E280A22066697865642062756720736176696E67206E65772F6D6F64696669656420486967686C69676874446566696E6974696F6E732E</Hex></NoteLine>
   <NoteLine><Hex bytes="82">E280A2206669786564207363726F6C6C2070616765537465702C2069742773206E6F7720636F72726563746C792073657420746F20746865206E756D626572206F66206C696E657320646973706C61796564</Hex></NoteLine>
   <NoteLine><Hex bytes="41">E280A220666978656420647261672D7363726F6C6C20746F6F206661737420696E2077696E646F7773</Hex></NoteLine>
   <NoteLine><Hex bytes="152">E280A220666978656420627567207769746820746865206175746F636F6D706C657465206F7074696F6E732077696E646F7720746861742073686F77656420746865206F7074696F6E7320696E207468652077726F6E6720706F736974696F6E206F6E2073637265656E2C207768656E207468652077696E646F7720686164206120746F6F6C626172202877696E646F7773206F6E6C7929</Hex></NoteLine>
   <NoteLine><Hex bytes="36">E280A220616464656420646973706C617944697274794C696E65732070726F7065727479</Hex></NoteLine>
   <NoteLine><Hex bytes="58">E280A2206164646564206C696E65206265747765656E206C696E65206E756D6265727320616E642074657874207768656E207072696E74696E67</Hex></NoteLine>
   <NoteLine><Hex bytes="161">E280A2206164646564205465787453656C656374696F6E436F6C6F722070726F70657274792C2064656661756C747320746F2073797374656D20686967686C6967687420636F6C6F72202873657474696E67205465787453656C656374696F6E436F6C6F7220746F20266330303030303020616C736F2064656661756C747320697420746F207468652053797374656D20486967686C6967687420636F6C6F7229</Hex></NoteLine>
   <NoteLine><Hex bytes="87">E280A22053656C656374696F6E4368616E6765642F746578746368616E676564206576656E747320617265206E6F206C6F6E676572206669726564206D756C7469706C652074696D6573207768656E20756E646F696E67</Hex></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>1.5   7/4/2008</NoteLine>
   <NoteLine><Hex bytes="164">E280A22041646465642061206E65772022746578742073746F726167652220747970653A204D656D6F7279426C6F636B53746F72616765576964652E205768696368206973206E6F7469636561626C7920666173746572207468616E20417272617953746F726167652C207768656E2068616E646C696E6720756E69636F646520636861726163746572732E2053656520646F637320666F72206D6F726520696E666F2E</Hex></NoteLine>
   <NoteLine><Hex bytes="149">E280A2204164646564206120437573746F6D456469744669656C645072696E74657220636C6173732C2073696D696C617220746F205374796C6564546578745072696E7465722C20746F20656173696C79207072696E742074686520636F6E74656E7473206F66207468652065646974206669656C642E205365652064656D6F2070726F6A65637420666F722064657461696C732E</Hex></NoteLine>
   <NoteLine><Hex bytes="70">E280A220416464656420612066696E642F7265706C616365206469616C6F672C2073696D696C617220746F204F535827732066696E642F7265706C616365206469616C6F672E</Hex></NoteLine>
   <NoteLine><Hex bytes="149">E280A22041646465642061206E65772074616720746F2073796E74617820646566696E6974696F6E7320283C73796D626F6C733E2920746869732074616720616C6C6F77732074686520656469746669656C6420746F20747261636B206D6574686F642F636C61737320286F72206F7468657229206465636C61726174696F6E7320616E64207468656972206C6F636174696F6E2E</Hex></NoteLine>
   <NoteLine>You can access the symbols using one of these: CustomEditField.CaretSymbol, CustomEditField.DocumentSymbols or CustomEditField.SymbolAtLine. See docs, syntax definitions and demo project for more info.</NoteLine>
   <NoteLine><Hex bytes="91">E280A22046697865642062756720746861742070726576656E746564206175746F636F6D706C6574656420626C6F636B2D656E6420776F7264732066726F6D206265696E672070726F7065726C7920756E2D696E64656E7465642E</Hex></NoteLine>
   <NoteLine><Hex bytes="62">E280A220496D70726F766564202861206C6F742129207370656564206D61746368696E67206F70656E696E672F636C6F73696E6720627261636B6574732E</Hex></NoteLine>
   <NoteLine><Hex bytes="118">E280A2204F7074696D697A65642064726177696E6720636F64652C206E6F7720747970696E67206F6E20746865206C617374206C696E65206F662061206C6F6E6720746578742073686F756C646E277420626520616E7920736C6F776572207468616E206F6E20616E79206F74686572206C696E652E</Hex></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>1.4.1   6/6/2008</NoteLine>
   <NoteLine><Hex bytes="67">E280A2204669786564206372617368207768656E206372656174696E6720656D707479206669656C6473207573696E67204D656D6F7279426C6F636B53746F72616765</Hex></NoteLine>
   <NoteLine><Hex bytes="150">E280A2204669786564206372617368207768656E20636C6F73696E6720616E20696E7374616E6365206F662074686520456469744669656C64207768696C652069747320636F6E74656E74732077657265206265696E6720686967686C6967687465642C2073746F7070656420686967686C69676874696E6720746872656164207768656E20636C6F73696E6720636F6E74726F6C2E</Hex></NoteLine>
   <NoteLine><Hex bytes="86">E280A2204164646564206D6574686F6420746F67676C654C696E65466F6C64286C696E65496E64657820617320696E74656765722920746F20746F67676C652074686520666F6C64696E67206F662061206C696E652E</Hex></NoteLine>
   <NoteLine><Hex bytes="59">E280A2204164646564206D6574686F6420666F6C64416C6C4C696E657320746F2E2E2E2077656C6C2E2E2E20666F6C6420616C6C206C696E65732E</Hex></NoteLine>
   <NoteLine><Hex bytes="34">E280A2204164646564206D6574686F6420756E666F6C64416C6C4C696E65732E2E2E</Hex></NoteLine>
   <NoteLine><Hex bytes="100">E280A2204164646564206D6574686F6420666F6C64426C6F636B41744361726574506F732C20776869636820666F6C64732074686520656E636C6F73696E6720626C6F636B207768657265207468652063617265742069732061742C20696620616E792E</Hex></NoteLine>
   <NoteLine><Hex bytes="269">E280A22041646465642070726F706572747920646973706C617952696768744D617267696E4D61726B65722C207468617420646973706C61797320612073656D692D7472616E73706172656E74206C696E65206174207468652072696768742065646765206F6620746865206669656C642C20616C6F6E672077697468207468652070726F70657274792072696768746D617267696E4174506978656C20776869636820646566696E657320746865206C6F636174696F6E2028696E20706978656C7329206F6620746865206C696E652E204966207468652076616C756520697320302C206974277320647261776E206174207468652064656661756C74207072696E7465722077696474682E</Hex></NoteLine>
   <NoteLine><Hex bytes="145">E280A22041646465642061202253796E74617820636F6C6F7273222077696E646F7720746F207468652064656D6F2070726F6A6563742C2069742073686F777320686F7720746F20726561642074686520646966666572656E7420636F6E746578747320696E206120646566696E6974696F6E2C20616E6420686F7720746F2073657420746865697220636F6C6F72732E</Hex></NoteLine>
   <NoteLine><Hex bytes="99">E280A220416464656420746865202253796E74617820446566696E6974696F6E7322206E6F74652C206120717569636B206D616E75616C206F6E20686F7720746F20777269746520796F7572206F776E2073796E74617820646566696E6974696F6E2E</Hex></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>1.4    6/6/2008</NoteLine>
   <NoteLine><Hex bytes="158">E280A22046697865642070726F626C656D207769746820736F6D6520616363656E74656420636861726163746572732028C3B62CC3B32E2E2E29207468617420636F756C646E27742062652073656C6563746564207768656E207573696E67204D656D6F7279426C6F636B53746F7261676520616E64207768656E20696E76697369626C65206368617261637465727320776572652076697369626C652E</Hex></NoteLine>
   <NoteLine><Hex bytes="93">E280A220486967686C6967687420436F6E74657874732063616E206E6F7720686176652061206261636B67726F756E6420636F6C6F7220666F7220746F6B656E7320226261636B67726F756E64436F6C6F72203D2027232E2E2E2E2722</Hex></NoteLine>
   <NoteLine><Hex bytes="153">E280A220596F752063616E206E6F7720656173696C7920616464203C20616E64203E206173206D61746368696E6720627261636B6574732C2073696D706C7920616464207468656D20746F2074686520424C4F434B5F4F50454E5F434841525320616E6420424C4F434B5F434C4F53455F434841525320636F6E7374616E747320726573706563746976656C79202873656520646F6373292E</Hex></NoteLine>
   <NoteLine><Hex bytes="73">E280A2204164646564204D6574686F6420746F20636C65617220616C6C206C696E652069636F6E732028437573746F6D456469744669656C642E436C6561724C696E6549636F6E7329</Hex></NoteLine>
   <NoteLine><Hex bytes="190">E280A220556E646F206E6F7720776F726B7320696E2022626C6F636B73222C2062792064656661756C742C20616C6C206576656E7473206F66207468652073616D6520747970652028747970696E672C2064656C6574696E67292074686174206F636375722077697468696E2033207365636F6E64732C2061726520756E646F2F7265646F20696E206F6E6520737465702C20696E7374656164206F6620627920636861722E2053656520646F637320666F72206D6F726520696E666F2E</Hex></NoteLine>
   <NoteLine><Hex bytes="176">E280A220416464656420737570706F727420666F722022636F646520626C6F636B732220696E2074686520646566696E6974696F6E7320786D6C732074686174206175746F6D61746963616C6C7920696E64656E742074686520636F64652077697468696E207468656D2C207468657920616C736F20646566696E65206C696E6520666F6C64696E67732E283C626C6F636B53746172744D61726B65723E2F3C626C6F636B456E644D61726B65723E29</Hex></NoteLine>
   <NoteLine><Hex bytes="111">E280A22046697865642055544620737570706F72742C2075746628382F313629206E6F7720776F726B7320636F72726563746C7920286966205573654D656D6F7279426C6F636B53746F72616765203D2066616C7365292C206F72206174206C656173742069742073686F756C6421</Hex></NoteLine>
   <NoteLine><Hex bytes="114">E280A220486967686C6967687420436F6E74657874732063616E206E6F772068617665206120626F6C642C206974616C696320616E6420756E6465726C696E6520666F7220746F6B656E732028626F6C642F6974616C69632F756E6465726C696E65203D2022747275652F66616C73652229</Hex></NoteLine>
   <NoteLine><Hex bytes="115">E280A220416464656420636F6E76656E69656E6365206D6574686F6420746F207361766520636F6E74656E747320746F20612066696C653A205361766528746F46696C6520617320666F6C6465724974656D2C20656E636F64696E672061732074657874656E636F64696E67203D206E696C29</Hex></NoteLine>
   <NoteLine><Hex bytes="72">E280A2204164646564206C696E6520666F6C64696E677321212120746865736520617265207265636F676E697A65642062792074686520636F646520626C6F636B7320746167732E</Hex></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>1.3    5/16/2008</NoteLine>
   <NoteLine><Hex bytes="125">E280A2204669786564206120627567207769746820746865207661726961626C65207461622077696474682073657474696E672C206E6F772C206E6577206C696E6573206F72206D6F646966696564206C696E657320776974682074616273206B6565702074686569722074616257696474682073657474696E67732E</Hex></NoteLine>
   <NoteLine><Hex bytes="104">E280A220466978656420612062756720696E207468652053686F756C64547269676765724175746F636F6D706C657465206576656E742C20746865206861734175746F636F6D706C6574654F7074696F6E7320697320636F72726563746C7920736574206E6F772E</Hex></NoteLine>
   <NoteLine><Hex bytes="141">E280A220466978656420736D616C6C20627567207768656E2061667465722073656C656374696E67207465787420616E6420636C69636B696E67206F6E20746865206669656C6420616761696E2C20746865206669656C6420776F756C642068616E646C652074686520636C69636B2D61667465722D64726167206173206120646F75626C6520636C69636B2E</Hex></NoteLine>
   <NoteLine><Hex bytes="64">E280A2204F7074696F6E2D64656C6574652F6261636B73706163652C206E6F772064656C65746573207468652070726576696F75732F6E65787420776F72642E</Hex></NoteLine>
   <NoteLine><Hex bytes="98">E280A22056697369626C6520737061636520636861726163746572206973206E6F7720646973706C6179656420636F727265636C74792077697468207468652073616D6520776964746820617320746865207370616365206368617261637465722E</Hex></NoteLine>
   <NoteLine><Hex bytes="136">E280A22054686520696E73657274696F6E20706F696E742063616E206E6F772068617665203220646966666572656E74207365747468696E67732C206E6F726D616C202873696E676C6520706978656C2920616E6420746869636B20283220706978656C73292028546869636B496E73657274696F6E506F696E7420617320626F6F6C65616E292E</Hex></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>1.2    5/16/2008</NoteLine>
   <NoteLine><Hex bytes="103">E280A22046697865642061206372617368207768656E20746865206175746F636F6D706C6574652077696E646F77207761732061637469766520616E6420796F75207469706564206120776F72642074686174207761736E277420696E20746865206C6973742E</Hex></NoteLine>
   <NoteLine><Hex bytes="85">E280A22053697A65206F662074686520746162206368617261637465722063616E206E6F77206265207661726961626C652C20736574207769746820437573746F6D456469744669656C642E54616257696474682E</Hex></NoteLine>
   <NoteLine><Hex bytes="60">E280A2205061676555702C2050616765446F776E2C20486F6D6520616E6420456E64206E6F77207363726F6C6C2074686520656469746669656C642E</Hex></NoteLine>
   <NoteLine><Hex bytes="93">E280A2204D6F76696E67207570206F6E20746865206669727374206C696E652C206F7220646F776E206F6E20746865206C6173742C206E6F77206A756D707320746F207468652073746172742F656E64206F6620746865206C696E652E</Hex></NoteLine>
   <NoteLine><Hex bytes="59">E280A220436F6E737472756374436F6E7465787475616C4D656E75206973206E6F7720666F7277617264656420617070726F7072696174656C792E</Hex></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>1.1    5/15/2008</NoteLine>
   <NoteLine><Hex bytes="83">E280A22056697369626C652074616220636861726163746572206973206E6F7720646973706C617965642077697468207468652073616D65207769647468206173207468652074616220636861726163746572</Hex></NoteLine>
   <NoteLine><Hex bytes="160">E280A220466978656420627567207768656E20636C69636B696E6720696E20746865207370616365206265747765656E207468652067757474657220616E6420746865207465787420286D617267696E2920696E7374656164206F66206A756D70696E6720746F2074686520656E64206F66206C696E652C206974206E6F7720676F657320746F207468652073746172742C2061732069742073686F756C642E</Hex></NoteLine>
   <NoteLine><Hex bytes="131">E280A2204164646564207468652053686F756C64547269676765724175746F636F6D706C657465206576656E742C20736F20746865206175746F636F6D706C657465206D656368616E69736D2063616E206265207472696767657265642062792074686520757365722C207573696E6720616E79206B657920746865792077616E742E</Hex></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>1.0    5/14/2008</NoteLine>
   <NoteLine><Hex bytes="67">E280A2204D6164652074686520736F7572636520636F6D70617469626C6520776974682052422076657273696F6E73206561726C696572207468616E20323030387231</Hex></NoteLine>
   <NoteLine><Hex bytes="24">E280A2204669727374207075626C69632072656C65617365</Hex></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>0.9    4/30/2008</NoteLine>
   <NoteLine><Hex bytes="51">E280A22046697865642070726F626C656D20706F736974696F6E696E672074686520636172657420696E2077696E646F77732E</Hex></NoteLine>
   <NoteLine><Hex bytes="98">E280A2204D61646520756E646F2073797374656D20617661696C61626C652065787465726E616C6C792C20796F752063616E206569746865722069676E6F72652069742C206F7220686F6F6B20697420746F20796F7572206F776E206D656E75732E</Hex></NoteLine>
   <NoteLine><Hex bytes="48">E280A220447261672F64726F70206E6F7720776F726B7320636F72726563746C7920756E6465722077696E646F77732E</Hex></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>0.8    4/29/2008</NoteLine>
   <NoteLine><Hex bytes="19">E280A220696E697469616C2072656C65617365</Hex></NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Note>
  <ItemName>3. Docs</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>3. Docs</NoteLine>
   <NoteLine>********************************************************************************************************************************************** Global Settings:</NoteLine>
   <NoteLine>CEF_VERSION: the current version of the editfield, in case you need it...</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>TextStorageType: determines the kind of structure used internally by the editfield to store text, the possible values are:</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>STORAGE_MEMORYBLOCK = 0</NoteLine>
   <NoteLine>This is the fastest storage Method, uses a MemoryBlock to store the text... however, does NOT support multi-byte characters.</NoteLine>
   <NoteLine>Encodings: this method will re-encode the text to either macroman, or windowsansi.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>STORAGE_ARRAY = 1</NoteLine>
   <NoteLine>This is the slowest method, uses an array to store the characters in the text. This method supports utf8 and utf16 characters.</NoteLine>
   <NoteLine>Encodings: same as input, utf8 if nil.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>STORAGE_WIDEMEMORYBLOCK = 2</NoteLine>
   <NoteLine>This method is slower than STORAGE_MEMORYBLOCK but faster than STORAGE_ARRAY, it uses a *wide* memory block to store the text, </NoteLine>
   <NoteLine>which means that it will use 4bytes per character, that is, it will use 4 times the memory that STORAGE_MEMORYBLOCK uses (2bytes per char in windows). It is however </NoteLine>
   <NoteLine>noticeably faster than STORAGE_ARRAY, and supports utf characters.</NoteLine>
   <NoteLine>Encodings: UTF16... all text is stored as UTF16, and is returned as UTF16.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>UseOldRenderer:</NoteLine>
   <NoteLine>This Boolean value forces the field to draw its contents using QuickDraw instead of Quartz (this setting is only meaningful under OSX).</NoteLine>
   <NoteLine>setting this flag to true yields better performance, if you don't mind uglier results :)</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>********************************************************************************************************************************************** CustomEditFieldPrinter</NoteLine>
   <NoteLine>This class allows you to easily print the contents of the editfield.</NoteLine>
   <NoteLine>To obtain a CustomEditFieldPrinter object, simply call CustomEditField.CustomEditFieldPrinter(g as Graphics) and pass the graphics context where you want to draw onto,</NoteLine>
   <NoteLine>you'll receive a fully configured CustomEditFieldPrinter object.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>This class has a single method:</NoteLine>
   <NoteLine>DrawBlock(x as integer, y as integer, width as integer, height as integer, lineRange as dataRange, wrap as boolean = false, lineNumbers as boolean = false) As integer</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>it allows you to draw a "block" of text, to the specified rect (X,Y, Width, Height). You'll need to specify the range of lines to print, using a DataRange Object. Finally, 2 optional</NoteLine>
   <NoteLine>parameters, wrap, which defaults to false, sets word wrap on or off, and lineNumbers allows you to print the linenumber to the left of the printed line.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>It returns the last painted text line that was drawn into the specified rect, with this value, you can set a new print range, and call DrawBlock again.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>For more information, please look at the Demo project in DemoWindow.Print.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>********************************************************************************************************************************************** CustomEditField</NoteLine>
   <NoteLine>********************************************************************************************************************************************** Undo:</NoteLine>
   <NoteLine>The undo system has a global setting: CustomEditField.UNDO_EVT_BLOCK_SECS, you can set this to any value, and what it does is records </NoteLine>
   <NoteLine>all actions of the same type up to this value in secods, all these actions will be undo/redo in a single step. If the action changes (from typing to deleting or the other way around)</NoteLine>
   <NoteLine>all the actions up to that point (under UNDO_EVT_BLOCK_SECS) are recorded in a single block.</NoteLine>
   <NoteLine>Setting it to 0 uses the original behavior (1 char at the time)</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>********************************************************************************************************************************************** Block chars:</NoteLine>
   <NoteLine>There are 2 constants that define the characters that define a "block"</NoteLine>
   <NoteLine>BLOCK_OPEN_CHARS = "([{"</NoteLine>
   <NoteLine>BLOCK_CLOSE_CHARS = ")]}"</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>you can add more chars to these constants to define your own blocks, as long as their positions in the constant string match, and as long as they're a single char.</NoteLine>
   <NoteLine>for example if you wanted '+' and '-' to define a block, modify the constants like so:</NoteLine>
   <NoteLine>BLOCK_OPEN_CHARS = "([{+"</NoteLine>
   <NoteLine>BLOCK_CLOSE_CHARS = ")]}-"</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>********************************************************************************************************************************************** Events:</NoteLine>
   <NoteLine>AutocompleteOptionsForPrefix(prefix as string) as AutocompleteOptions</NoteLine>
   <NoteLine>Basically, you can use your own autocomplete engine here, prefix is the word for which you need to provide the autocomplete options.</NoteLine>
   <NoteLine>You need to set the following properties in the AutocompleteOptions object you wish to return:</NoteLine>
   <NoteLine>prefix as string: the word for which you will be providing the options.</NoteLine>
   <NoteLine>options() as string: the Autocomplete options for the prefix</NoteLine>
   <NoteLine>longestCommonPrefix as string: the longest common prefix of all the available options.</NoteLine>
   <NoteLine>The project includes an autocomplete engine based on a patricia tree, check the included demo project to see how it works.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>HighlightingComplete</NoteLine>
   <NoteLine>Raised when the highlighting Thread has finished Highlighting</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>LineCountChanged(newLineCount as integer)</NoteLine>
   <NoteLine>The number of lines has changed. Useful if you're handling your own scrollbars.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>MaxLineLengthChanged(maxLineLengthInPixels as integer)</NoteLine>
   <NoteLine>There's a new longest line in the field. Useful when handling your own Scrollbars.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>SelChanged(line as integer, column as integer, length as integer)</NoteLine>
   <NoteLine>Same as SelChanged for a regular editfield, however, this event gives you the curret line number, column number and selection lenght.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>ShouldTriggerAutocomplete(Key as string, hasAutocompleteOptions as boolean) as Boolean</NoteLine>
   <NoteLine>key is the current pressed key, hasAutocompleteOptions is true if there any autocompleteOptions for the word where the caret is.</NoteLine>
   <NoteLine>Return true if you want to trigger the autoComplete mechanism</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>UseBackgroundColorForLine(lineIndex as integer, byref lineBackgroundColor as color) As boolean</NoteLine>
   <NoteLine>Return true to use a custom background color for the specified line, set the lineBackgroundColor parameter to the desired color.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Event UseBookmarkIconForLine(lineIndex as integer) As Picture</NoteLine>
   <NoteLine>Raised when a bookmarked line is about to be drawn, return a Picture to use that picture as the bookmark indicator, or return nil to use the default.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Event GutterClicked(onLine as integer, x as integer, y as integer)</NoteLine>
   <NoteLine>Raised when the user clicks on the gutter, x and y are the local coordinates of the click</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Event PaintBelowLine(lineIndex as integer, g as graphics, x as integer, y as integer, w as integer, h as integer)</NoteLine>
   <NoteLine>Raised before painting the textline with index "lineIndex", g is the graphics context for the textline, x, y, w, h the rect in the editfield where the textline will be drawn.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Event PaintAboveLine(lineIndex as integer, g as graphics, x as integer, y as integer, w as integer, h as integer)</NoteLine>
   <NoteLine>Raised after painting the textline with index "lineIndex", g is the graphics context for the textline, x, y, w, h the rect in the editfield where the textline will be drawn.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Event PaintOver(g as Graphics)</NoteLine>
   <NoteLine>Raised after the editfield is done drawing itself, in case you need to do Custom drawing on top of the editfield.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Event PlaceholderSelected(placeholderLabel as String, lineIndex as integer, line as textLine, placeholder as textPlaceholder, doubleClick as Boolean)</NoteLine>
   <NoteLine>Rasied when a placeholder is selected, either clicked on, or using the keyboard.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Event TextInserted(offset as integer, text as String)</NoteLine>
   <NoteLine>Raised after text is inserted, offset is the character position where "text" was inserted</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Event TextRemoved(offset as integer, text as String)</NoteLine>
   <NoteLine>Raised after text is removed, offset is the character position from where "text" was removed</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Event HorizontalScrollValueChanged()</NoteLine>
   <NoteLine>Raised when the editfield changes its horizontal scroll value</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Event VerticalScrollValueChanged()</NoteLine>
   <NoteLine>Raised when the editfield changes its vertical scroll value</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Event ScrollValuesChanged()</NoteLine>
   <NoteLine>Raised when the editfield changes any of its scroll values.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Event ShouldDisplaySuggestionWindowAtPos(byref X as Integer, byref Y as Integer) As Boolean</NoteLine>
   <NoteLine>Raised when the autocomplete suggestion window is about to appear, you can modify the x,y values of where you want the window to appear</NoteLine>
   <NoteLine>Return true to use the new values.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>********************************************************************************************************************************************** Methods:</NoteLine>
   <NoteLine>CanUndo as Boolean</NoteLine>
   <NoteLine>Returns true if there are undo steps available.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>CaretSymbol as DocumentSymbol</NoteLine>
   <NoteLine>Returns the document symbol for the current line.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>CanRedo as Boolean</NoteLine>
   <NoteLine>Returns true if there are redo steps available.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>CharPosAtLineNum(lineNumber as integer) as integer</NoteLine>
   <NoteLine>Returns the index of the first character of the given line number, the first character is 0.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>CharPosAtXY(X as integer, Y as integer) as integer</NoteLine>
   <NoteLine>Returns the index of the character at the given X, Y coordinates.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>ClearLineIcons</NoteLine>
   <NoteLine>Clears all the line icons.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Copy</NoteLine>
   <NoteLine>Copies the selected text to the clipboard.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>CustomEditFieldPrinter(printerGraphics as graphics) as CustomEditFieldPrinter</NoteLine>
   <NoteLine>Returns a CustomEditFieldPrinter object, ready to be used for printing or drawing.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>DocumentSymbols as DocumentSymbol()</NoteLine>
   <NoteLine>Returns an array of all the Document Symbols in the current document.</NoteLine>
   <NoteLine>You'll need to sort them by offset if you need them in order.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Find(what as string, ignoreCase as boolean, wrap as boolean, redraw as boolean = true, startPos as integer = -1) as integer</NoteLine>
   <NoteLine>Finds the "what" string in the editfield, ignoreCase, wrap determines if the search should start again from the begining of the document, </NoteLine>
   <NoteLine>redraw redraws the editfield, startPos is the estarting search position, if -1, the search starts at the caret position.</NoteLine>
   <NoteLine>Returns the location of the found string, -1 if not found.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>FoldAllLines</NoteLine>
   <NoteLine>Folds all foldable lines.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>FoldBlockAtCaretPos</NoteLine>
   <NoteLine>Folds the enclosing block where the caret is at.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>GetLine(index as integer) as string</NoteLine>
   <NoteLine>Returns the text contained in the given line.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>HighlightCharacterRange(offset as integer, length as integer, withColor as color, rounded as boolean = false)</NoteLine>
   <NoteLine>Highlights the specified character range, with the given color. The optional rounded parameter allows for a rounded-rect selection.</NoteLine>
   <NoteLine>If the ClearHighlightedRangesOnTextChange property is true, all highlighted characters will be cleared when the text changes, if not, you are responsible for keeping the highlighted characters in sync.</NoteLine>
   <NoteLine>Adding a character range over a previous one will merge both ranges, unless they have different colors, in which case the old one is splitted where they overlap.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Insert(offset as integer, text as string)</NoteLine>
   <NoteLine>Inserts the given text at the given index (offset). This method is used internally by the control, and externally by the undo mechanism, you shouldn't use it direclty, use instead selstart and seltext.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>InvalidateAllLines</NoteLine>
   <NoteLine>Marks all the visible lines to be re-drawn as soon as possible.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>InvalidateLine(index as integer)</NoteLine>
   <NoteLine>Marks the line at index to be re-drawn as soon as possible.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>LineCount as integer</NoteLine>
   <NoteLine>Returns the number of text lines in the field.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>LineIcon(index as integer) as picture / LineIcon(index as integer, assigns value as picture)</NoteLine>
   <NoteLine>Allows you to get and set an icon for the line at index, the icon is displayed only if the "display line numbers" option is active, since icons are drown on top of the line number.</NoteLine>
   <NoteLine>Setting the lineIcon to nil clears the icon.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>LineNumAtCharPos(offset as integer) as integer</NoteLine>
   <NoteLine>Returns the line number where the character at index 'offset' is. The first line is line 0, line 0 is displayed as line 1 on screen.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Paste</NoteLine>
   <NoteLine>Pastes whatever text is in the clipboard into the EditField.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Redo</NoteLine>
   <NoteLine>Redoes the last undone step.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Redraw</NoteLine>
   <NoteLine>Redraws the whole control.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>ReHighlight</NoteLine>
   <NoteLine>Rehighlights the whole document.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Remove(offset as integer, length as integer, updateCaret as boolean = true)</NoteLine>
   <NoteLine>Removes 'length' characters from the editfield, starting at index 'offset'. updateCaret will move the the caret to the left by 'lenght' characters, if true.</NoteLine>
   <NoteLine>This method is used internally by the control, and externally by the undo mechanism, you shouldn't use it direclty, use instead selstart and seltext.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Replace(offset as integer, length as integer, text as string)</NoteLine>
   <NoteLine>Replaces 'lenght' characters with 'text' starting at index 'offset'.</NoteLine>
   <NoteLine>This method is used internally by the control, and externally by the undo mechanism, you shouldn't use it direclty, use instead selstart and seltext.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>ResetUndo</NoteLine>
   <NoteLine>Clears the undo/redo stacks.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Save(toFile as folderItem, encoding as textencoding = nil)</NoteLine>
   <NoteLine>Save(toFile as folderItem, fileType as string = "Text", encoding as textencoding = nil)</NoteLine>
   <NoteLine>Saves the contents of the editfield to the specified file, if encoding is nil, the encoding of the text will be used, if not, the provided encoding will be used instead.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>SelectAll</NoteLine>
   <NoteLine>What can I say....</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>SelectLine(lineNumber as integer)</NoteLine>
   <NoteLine>Selects the given line.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>SelectNextPlaceholder</NoteLine>
   <NoteLine>Selects the next placeholder in the current document.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>SetScrollbars(horizontal as scrollbar, vertical as scrollbar)</NoteLine>
   <NoteLine>Use this method to set the scrollbars for the control.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>SymbolAtLine(index as integer) as DocumentSymbol</NoteLine>
   <NoteLine>Returns the DocumentSymbol for the given line, nil if none.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>SymbolCount as Integer</NoteLine>
   <NoteLine>Returns the number of symbols in the document.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>ToggleLineFold(lineIndex as integer)</NoteLine>
   <NoteLine>Toggles the folding of the given line.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Undo</NoteLine>
   <NoteLine>Undoes the latest modification to the text.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>UnfoldAllLines</NoteLine>
   <NoteLine>Unfolds all folded lines.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>XYAtCharPos(charPos as integer, byref X as integer, byref Y as integer)</NoteLine>
   <NoteLine>Returns the X,Y onscreen coordinates of the given character at index 'charPos'</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>********************************************************************************************************************************************** Properties:</NoteLine>
   <NoteLine>AutoCloseBrackets as Boolean: </NoteLine>
   <NoteLine>Automatically closes any (,[,{ whenever you type one.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>AutoIndentNewLines as Boolean:</NoteLine>
   <NoteLine>Automatically indents new lines to match the indentation of the previous line.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>BackColor as Color:</NoteLine>
   <NoteLine>Background color of the field.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Border as Boolean:</NoteLine>
   <NoteLine>Displays a border around the field.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>BorderColor as Color.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>CaretColor as Color.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>CaretPos as Integer:</NoteLine>
   <NoteLine>Sets/gets the position of the caret. when selLength = 0, caretPos and selStart are the same.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>ClearHighlightedRangesOnTextChange as Boolean</NoteLine>
   <NoteLine>If true all highlighted character ranges will be cleared when the text is changed, and before the TextChanged event is raised. You can re-calculate ranges in the textChanged event</NoteLine>
   <NoteLine>and add them to the field, these will be redrawn on the next update which should be after the TextChanged event is handled.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>DirtyLinesColor As color</NoteLine>
   <NoteLine>DisplayDirtyLines as Boolean</NoteLine>
   <NoteLine>Shows modified/unsaved lines</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>DisplayInvisibleCharacters as Boolean.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>DisplayLineNumbers as Boolean.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>DisplayRightMarginMarker as Boolean</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>EnableAutocomplete as Boolean.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>GutterBackgroundColor as Color.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>GutterSeparationLineColor as Color.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>GutterWidth as integer. Returns the  width size in pixels of the gutter.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>HighlightBlocksOnMouseOverGutter as Boolean</NoteLine>
   <NoteLine>Turns on/off visual highlighting of code blocks when the mouse cursor is over the gutter</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>HighlightMatchingBrackets as Boolean.</NoteLine>
   <NoteLine>Highlights opening/closing brackets when you type them.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>LeftMarginOffset as Integer</NoteLine>
   <NoteLine>Separation in pixels between the left edge of the control and the text</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>LineNumbersColor as Color.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>MaxVisibleLines as Integer:</NoteLine>
   <NoteLine>Returns the maximum number of visible lines.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>ReadOnly as Boolean</NoteLine>
   <NoteLine>Makes the editfield editable or read-only</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>RightMarginAtPixel as integer</NoteLine>
   <NoteLine>Sets the location in pixels where the right margin marker is drawn. If set to 0, it will default to the defaul width for the default PrinterSetup.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>ScrollPosition as integer:</NoteLine>
   <NoteLine>Sets/Gets the index of the first visible line in the field. (verticall scroll)</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>ScrollPositionX as integer:</NoteLine>
   <NoteLine>Sets/Gets the horizontal scroll position, in pixels.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>SelLength as integer:</NoteLine>
   <NoteLine>Lenght of the currently selected text</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>SelStart as integer:</NoteLine>
   <NoteLine>Starting index of the current selection.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>SelText as String:</NoteLine>
   <NoteLine>Gets the currently selected text, replaces the currently selected text.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>SyntaxDefinition as HighlightDefinition</NoteLine>
   <NoteLine>Syntax Highlight Definition used to highlight the contents of the editfield. If the definition is nil, the default text color is used to display the text.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>TabWidth as integer:</NoteLine>
   <NoteLine>Gets/Sets the width (in spaces) of the Tab Character</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Text as String:</NoteLine>
   <NoteLine>Gets/Sets the text for the field.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>TextColor as Color:</NoteLine>
   <NoteLine>This is the default text color, used only when the syntaxDefinition is nil.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>TextFont as String:</NoteLine>
   <NoteLine>The font used to display the text.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>TextHeight as Integer:</NoteLine>
   <NoteLine>Returns the height of the text (line height)</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>TextLength as Integer:</NoteLine>
   <NoteLine>Returns the lenght of the text in the field.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>TextSelectionColor as Color</NoteLine>
   <NoteLine>Gets/sets the color to use for text selection. if set to &amp;c000000 the OS default color is used.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>TextSize as Integer:</NoteLine>
   <NoteLine>The text size used to display text.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>ThickInsertionPoint as Boolean:</NoteLine>
   <NoteLine>Determines wether the insertion point's width is 1 or 2 pixels</NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Note>
  <ItemName>4. Syntax Definitions</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>4. Syntax Definitions</NoteLine>
   <NoteLine>Quick and dirty guide on how to write a syntax definition.</NoteLine>
   <NoteLine>If you want, send me your definitions and I'll make them available on my website.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Basic structure:</NoteLine>
   <NoteLine>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</NoteLine>
   <NoteLine>    &lt;!--</NoteLine>
   <NoteLine>        Version 1.0 are the files used by my previous SyntaxHighlightEditField, which are compatible with this EditField.</NoteLine>
   <NoteLine>        Version 1.1 adds some extensions, used by this editfield and are not understood by the previous one.</NoteLine>
   <NoteLine>    --&gt;</NoteLine>
   <NoteLine>    &lt;highlightDefinition version="1.1"&gt;</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>    &lt;!-- name for this definition, available as HighlightDefinitionInstance.name --&gt;</NoteLine>
   <NoteLine>    &lt;name&gt;Definition Name&lt;/name&gt;</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>    &lt;!--</NoteLine>
   <NoteLine>        Code Block definitions/line folding definitions</NoteLine>
   <NoteLine>        &lt;blockStartMarker&gt; defines the start of a code block, that can be folded, the attribute "indent" gives the number of indentations</NoteLine>
   <NoteLine>        that will be added to the a new line of text after the line that opens the block. for example, in the example below, the blockStartMarker</NoteLine>
   <NoteLine>        defines a C-style block:</NoteLine>
   <NoteLine>        {</NoteLine>
   <NoteLine>            and after hitting enter, all new lines below the opening line, will be indented "indent" times.</NoteLine>
   <NoteLine>        }</NoteLine>
   <NoteLine>        this example also defines a multi-line comment as a block:</NoteLine>
   <NoteLine>        /*</NoteLine>
   <NoteLine>        */</NoteLine>
   <NoteLine>    --&gt;</NoteLine>
   <NoteLine>    &lt;blockStartMarker indent="1"&gt;\{\s*(?:$|//|/\*)|\s*/\*&lt;/blockStartMarker&gt;</NoteLine>
   <NoteLine>    &lt;blockEndMarker&gt;^\s*\}|\s*\*/&lt;/blockEndMarker&gt;</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>    &lt;!--</NoteLine>
   <NoteLine>        Symbols</NoteLine>
   <NoteLine>        This block defines the symbols to bookmark by the editfield</NoteLine>
   <NoteLine>        In this Example, we define a "Class" and "Method" symbols.</NoteLine>
   <NoteLine>        These will be "bookmarked" and can be accessed using documentSymbols, CaretSymbol, or SymbolAtLine</NoteLine>
   <NoteLine>    --&gt;</NoteLine>
   <NoteLine>    &lt;symbols&gt;</NoteLine>
   <NoteLine>        &lt;symbol type="Class"&gt;</NoteLine>
   <NoteLine>                &lt;entryRegEx&gt;^[ \t]*((?:public|private|protected)?[ \t]*class[^{]+)&lt;/entryRegEx&gt;</NoteLine>
   <NoteLine>        &lt;/symbol&gt;</NoteLine>
   <NoteLine>        &lt;symbol type="Method"&gt;</NoteLine>
   <NoteLine>                &lt;entryRegEx&gt;((?:public|private|protected)[ \t]+(?:(?:abstract|static|final|synchronized|native|strictfp)[ \t]+)*(?:[A-Za-z0-9_\-\.&amp;lt;&amp;gt;]+(?:\[\])?[ \t]+)?[A-Za-z0-9_\-]+[ \t]*\([^\)]*\)[ \t]*(?:\s*throws[ \t]*[A-Za-z0-9_\-, \t\.]+)?)\s*(?=\{?)&lt;/entryRegEx&gt;</NoteLine>
   <NoteLine>        &lt;/symbol&gt;</NoteLine>
   <NoteLine>    &lt;/symbols&gt;</NoteLine>
   <NoteLine>&#32;&#32;&#32;&#32;</NoteLine>
   <NoteLine>    &lt;!--</NoteLine>
   <NoteLine>        Placeholders</NoteLine>
   <NoteLine>        This tag defines what text will be turned into a placeholder by the editfield.</NoteLine>
   <NoteLine>        In this Example, the text &lt;#placeholder#&gt; will turn into a round rect with the text "placeholder" in it.       </NoteLine>
   <NoteLine>        IMPORTANT: the RegEx contained here will be used to match the whole text needed to be turrned into placeholder, and the first subgroup will be used as the placeholder label. </NoteLine>
   <NoteLine>    --&gt;</NoteLine>
   <NoteLine>    &lt;placeholders highlightColor="#000000" backgroundColor="#e9effa"&gt;&amp;lt;#(.+?)#&amp;gt;&lt;/placeholders&gt;</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>    &lt;!-- Main document settings, defaultcolor is the color used by all text that is not highlighted --&gt;</NoteLine>
   <NoteLine>    &lt;contexts defaultColor="#0" caseSensitive="yes"&gt;</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>    &lt;!--</NoteLine>
   <NoteLine>        Highlight contexts, contexts are the main portion of the highlighter, they define the rules to find and highlight portions of text.</NoteLine>
   <NoteLine>        Name is an identifier for the context, highlight color is the color with which the context will be highlighted, this color overrides the color</NoteLine>
   <NoteLine>        of enclosing contexts.</NoteLine>
   <NoteLine>        Contexts can be nested, you can define any context within a context, this allows you to highlight portions of a context with different colors.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>        valid attributes for the highlightContext tag:</NoteLine>
   <NoteLine>        name: name of the context</NoteLine>
   <NoteLine>        highlightColor: color used to highlight words matched by the context #RRGGBB</NoteLine>
   <NoteLine>        backgroundColor: color to use as background for the matched words #RRGGBB</NoteLine>
   <NoteLine>        bold: true/false, should matched words be bolded? defaults to false</NoteLine>
   <NoteLine>        italic: true/false, should matched words be italic? defaults to false</NoteLine>
   <NoteLine>        underline: true/false, should matched words be underline? defaults to false</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>        There are 4 different ways to define a context, all of which are exclusive, from top priority down they are:</NoteLine>
   <NoteLine>        &lt;startRegEx&gt;: it defines a possible multi-line context, everything starting with the regular expression &lt;startRegex&gt;</NoteLine>
   <NoteLine>        up to the regular expression &lt;endRegex&gt; will be highlighted.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>        &lt;entryRegEx&gt;: it defines a regular expression to match in a SINGLE line of text, if it's found, this context will be used.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>        &lt;keywords&gt;: defines a list of words to be highlighted, each regex has to be enclosed in &lt;string&gt;&lt;/string&gt; tags</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>        &lt;regexes&gt;: defines a list or regular expressions that define the context, matching one of these uses this context for highlighting,</NoteLine>
   <NoteLine>        each regex has to be enclosed in &lt;string&gt;&lt;/string&gt; tags</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>        in this example, XML tags are defined:</NoteLine>
   <NoteLine>    --&gt;</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>    &lt;highlightContext name="Tags" highlightColor="#881280"&gt;</NoteLine>
   <NoteLine>        &lt;entryRegEx&gt;(&amp;lt;[^&amp;gt;]*&amp;gt;)&lt;/entryRegEx&gt;</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>        &lt;!-- Inner context, these highlight words within the enclosing context, in this case strings and attributes --&gt;</NoteLine>
   <NoteLine>        &lt;highlightContext name="Strings in Tags" highlightColor="#1A1AA6"&gt;</NoteLine>
   <NoteLine>            &lt;entryRegEx&gt;("[^"&amp;gt;&amp;lt;]*")&lt;/entryRegEx&gt;</NoteLine>
   <NoteLine>        &lt;/highlightContext&gt;</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>        &lt;highlightContext name="Single Strings in Tags" highlightColor="#1A1AA6"&gt;</NoteLine>
   <NoteLine>            &lt;entryRegEx&gt;('[^'&amp;gt;&amp;lt;]*')&lt;/entryRegEx&gt;</NoteLine>
   <NoteLine>        &lt;/highlightContext&gt;</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>        &lt;highlightContext name="Attributes in Tags" highlightColor="#994500"&gt;</NoteLine>
   <NoteLine>            &lt;entryRegEx&gt;([\w-]*)[ \t]*=(?=[ \t]*"[^"&amp;gt;&amp;lt;]*")&lt;/entryRegEx&gt;</NoteLine>
   <NoteLine>        &lt;/highlightContext&gt;</NoteLine>
   <NoteLine>    &lt;/highlightContext&gt;</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>    &lt;!-- example: XML comments --&gt;</NoteLine>
   <NoteLine>        &lt;highlightContext name="Comment" highlightColor="#236E25"&gt;</NoteLine>
   <NoteLine>            &lt;startRegEx&gt;&amp;lt;!--&lt;/startRegEx&gt;</NoteLine>
   <NoteLine>            &lt;endRegEx&gt;--&amp;gt;&lt;/endRegEx&gt;</NoteLine>
   <NoteLine>            &lt;highlightContext name="bolded" highlightColor="#FF0000" bold="true"&gt;</NoteLine>
   <NoteLine>                &lt;keywords&gt;</NoteLine>
   <NoteLine>                    &lt;string&gt;TODO&lt;/string&gt;</NoteLine>
   <NoteLine>                    &lt;string&gt;HACK&lt;/string&gt;</NoteLine>
   <NoteLine>                &lt;/keywords&gt;</NoteLine>
   <NoteLine>            &lt;/highlightContext&gt;</NoteLine>
   <NoteLine>        &lt;/highlightContext&gt;</NoteLine>
   <NoteLine>    &lt;/contexts&gt;</NoteLine>
   <NoteLine>&lt;/highlightDefinition&gt;</NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Folder" ID="999428013">
 <ObjName>LineManager</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
</block>
<block type="Module" ID="620651185">
 <ObjName>LineManager</ObjName>
 <ObjContainerID>999428013</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>0</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>appendLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub appendLine(segment as textline)</SourceLine>
   <SourceLine>//append a line to the line array</SourceLine>
   <SourceLine>lines.Append segment</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//mark it as changed</SourceLine>
   <SourceLine>'NotifyLineChangedRange(lines.Ubound, 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//see if this one is longer than the previous longest</SourceLine>
   <SourceLine>if segment.length &gt; longestLineLength then</SourceLine>
   <SourceLine>longestLineIndex = UBound(lines)</SourceLine>
   <SourceLine>longestLineLength =  segment.length</SourceLine>
   <SourceLine>//and forward it to the delegate</SourceLine>
   <SourceLine>NotifyMaxLineLengthChanged(longestLineIndex)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>segment as textline</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>calcInvisibleLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function calcInvisibleLines() As integer</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//clear the calculation caches</SourceLine>
   <SourceLine>if neededCache &lt;&gt; nil then neededCache.Clear</SourceLine>
   <SourceLine>if visibleCache &lt;&gt; nil then visibleCache.Clear</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//returns what is the logical pos of the given lineNumber</SourceLine>
   <SourceLine>dim invisibleLines as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as Integer = 0 to Count - 1</SourceLine>
   <SourceLine>if not lines(i).visible then invisibleLines = invisibleLines + 1</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return invisibleLines</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>clear</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub clear()</SourceLine>
   <SourceLine>//clear lines and vars</SourceLine>
   <SourceLine>RemoveLineSymbols(0, Count - 1)</SourceLine>
   <SourceLine>ReDim lines(-1)</SourceLine>
   <SourceLine>longestLineIndex = -1</SourceLine>
   <SourceLine>longestLineLength = 0</SourceLine>
   <SourceLine>lineEnding = chr(13)</SourceLine>
   <SourceLine>currentInvisibleLines = -1</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>clearDirtyLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub clearDirtyLines()</SourceLine>
   <SourceLine>dim line as TextLine</SourceLine>
   <SourceLine>for each line in lines</SourceLine>
   <SourceLine>line.isDirty = False</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(TextStorage as gapBuffer, TabWidth as integer)</SourceLine>
   <SourceLine>//create generic eol segment</SourceLine>
   <SourceLine>self.TextStorage = TextStorage</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//no need to find the longest line yet</SourceLine>
   <SourceLine>needsLongestRescan = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//default the line endings to chr(13)</SourceLine>
   <SourceLine>lineEnding = chr(13)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>self.TabWidth = TabWidth</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>TextStorage as gapBuffer, TabWidth as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>createLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function createLines(lineInsertPoint as integer, offset as integer, length as integer) As integer</SourceLine>
   <SourceLine>'Modified version by Seth Verrinder</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim text as String = TextStorage.getText(offset, length)</SourceLine>
   <SourceLine>dim insertedLines as integer</SourceLine>
   <SourceLine>dim startSearchIndex as integer</SourceLine>
   <SourceLine>dim ariLineLen() as integer</SourceLine>
   <SourceLine>dim ariLineDelimeter() as integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>FindLineLengths( text, ariLineLen, ariLineDelimeter )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as integer = 0 to ariLineLen.Ubound - 1</SourceLine>
   <SourceLine>dim segment as TextLine</SourceLine>
   <SourceLine>segment = new TextLine(offset+startSearchIndex, ariLineLen(i), ariLineDelimeter(i), TabWidth)</SourceLine>
   <SourceLine>startSearchIndex = startSearchIndex + ariLineLen(i)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//append/insert?</SourceLine>
   <SourceLine>if lineInsertPoint + insertedLines &gt; UBound(lines) then</SourceLine>
   <SourceLine>AppendLine(segment)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>insertLine(lineInsertPoint + insertedLines, segment)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>insertedLines = insertedLines + 1</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//trailing text</SourceLine>
   <SourceLine>if startSearchIndex &lt;= text.len then</SourceLine>
   <SourceLine>if lineInsertPoint + insertedLines &gt; UBound(lines) then</SourceLine>
   <SourceLine>dim line as TextLine = new TextLine(offset + startSearchIndex, text.len - startSearchIndex, 0, TabWidth)</SourceLine>
   <SourceLine>appendLine(line)</SourceLine>
   <SourceLine>insertedLines = insertedLines + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>NotifyLineChangedRange(lineInsertPoint, insertedLines)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return insertedLines</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineInsertPoint as integer, offset as integer, length as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>FindLineLengths</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub FindLineLengths(sText as string, ariLineLen() as integer, ariDelimeterLen() as integer)</SourceLine>
   <SourceLine>'Original Seth Verrinder</SourceLine>
   <SourceLine>'I modified it so it supported multi-byte encodings...</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim sTextCanonical as string = ReplaceLineEndings( sText, EndOfLine.UNIX )</SourceLine>
   <SourceLine>dim ars() as string = Split( sTextCanonical, EndOfLine.UNIX )</SourceLine>
   <SourceLine>dim iOffsetB as integer = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim currentEncoding as TextEncoding = sText.Encoding</SourceLine>
   <SourceLine>if currentEncoding = nil then currentEncoding = Encodings.ASCII</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//get the byte length for an EOL char... it could be &gt; 1, e.g. in UTF-16</SourceLine>
   <SourceLine>dim EOLlen as Integer = currentEncoding.Chr(13).LenB</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>lineEnding = "" // will be set below, by the first line delimiter that's encountered</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for each sLine as string in ars</SourceLine>
   <SourceLine>dim iLineLen as integer = sLine.Len</SourceLine>
   <SourceLine>iOffsetB = iOffsetB + sLine.LenB</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim c as integer = sText.MidB( iOffsetB + 1, EOLlen ).Asc</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if c = 13 then</SourceLine>
   <SourceLine>iOffsetB = iOffsetB + EOLlen //move the offset by the already found marker</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if sText.MidB( iOffsetB + 1, EOLlen ).Asc = 10 then //windows</SourceLine>
   <SourceLine>iLineLen = iLineLen + 2</SourceLine>
   <SourceLine>iOffsetB = iOffsetB + EOLlen</SourceLine>
   <SourceLine>ariDelimeterLen.Append( 2 )</SourceLine>
   <SourceLine>if lineEnding = "" then lineEnding = Chr(13)+Chr(10)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else //mac</SourceLine>
   <SourceLine>iLineLen = iLineLen + 1</SourceLine>
   <SourceLine>ariDelimeterLen.Append( 1 )</SourceLine>
   <SourceLine>if lineEnding = "" then lineEnding = Chr(13)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif c = 10 then //unix</SourceLine>
   <SourceLine>iLineLen = iLineLen + 1</SourceLine>
   <SourceLine>iOffsetB = iOffsetB + EOLlen</SourceLine>
   <SourceLine>ariDelimeterLen.Append( 1 )</SourceLine>
   <SourceLine>if lineEnding = "" then lineEnding = Chr(10)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif c = 0 then</SourceLine>
   <SourceLine>//ReplaceLineEndings( sText, EndOfLine.UNIX ) is actually adding extra blank lines with utf16</SourceLine>
   <SourceLine>//there should be only ONE 0-len delimiter per createLines operation, the last one.</SourceLine>
   <SourceLine>ariDelimeterLen.Append( 0 )</SourceLine>
   <SourceLine>ariLineLen.Append( iLineLen )</SourceLine>
   <SourceLine>if lineEnding = "" then</SourceLine>
   <SourceLine>// if text had no line delimiters we'll use the OS default</SourceLine>
   <SourceLine>#if TargetWin32</SourceLine>
   <SourceLine>lineEnding = EndOfLine.Windows</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>// Mac nowadays uses Unix, not the old Chr(13)</SourceLine>
   <SourceLine>lineEnding = EndOfLine.Unix</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>Continue</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ariLineLen.Append( iLineLen )</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>sText as string, ariLineLen() as integer, ariDelimeterLen() as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>findLineNumberForOffset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function findLineNumberForOffset(offset as integer) As integer</SourceLine>
   <SourceLine>//binary search for the line that contains offset.</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if Count = 0 then Return -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim leftIndex as Integer</SourceLine>
   <SourceLine>dim rightIndex as Integer = Count - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim currLine as TextLine</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>while leftIndex &lt; rightIndex</SourceLine>
   <SourceLine>dim pivot as Integer = (leftIndex + rightIndex) / 2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>currLine = lines(pivot)</SourceLine>
   <SourceLine>if offset &lt; currLine.offset then</SourceLine>
   <SourceLine>rightIndex = pivot - 1</SourceLine>
   <SourceLine>elseif offset &gt; currLine.offset then</SourceLine>
   <SourceLine>leftIndex = pivot + 1</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>leftIndex = pivot</SourceLine>
   <SourceLine>exit while</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if lines(leftIndex).offset &gt; offset then Return leftIndex - 1</SourceLine>
   <SourceLine>Return leftIndex</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>fixOffsets</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub fixOffsets(lineNumber as integer, startOffset as integer)</SourceLine>
   <SourceLine>//fix all the offsets starting at the given line number, with the given offset</SourceLine>
   <SourceLine>dim maxIndex as Integer = UBound(lines)</SourceLine>
   <SourceLine>dim line as TextLine</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as Integer = lineNumber to maxIndex</SourceLine>
   <SourceLine>line = lines(i)</SourceLine>
   <SourceLine>line.offset = startOffset //set offset</SourceLine>
   <SourceLine>startOffset = line.offset + line.length //add line length</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineNumber as integer, startOffset as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>foldAll</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub foldAll()</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as Integer = 0 to UBound(lines)</SourceLine>
   <SourceLine>if lines(i).isBlockStart and not lines(i).folded then</SourceLine>
   <SourceLine>call toggleLineFolding(i)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>getLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function getLine(index as integer) As TextLine</SourceLine>
   <SourceLine>//get a given line</SourceLine>
   <SourceLine>if index &lt; 0 or index &gt; Count - 1 then Return nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return lines(index)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer</ItemParams>
  <ItemResult>TextLine</ItemResult>
 </Method>
 <Method>
  <ItemName>getLineNumberForOffset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function getLineNumberForOffset(offset as integer, length as integer = 0) As integer</SourceLine>
   <SourceLine>//trivial case</SourceLine>
   <SourceLine>if offset = 0 then Return 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if offset = textLength + length then</SourceLine>
   <SourceLine>//empty?</SourceLine>
   <SourceLine>if Count = 0 then Return 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//last line?</SourceLine>
   <SourceLine>dim last as TextLine = lines(UBound(lines))</SourceLine>
   <SourceLine>if last.delimiterLength &gt; 0 then Return Count</SourceLine>
   <SourceLine>Return Count - 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//general case</SourceLine>
   <SourceLine>Return findLineNumberForOffset(offset)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer, length as integer = 0</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>getLongestLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function getLongestLine() As textline</SourceLine>
   <SourceLine>if longestLineIndex &lt; 0 then Return nil</SourceLine>
   <SourceLine>Return lines(longestLineIndex)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>textline</ItemResult>
 </Method>
 <Method>
  <ItemName>getNumberOfAffectedLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function getNumberOfAffectedLines(startLine as integer, offset as integer, length as integer) As integer</SourceLine>
   <SourceLine>if length = 0 then Return 1 //same line</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim target as Integer = offset + length</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim line as TextLine = lines(startLine)</SourceLine>
   <SourceLine>if line.delimiterLength = 0 then</SourceLine>
   <SourceLine>//last line</SourceLine>
   <SourceLine>Return 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if line.offset + line.length &gt; Target then</SourceLine>
   <SourceLine>Return 1 //within line</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if line.offset + line.length = Target then</SourceLine>
   <SourceLine>Return 2 //this and next</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//general case</SourceLine>
   <SourceLine>Return getLineNumberForOffset(Target) - startLine + 1</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>startLine as integer, offset as integer, length as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>getNumberOfLinesNeededToView</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function getNumberOfLinesNeededToView(linesNeeded as integer) As integer</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if invisibleLines = 0 then Return linesNeeded</SourceLine>
   <SourceLine>if neededCache = nil then neededCache = new Dictionary</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//check cache</SourceLine>
   <SourceLine>if neededCache.HasKey(linesNeeded) then Return neededCache.Value(linesNeeded)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//returns the number of lines needed to display "lineNumber" visible lines.</SourceLine>
   <SourceLine>dim visibleLines as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as Integer = 0 to Count - 1</SourceLine>
   <SourceLine>if lines(i).visible then visibleLines = visibleLines + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if visibleLines &gt; linesNeeded then</SourceLine>
   <SourceLine>neededCache.Value(linesNeeded) = i</SourceLine>
   <SourceLine>Return i</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>neededCache.Value(linesNeeded) = Count - 1</SourceLine>
   <SourceLine>Return Count - 1</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>linesNeeded as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>getNumberOfVisibleLinesUpToLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function getNumberOfVisibleLinesUpToLine(lineNumber as integer) As integer</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if invisibleLines = 0 then Return lineNumber</SourceLine>
   <SourceLine>if visibleCache = nil then visibleCache = new Dictionary</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//check cache</SourceLine>
   <SourceLine>if visibleCache.HasKey(lineNumber) then Return visibleCache.Value(lineNumber)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//returns the number of visible lines up to "lineNumber"</SourceLine>
   <SourceLine>dim invisibleLines as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as Integer = 0 to lineNumber</SourceLine>
   <SourceLine>if not lines(i).visible then invisibleLines = invisibleLines + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'if i &gt;= lineNumber then Return i - invisibleLines</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>'Return Count - invisibleLines</SourceLine>
   <SourceLine>visibleCache.Value(lineNumber) = lineNumber - invisibleLines</SourceLine>
   <SourceLine>return lineNumber - invisibleLines</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineNumber as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>insert</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub insert(offset as integer, text as string)</SourceLine>
   <SourceLine>replace(offset, 0, text)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer, text as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>insertLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub insertLine(index as integer, segment as textline)</SourceLine>
   <SourceLine>//insert into line array</SourceLine>
   <SourceLine>lines.Insert(index, segment)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//mark it</SourceLine>
   <SourceLine>'NotifyLineChangedRange(index, 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//see if new line is longer than previous longest</SourceLine>
   <SourceLine>if segment.length &gt; longestLineLength then</SourceLine>
   <SourceLine>longestLineIndex = index</SourceLine>
   <SourceLine>longestLineLength =  segment.length</SourceLine>
   <SourceLine>NotifyMaxLineLengthChanged(longestLineIndex)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer, segment as textline</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>LongestLineIdx</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function LongestLineIdx() As Integer</SourceLine>
   <SourceLine>Return longestLineIndex</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>MarkAllLinesAsChanged</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub MarkAllLinesAsChanged()</SourceLine>
   <SourceLine>NotifyLineChangedRange(0, self.Count)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>nextBlockEndLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function nextBlockEndLine(forLine as integer, ignoreIfLineIsBlockStart as boolean = false) As integer</SourceLine>
   <SourceLine>//Finds the next block end from this line,</SourceLine>
   <SourceLine>//It accounts for nested blocks.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim testLine as TextLine</SourceLine>
   <SourceLine>testLine = getLine (forLine)</SourceLine>
   <SourceLine>if testLine = nil then Return -1</SourceLine>
   <SourceLine>if not ignoreIfLineIsBlockStart and not testLine.isBlockStart then</SourceLine>
   <SourceLine>Return -1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim depth as integer</SourceLine>
   <SourceLine>dim idx, match, lastLine as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//search down</SourceLine>
   <SourceLine>lastLine = UBound(lines)</SourceLine>
   <SourceLine>match = -1</SourceLine>
   <SourceLine>for idx = forLine + 1 to lastLine</SourceLine>
   <SourceLine>testLine = getLine(idx)</SourceLine>
   <SourceLine>if testLine = nil then Continue for</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if depth = 0 and testLine.isBlockEnd then</SourceLine>
   <SourceLine>//found it</SourceLine>
   <SourceLine>match = idx</SourceLine>
   <SourceLine>exit for</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//nested</SourceLine>
   <SourceLine>elseif testLine.isBlockStart and not testline.isBlockEnd then</SourceLine>
   <SourceLine>depth = depth + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//nested out</SourceLine>
   <SourceLine>elseif testLine.isBlockEnd and not testLine.isBlockStart then</SourceLine>
   <SourceLine>depth = depth - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return match</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>forLine as integer, ignoreIfLineIsBlockStart as boolean = false</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>nextVisibleLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function nextVisibleLine(fromLine as integer) As integer</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if invisibleLines = 0 then Return fromLine</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as Integer = fromLine to Count - 1</SourceLine>
   <SourceLine>if lines(i).visible then Return i</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>Return previousVisibleLine(fromLine)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>fromLine as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>NotifyLineChangedRange</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub NotifyLineChangedRange(startIndex as integer, length as Integer)</SourceLine>
   <SourceLine>//notify changes</SourceLine>
   <SourceLine>dim msg as new Message(self, self)</SourceLine>
   <SourceLine>msg.addInfo(1, LineChangedMsg)</SourceLine>
   <SourceLine>msg.addInfo(2, startIndex)</SourceLine>
   <SourceLine>msg.addInfo(3, length)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//Alex  8/22/09 the line itself is no longer needed.</SourceLine>
   <SourceLine>//msg.addInfo(3, line)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>MessageCenter.sendMessage(msg)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>startIndex as integer, length as Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>NotifyLineCountChanged</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub NotifyLineCountChanged()</SourceLine>
   <SourceLine>//notify changes</SourceLine>
   <SourceLine>dim msg as new Message(self, self)</SourceLine>
   <SourceLine>msg.addInfo(1, LineCountChangedMsg)</SourceLine>
   <SourceLine>msg.addInfo(2, count)</SourceLine>
   <SourceLine>MessageCenter.sendMessage(msg)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>NotifyMaxLineLengthChanged</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub NotifyMaxLineLengthChanged(longestLineIndex as integer)</SourceLine>
   <SourceLine>//notify changes</SourceLine>
   <SourceLine>dim msg as new Message(self, self)</SourceLine>
   <SourceLine>msg.addInfo(1, MaxLineLengthChangedMsg)</SourceLine>
   <SourceLine>msg.addInfo(2, longestLineIndex)</SourceLine>
   <SourceLine>MessageCenter.sendMessage(msg)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>longestLineIndex as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>previousBlockStartLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function previousBlockStartLine(forLine as integer, ignoreIfLineIsBlockEnd as boolean = false) As integer</SourceLine>
   <SourceLine>//Finds then previous block start from this line,</SourceLine>
   <SourceLine>//It accounts for nested blocks.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim testLine as TextLine</SourceLine>
   <SourceLine>testLine = getLine (forLine)</SourceLine>
   <SourceLine>if testLine = nil then Return - 1</SourceLine>
   <SourceLine>if not ignoreIfLineIsBlockEnd and not testLine.isBlockEnd then</SourceLine>
   <SourceLine>Return -1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim depth as integer</SourceLine>
   <SourceLine>dim idx, match, lastLine as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>match = -1</SourceLine>
   <SourceLine>for idx = forLine - 1 DownTo 0</SourceLine>
   <SourceLine>testLine = getLine(idx)</SourceLine>
   <SourceLine>if testLine = nil then Continue for</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if depth = 0 and testLine.isBlockStart then</SourceLine>
   <SourceLine>//found it</SourceLine>
   <SourceLine>match = idx</SourceLine>
   <SourceLine>exit for</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//nested</SourceLine>
   <SourceLine>elseif testLine.isBlockEnd and not testLine.isBlockStart then</SourceLine>
   <SourceLine>depth = depth + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//out of inner block...</SourceLine>
   <SourceLine>elseif testLine.isBlockStart and not testLine.isBlockEnd then</SourceLine>
   <SourceLine>depth = depth - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return match</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>forLine as integer, ignoreIfLineIsBlockEnd as boolean = false</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>previousVisibleLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function previousVisibleLine(fromLine as integer) As integer</SourceLine>
   <SourceLine>//finds a the previous visible line from a given line.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if invisibleLines = 0 then Return fromLine</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as Integer = fromLine downto 0</SourceLine>
   <SourceLine>if lines(i).visible then Return i</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>Return -1</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>fromLine as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>remove</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub remove(offset as integer, length as integer)</SourceLine>
   <SourceLine>replace(offset, length, "")</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer, length as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>removeLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub removeLine(index as integer)</SourceLine>
   <SourceLine>RemoveLineSymbols(index, index)</SourceLine>
   <SourceLine>lines.Remove(index)</SourceLine>
   <SourceLine>//if removed line was the longest... we need to rescan</SourceLine>
   <SourceLine>if index = longestLineIndex then needsLongestRescan = true</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>RemoveLineSlice</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub RemoveLineSlice(arr() As textline, fromIndex As Integer = 0, toIndex As Integer = 0)</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Deletes a portion of the array.</SourceLine>
   <SourceLine>// See "Slice Indexing" note.</SourceLine>
   <SourceLine>// taken from Joe Strout's open source Array Utilities</SourceLine>
   <SourceLine>// http://www.verex.com/opensource/</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim ub As Integer = UBound( arr )</SourceLine>
   <SourceLine>if fromIndex &lt; 0 then fromIndex = ub + 1 + fromIndex</SourceLine>
   <SourceLine>if toIndex &lt;= 0 then toIndex = ub + 1 + toIndex</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if fromIndex &gt;= toIndex then return  // empty (or invalid) range</SourceLine>
   <SourceLine>RemoveLineSymbols(fromIndex, toIndex - 1) //used to be toIndex</SourceLine>
   <SourceLine>if longestLineIndex &gt;= fromIndex and longestLineIndex &lt;= toIndex then needsLongestRescan = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// easy case: deleting the end of the array, we can just redim and be done</SourceLine>
   <SourceLine>if toIndex - 1 = ub then</SourceLine>
   <SourceLine>Redim arr( fromIndex - 1 )</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// another easy case: deleting just one element (equivalent to Array.Remove)</SourceLine>
   <SourceLine>if fromIndex = toIndex - 1 then</SourceLine>
   <SourceLine>arr.Remove fromIndex</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// harder case: copy the data down, and THEN redim</SourceLine>
   <SourceLine>Dim dest, src, maxsrc As Integer</SourceLine>
   <SourceLine>dest = fromIndex</SourceLine>
   <SourceLine>for src = toIndex to ub</SourceLine>
   <SourceLine>arr(dest) = arr(src)</SourceLine>
   <SourceLine>dest = dest + 1</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>Redim arr( dest - 1 )</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>arr() As textline, fromIndex As Integer = 0, toIndex As Integer = 0</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>RemoveLineSymbols</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub RemoveLineSymbols(fromIndex as integer, toIndex as integer)</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//look for symbols in the lines that are being removed. if found, signal the editfield to remove such symbols from its symbol table.</SourceLine>
   <SourceLine>dim tmp as new Dictionary</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim line as TextLine</SourceLine>
   <SourceLine>dim key as String</SourceLine>
   <SourceLine>for i as integer = fromIndex to toIndex</SourceLine>
   <SourceLine>line = getLine(i)</SourceLine>
   <SourceLine>if line = nil or line.LineSymbols = nil or line.LineSymbols.Count = 0 then Continue for</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'for each key in line.LineSymbols.Keys</SourceLine>
   <SourceLine>tmp.Value(line) = nil</SourceLine>
   <SourceLine>'next</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if tmp.Count = 0 then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim msg as new Message(self, self)</SourceLine>
   <SourceLine>msg.addInfo(1, LineSymbolsRemovedMsg)</SourceLine>
   <SourceLine>msg.addInfo(2, tmp)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if toIndex - fromIndex &lt;= 2 then</SourceLine>
   <SourceLine>MessageCenter.sendMessage(msg)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>MessageCenter.queueMessage(msg)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>fromIndex as integer, toIndex as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>replace</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub replace(offset as integer, length as integer, text as string)</SourceLine>
   <SourceLine>//replaces a chunk of text with "text" and length "length" at pos offset</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim lineNumber as Integer = getLineNumberForOffset(offset, length)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//save original index as it may change</SourceLine>
   <SourceLine>dim originalLine as Integer = lineNumber</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim line as TextLine</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//old highlight context, in case the modified line has one</SourceLine>
   <SourceLine>dim oldContext as HighlightContext</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim lineCount as Integer = count</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>line = lines(lineNumber)</SourceLine>
   <SourceLine>if length &gt; 0 then //merge affected lines...</SourceLine>
   <SourceLine>dim numberOfAffectedLines as Integer = getNumberOfAffectedLines(lineNumber, offset, length)</SourceLine>
   <SourceLine>dim endLine as TextLine = lines(lineNumber + numberOfAffectedLines - 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if numberOfAffectedLines &gt; 1 and invisibleLines &gt; 0 then</SourceLine>
   <SourceLine>currentInvisibleLines = -1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//save highlight context of last line</SourceLine>
   <SourceLine>oldContext = endLine.Context</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>line.length = endLine.offset + endLine.length - line.offset</SourceLine>
   <SourceLine>line.delimiterLength = endLine.delimiterLength</SourceLine>
   <SourceLine>removeLineSlice(lines, lineNumber + 1, lineNumber + numberOfAffectedLines)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//dim textToProcess as String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if length = 0 and text.len = 1 and text &lt;&gt; lineEnding  then //simple keystroke</SourceLine>
   <SourceLine>RemoveLineSymbols(lineNumber, lineNumber)</SourceLine>
   <SourceLine>line.length = line.length + 1 //make line longer by one char</SourceLine>
   <SourceLine>fixOffsets(lineNumber + 1, line.offset + line.length) //fix the offsets</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//mark it</SourceLine>
   <SourceLine>NotifyLineChangedRange(lineNumber, 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//see if it's now the longestLine</SourceLine>
   <SourceLine>if line.length &gt; longestLineLength then</SourceLine>
   <SourceLine>longestLineIndex = lineNumber</SourceLine>
   <SourceLine>longestLineLength =  line.length</SourceLine>
   <SourceLine>NotifyMaxLineLengthChanged(longestLineIndex)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif length = 1 and Text.len = 0 then //simple delete</SourceLine>
   <SourceLine>RemoveLineSymbols(lineNumber, lineNumber)</SourceLine>
   <SourceLine>line.length = line.length - 1 //make smaller by one char</SourceLine>
   <SourceLine>fixOffsets(lineNumber + 1, line.offset + line.length) //fix offsets</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//mark it</SourceLine>
   <SourceLine>NotifyLineChangedRange(lineNumber, 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if this was the longest line, do a rescan</SourceLine>
   <SourceLine>if lineNumber = longestLineIndex then needsLongestRescan = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else //every other case... long text, enters...</SourceLine>
   <SourceLine>'first, unfold line if folded, and we're adding to the end of the line...</SourceLine>
   <SourceLine>if line.folded and offset = line.offset + line.length - line.delimiterLength then</SourceLine>
   <SourceLine>call toggleLineFolding(originalLine)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//Line now contains a merged line composing all affected lines.</SourceLine>
   <SourceLine>dim delta as Integer = line.length - length + text.len</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//extract the affected text</SourceLine>
   <SourceLine>//textToProcess = TextStorage.getText(line.offset, delta)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//remove merged line, and start parsing/inserting.</SourceLine>
   <SourceLine>removeLine(lineNumber)'originalLine)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>lineNumber = lineNumber + createLines(lineNumber, line.offset, delta)'createLines(textToProcess, lineNumber, line.offset)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//fix offsets starting from the last modified line.</SourceLine>
   <SourceLine>line = lines(max(lineNumber - 1,0))</SourceLine>
   <SourceLine>if delta &lt;&gt; 0 then fixOffsets(lineNumber, line.offset + line.length)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//reset context if any.</SourceLine>
   <SourceLine>if oldContext &lt;&gt; nil then</SourceLine>
   <SourceLine>lines(originalLine).Context = oldContext</SourceLine>
   <SourceLine>NotifyLineChangedRange(originalLine, 1)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//rescan leghts if necessary</SourceLine>
   <SourceLine>if needsLongestRescan then rescanLenghts</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//fire LineChangedDelegate if any</SourceLine>
   <SourceLine>if lineCount = count then Return</SourceLine>
   <SourceLine>NotifyLineCountChanged</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer, length as integer, text as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>rescanLenghts</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub rescanLenghts()</SourceLine>
   <SourceLine>//find the longest line.</SourceLine>
   <SourceLine>longestLineIndex = -1</SourceLine>
   <SourceLine>longestLineLength = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim line as TextLine</SourceLine>
   <SourceLine>dim idx as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for Each line in lines</SourceLine>
   <SourceLine>if line.length &gt; longestLineLength then</SourceLine>
   <SourceLine>longestLineLength = line.length</SourceLine>
   <SourceLine>longestLineIndex = idx</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>idx = idx + 1</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>needsLongestRescan = False</SourceLine>
   <SourceLine>if longestLineIndex &lt; 0 then Return</SourceLine>
   <SourceLine>NotifyMaxLineLengthChanged(longestLineIndex)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>revealLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub revealLine(lineNumber as integer)</SourceLine>
   <SourceLine>//expand all invisible lines starting at linenumber, up</SourceLine>
   <SourceLine>dim current as TextLine</SourceLine>
   <SourceLine>for i as Integer = lineNumber DownTo 0</SourceLine>
   <SourceLine>current = lines(i)</SourceLine>
   <SourceLine>if current.folded then call toggleLineFolding(i)</SourceLine>
   <SourceLine>if current.visible then Return</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineNumber as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>setText</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub setText(length as Integer)</SourceLine>
   <SourceLine>Clear</SourceLine>
   <SourceLine>call createLines(0, 0, length)</SourceLine>
   <SourceLine>NotifyLineCountChanged</SourceLine>
   <SourceLine>NotifyMaxLineLengthChanged(longestLineIndex)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>length as Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>toggleLineFolding</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function toggleLineFolding(lineNumber as integer) As integer</SourceLine>
   <SourceLine>dim line as TextLine = getLine(lineNumber)</SourceLine>
   <SourceLine>if line = nil then Return -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//check if line is a block end/start</SourceLine>
   <SourceLine>if not line.isBlockStart and not line.isBlockEnd then</SourceLine>
   <SourceLine>Return -1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//now, find the range...</SourceLine>
   <SourceLine>dim depth as integer</SourceLine>
   <SourceLine>dim testLine as TextLine</SourceLine>
   <SourceLine>dim idx, match, lastLine as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>match = -1</SourceLine>
   <SourceLine>if line.isBlockStart then</SourceLine>
   <SourceLine>//search down</SourceLine>
   <SourceLine>match = nextBlockEndLine(lineNumber)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if match &lt; 0 then</SourceLine>
   <SourceLine>line.isBlockStart = False</SourceLine>
   <SourceLine>Return -1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>//search up</SourceLine>
   <SourceLine>match = previousBlockStartLine(lineNumber)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if match &lt; 0 then</SourceLine>
   <SourceLine>line.isBlockEnd = False</SourceLine>
   <SourceLine>Return -1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>//toggle lines' visibility</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>line = getLine(match)</SourceLine>
   <SourceLine>dim tmp as Integer</SourceLine>
   <SourceLine>tmp = match</SourceLine>
   <SourceLine>match = lineNumber</SourceLine>
   <SourceLine>lineNumber = tmp</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>line.folded = not line.folded</SourceLine>
   <SourceLine>dim targetState as Boolean = not line.folded</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim lineStack() as Boolean</SourceLine>
   <SourceLine>lineStack.Append not line.folded</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for idx = lineNumber + 1 to match</SourceLine>
   <SourceLine>testLine = lines(idx)</SourceLine>
   <SourceLine>if targetState = false then //we're making everything invisible, we don't care</SourceLine>
   <SourceLine>testLine.visible = false</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>//we have to check for parentStates!</SourceLine>
   <SourceLine>testLine.visible = lineStack(UBound(lineStack))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if testLine.isBlockStart and not testLine.isBlockEnd then</SourceLine>
   <SourceLine>lineStack.Append(not testLine.folded and lineStack(UBound(lineStack)))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf testLine.isBlockEnd and not testLine.isBlockStart then</SourceLine>
   <SourceLine>call lineStack.Pop</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//force recalculation of invisibleLines</SourceLine>
   <SourceLine>currentInvisibleLines = -1</SourceLine>
   <SourceLine>NotifyLineCountChanged</SourceLine>
   <SourceLine>Return lineNumber</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineNumber as integer</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>unfoldAll</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub unfoldAll()</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//expand all foldings</SourceLine>
   <SourceLine>dim lines as Integer = Count - invisibleLines</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//make everything visible</SourceLine>
   <SourceLine>for i as Integer = 0 to Count - 1</SourceLine>
   <SourceLine>if lines(i).folded then lines(i).folded = False</SourceLine>
   <SourceLine>lines(i).visible = true</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>currentInvisibleLines = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if lines &lt;&gt; Count - invisibleLines then NotifyLineCountChanged</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>Count</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Count As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Count As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return UBound(lines) + 1</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>currentInvisibleLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>currentInvisibleLines As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>currentInvisibleLines As Integer = -1</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>invisibleLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>invisibleLines As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>invisibleLines As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if currentInvisibleLines &lt; 0 then</SourceLine>
   <SourceLine>currentInvisibleLines = calcInvisibleLines</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>Return currentInvisibleLines</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>lineEnding</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>lineEnding As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lineEnding As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>lines()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>lines() As TextLine</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lines() As TextLine</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>longestLineIndex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>longestLineIndex As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>longestLineIndex As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>longestLineLength</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>longestLineLength As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>longestLineLength As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mTabwidth</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mTabwidth As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mTabwidth As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>neededCache</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>neededCache As dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>neededCache As dictionary</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>needsLongestRescan</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>needsLongestRescan As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>needsLongestRescan As boolean = false</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>TabWidth</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TabWidth As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TabWidth As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mTabwidth = value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim line as TextLine</SourceLine>
   <SourceLine>for each line in lines</SourceLine>
   <SourceLine>line.TabWidth = value</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mTabwidth</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TextLength</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextLength As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextLength As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return TextStorage.Length</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TextStorage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextStorage As gapBuffer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextStorage As gapBuffer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>tmpDefinition</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>tmpDefinition As highlightdefinition</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>tmpDefinition As highlightdefinition</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>visibleCache</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>visibleCache As dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>visibleCache As dictionary</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Count</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>invisibleLines</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>lineEnding</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabWidth</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>LineChangedMsg</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>LineChangedMsg</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>2</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>LineCountChangedMsg</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>LineCountChangedMsg</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>1</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>LineSymbolsRemovedMsg</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>LineSymbolsRemovedMsg</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>4</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>MaxLineLengthChangedMsg</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>MaxLineLengthChangedMsg</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>3</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
</block>
<block type="Module" ID="253223620">
 <ObjName>TextLine</ObjName>
 <ObjContainerID>999428013</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>TextSegment</Superclass>
 <ItemFlags>0</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <HookInstance>
  <ItemName>LengthChanged</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub LengthChanged()</SourceLine>
   <SourceLine>isDirty = true</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <Method>
  <ItemName>addWord</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub addWord(word as textsegment)</SourceLine>
   <SourceLine>if word.length = 0 then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>words.Append(word)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>word as textsegment</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>AppendHighlightedWords</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AppendHighlightedWords(storage() as charSelection, lineIndex as integer)</SourceLine>
   <SourceLine>dim word as TextSegment</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for each Word in words</SourceLine>
   <SourceLine>if Word.hasBackgroundColor then</SourceLine>
   <SourceLine>dim tmp as new CharSelection(self.offset + word.offset, word.length, lineIndex, lineIndex, word.backgroundColor)</SourceLine>
   <SourceLine>storage.Append(tmp)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>storage() as charSelection, lineIndex as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>CharToDisplayAt</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CharToDisplayAt(buffer as gapbuffer, index as integer, displayInvisible as boolean) As string</SourceLine>
   <SourceLine>dim theChar as String = buffer.getCharAt(self.offset + index)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>select case theChar</SourceLine>
   <SourceLine>case " "</SourceLine>
   <SourceLine>return " "</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case chr(9)</SourceLine>
   <SourceLine>return TABCHAR</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case chr(10), chr(13)</SourceLine>
   <SourceLine>if displayInvisible then Return VISIBLEEOLCHAR</SourceLine>
   <SourceLine>return ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>Return theChar</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>buffer as gapbuffer, index as integer, displayInvisible as boolean</ItemParams>
  <ItemResult>string</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(offset as integer, length as integer, delimiterLength as integer, tabWidth as integer)</SourceLine>
   <SourceLine>visible = true</SourceLine>
   <SourceLine>folded = False</SourceLine>
   <SourceLine>super.Constructor(offset, length)</SourceLine>
   <SourceLine>self.delimiterLength = delimiterLength</SourceLine>
   <SourceLine>self.TabWidth = tabWidth</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer, length as integer, delimiterLength as integer, tabWidth as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HasPlaceholders</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function HasPlaceholders() As Boolean</SourceLine>
   <SourceLine>Return Placeholders.Ubound &gt; -1</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Highlight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Highlight(definition as highlightdefinition, storage as gapBuffer, forcedContext as highlightcontext = nil, defaultColor as color = &amp;c0) As highlightcontext</SourceLine>
   <SourceLine>ReDim Words(-1)</SourceLine>
   <SourceLine>ReDim placeholders(-1)</SourceLine>
   <SourceLine>LineSymbols = nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>highlighted = False</SourceLine>
   <SourceLine>if me.length = 0 then Return nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if definition = nil then</SourceLine>
   <SourceLine>ParseLine(storage, DefaultColor)</SourceLine>
   <SourceLine>Return nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim myText as String = storage.getText(offset, length)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//run the highlighter, using this line as input and adding an extra EOL to make sure the definition matches EOLs</SourceLine>
   <SourceLine>context = definition.highlight(myText+chr(13), words, placeholders, forcedContext)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//we added an extra eol, remove it.</SourceLine>
   <SourceLine>words.Remove(UBound(words))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//see if this line is a blockStart</SourceLine>
   <SourceLine>isBlockStart = definition.isBlockStart(myText) &lt;&gt; 0</SourceLine>
   <SourceLine>isBlockEnd = definition.isBlockEnd(myText)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>LineSymbols = definition.ScanSymbols(myText)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if the highlighter returned a non nil context, we need to inform the Highlight thread, so it Highlights the next line with the current context.</SourceLine>
   <SourceLine>highlighted = true</SourceLine>
   <SourceLine>Return Context</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>definition as highlightdefinition, storage as gapBuffer, forcedContext as highlightcontext = nil, defaultColor as color = &amp;c0</ItemParams>
  <ItemResult>highlightcontext</ItemResult>
 </Method>
 <Method>
  <ItemName>LocalSegmentForXPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function LocalSegmentForXPos(xpos as integer) As textsegment</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim word as TextSegment</SourceLine>
   <SourceLine>dim sum as Single</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for Each Word in words</SourceLine>
   <SourceLine>if xpos &gt;= sum and xpos &lt;= sum + Word.width then</SourceLine>
   <SourceLine>exit for</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>sum = sum + Word.width</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if Word = nil then Return nil //no words?</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//the desired xpos is within word.</SourceLine>
   <SourceLine>Return Word</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>xpos as integer</ItemParams>
  <ItemResult>textsegment</ItemResult>
 </Method>
 <Method>
  <ItemName>NextPlaceholderFromOffset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function NextPlaceholderFromOffset(offset as Integer) As TextPlaceholder</SourceLine>
   <SourceLine>if not self.HasPlaceholders then Return nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for each placeholder as TextPlaceholder in Placeholders</SourceLine>
   <SourceLine>if Placeholder.offset + self.offset &gt; offset then Return Placeholder</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>Return nil</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as Integer</ItemParams>
  <ItemResult>TextPlaceholder</ItemResult>
 </Method>
 <Method>
  <ItemName>Paint</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Paint(storage as gapBuffer, g as graphics, x as double, y as double, defaultColor as color, displayInvisible as boolean, selStart as integer, selLength as integer, showLeadingSpace as boolean = true)</SourceLine>
   <SourceLine>//draws this line</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if there are no words in this line, we need to at least quick-parse it so we can display it.</SourceLine>
   <SourceLine>if words.Ubound &lt; 0 and length &gt; 0 then</SourceLine>
   <SourceLine>ParseLine(storage, defaultColor)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>width = 0</SourceLine>
   <SourceLine>dim text as String</SourceLine>
   <SourceLine>dim word as TextSegment</SourceLine>
   <SourceLine>dim wordFound as Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//paint tokens</SourceLine>
   <SourceLine>for i as Integer = 0 to words.Ubound</SourceLine>
   <SourceLine>Word = words(i)</SourceLine>
   <SourceLine>g.ForeColor = HighlightColor.darkerColor(50)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if word.TYPE = TYPE_SPACE then</SourceLine>
   <SourceLine>text = " "</SourceLine>
   <SourceLine>if not showLeadingSpace and not wordFound then Continue for</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf Word.TYPE = TYPE_TAB then</SourceLine>
   <SourceLine>text = TABCHAR</SourceLine>
   <SourceLine>if not showLeadingSpace and not wordFound then Continue for</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif Word.TYPE = TYPE_EOL then</SourceLine>
   <SourceLine>if displayInvisible then</SourceLine>
   <SourceLine>text = VISIBLEEOLCHAR</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>text = ""'</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>if not showLeadingSpace and not wordFound then Continue for</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif word.TYPE = TYPE_PLACEHOLDER then</SourceLine>
   <SourceLine>wordFound = true</SourceLine>
   <SourceLine>//Highlight color</SourceLine>
   <SourceLine>if highlighted then</SourceLine>
   <SourceLine>g.ForeColor = word.textColor</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>g.ForeColor = defaultColor</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>text = PlaceholderPaddingString + storage.getText(TextPlaceholder(word).textRange.offset + offset, TextPlaceholder(word).textRange.length) + PlaceholderPaddingString</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>wordFound = true</SourceLine>
   <SourceLine>//Highlight color</SourceLine>
   <SourceLine>if highlighted then</SourceLine>
   <SourceLine>g.ForeColor = word.textColor</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>g.ForeColor = defaultColor</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>text = storage.getText(word.offset + offset, word.length)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.Bold = Word.bold or bold</SourceLine>
   <SourceLine>g.Underline = Word.underline or underline</SourceLine>
   <SourceLine>g.Italic = word.italic or italic</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//cache width</SourceLine>
   <SourceLine>if word.lastFont &lt;&gt; g.TextFont or word.lastSize &lt;&gt; g.TextSize or showInvisible &lt;&gt; displayInvisible then</SourceLine>
   <SourceLine>word.width = -1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>if word.width &lt; 0 then</SourceLine>
   <SourceLine>word.width = g.StringWidth(text)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//draw txt</SourceLine>
   <SourceLine>if (word.Type = TYPE_WORD or word.Type = TYPE_PLACEHOLDER or displayInvisible) and x + word.width &gt;= 0 and  x &lt; g.Width and y &gt;= 0 and y &lt;= g.Height + g.TextHeight  then</SourceLine>
   <SourceLine>if Word.TYPE = TYPE_TAB then</SourceLine>
   <SourceLine>Text = VISIBLETABCHAR //a small hack to make the visible char the same width as the tab</SourceLine>
   <SourceLine>ElseIf Word.TYPE = TYPE_SPACE then</SourceLine>
   <SourceLine>text = VISIBLESPACECHAR</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if word.TYPE = TYPE_PLACEHOLDER then</SourceLine>
   <SourceLine>dim oldc as color = g.ForeColor</SourceLine>
   <SourceLine>dim colorOffset as Integer = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//make darker if placeholder is in selection...</SourceLine>
   <SourceLine>if self.offset + word.offset &gt;= selStart and self.offset + word.offset + Word.length &lt;= selStart + selLength then</SourceLine>
   <SourceLine>colorOffset = 50</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>g.ForeColor = TextPlaceholder(word).placeholderBackgroundColor.darkerColor(colorOffset)</SourceLine>
   <SourceLine>g.fillRoundRect x, y - g.TextAscent, word.width, g.TextHeight + 1, g.TextHeight, g.TextHeight</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.ForeColor = TextPlaceholder(word).placeholderBackgroundColor.darkerColor(30).darkerColor(colorOffset)</SourceLine>
   <SourceLine>g.DrawRoundRect x, y - g.TextAscent, word.width, g.TextHeight + 1, g.TextHeight, g.TextHeight</SourceLine>
   <SourceLine>g.ForeColor = oldc</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if self.offset + word.offset &gt;= selStart and self.offset + word.offset + Word.length &lt;= selStart + selLength then</SourceLine>
   <SourceLine>g.ForeColor = g.ForeColor.invertColor</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//utf-16 just won't work correctly..</SourceLine>
   <SourceLine>if text.Encoding &lt;&gt; nil and text.Encoding.Equals(encodings.UTF16) then text = text + " "</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.DrawString text, x, y</SourceLine>
   <SourceLine>'g.DrawRect x,y - g.TextAscent,word.width,g.TextHeight</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>x = x + word.Width</SourceLine>
   <SourceLine>width = width + Word.width</SourceLine>
   <SourceLine>word.lastFont = g.TextFont</SourceLine>
   <SourceLine>word.lastSize = g.TextSize</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//ellipsis image.</SourceLine>
   <SourceLine>if folded then g.DrawPicture blockFoldedTrailImage, x + 3, y - g.TextAscent + (g.TextHeight - blockFoldedTrailImage.Height) / 2 + 1</SourceLine>
   <SourceLine>showInvisible = displayInvisible</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>storage as gapBuffer, g as graphics, x as double, y as double, defaultColor as color, displayInvisible as boolean, selStart as integer, selLength as integer, showLeadingSpace as boolean = true</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ParseLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ParseLine(buffer as gapBuffer, defaultColor as color)</SourceLine>
   <SourceLine>//quick parses a line, splitting it using spaces and tabs</SourceLine>
   <SourceLine>// http://support.realsoftware.com/listarchives/gettingstarted/2005-05/msg00157.html</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ReDim Words(-1)</SourceLine>
   <SourceLine>dim text as String = buffer.getText(offset, length)</SourceLine>
   <SourceLine>if text.Encoding &lt;&gt; nil and text.Encoding.Equals(Encodings.UTF16) then text = text.ConvertEncoding(Encodings.UTF8)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim scanner as new regex</SourceLine>
   <SourceLine>scanner.SearchPattern = "[ ]|\t|\x0A|(?:\x0D\x0A?)"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim match as RegExMatch</SourceLine>
   <SourceLine>dim offset, length, subStart as Integer</SourceLine>
   <SourceLine>dim char as String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>dim tmp as String</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>match = scanner.Search(text)</SourceLine>
   <SourceLine>while match &lt;&gt; nil</SourceLine>
   <SourceLine>subStart = text.Leftb(match.SubExpressionStartB(0)).len</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>length = substart - offset</SourceLine>
   <SourceLine>//everything from last position up to this whitespace</SourceLine>
   <SourceLine>addWord new TextSegment(offset, length, TextSegment.TYPE_WORD, defaultColor)</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>tmp = buffer.getText(offset + self.offset, length)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>offset = substart + match.SubExpressionString(0).len</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//sort out the whitespace</SourceLine>
   <SourceLine>char = match.SubExpressionString(0)</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>tmp = char</SourceLine>
   <SourceLine>tmp = buffer.getText(substart + self.offset, match.SubExpressionString(0).len)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>select case char</SourceLine>
   <SourceLine>case chr(9) //tab</SourceLine>
   <SourceLine>addWord new TextSegment(substart, match.SubExpressionString(0).len, TextSegment.TYPE_TAB, defaultColor)</SourceLine>
   <SourceLine>case " "//space</SourceLine>
   <SourceLine>addWord new TextSegment(substart, match.SubExpressionString(0).len, TextSegment.TYPE_SPACE, defaultColor)</SourceLine>
   <SourceLine>case chr(10), chr(13), chr(13) + chr(10)//eol</SourceLine>
   <SourceLine>addWord new TextSegment(substart, match.SubExpressionString(0).len, TextSegment.TYPE_EOL, defaultColor)</SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>match = scanner.Search</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//add any trailing text</SourceLine>
   <SourceLine>if offset&lt;  text.len then</SourceLine>
   <SourceLine>addWord new TextSegment(offset, text.len - offset, TextSegment.TYPE_WORD, defaultColor)</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>tmp = text.Mid(offset + 1)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>buffer as gapBuffer, defaultColor as color</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>PlaceholderForOffset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function PlaceholderForOffset(offset as Integer) As TextPlaceholder</SourceLine>
   <SourceLine>for each placeholder as TextPlaceholder in Placeholders</SourceLine>
   <SourceLine>if Placeholder.inRange(offset - self.offset) then Return Placeholder</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>Return nil</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as Integer</ItemParams>
  <ItemResult>TextPlaceholder</ItemResult>
 </Method>
 <Method>
  <ItemName>PrinterPaint</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function PrinterPaint(storage as gapBuffer, g as graphics, x as double, y as double, w as integer, defaultColor as color, displayInvisible as boolean, wrap as boolean) As integer</SourceLine>
   <SourceLine>//draws this line</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim ox, lines as Integer</SourceLine>
   <SourceLine>ox = x</SourceLine>
   <SourceLine>lines = 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if there are no words in this line, we need to at least quick-parse it so we can display it.</SourceLine>
   <SourceLine>if UBound(Words) &lt; 0 and length &gt; 0 then</SourceLine>
   <SourceLine>ParseLine(storage, defaultColor)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim words() as TextSegment</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>width = 0</SourceLine>
   <SourceLine>dim text as String</SourceLine>
   <SourceLine>dim word as TextSegment</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//make copies of tokens, in case we need to split</SourceLine>
   <SourceLine>for each word in self.words</SourceLine>
   <SourceLine>words.Append word.Clone</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//paint tokens</SourceLine>
   <SourceLine>for i as Integer = 0 to UBound(Words)</SourceLine>
   <SourceLine>Word = words(i)</SourceLine>
   <SourceLine>g.ForeColor = HighlightColor.darkerColor(50)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if word.TYPE = TYPE_SPACE then</SourceLine>
   <SourceLine>text = " "</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf Word.TYPE = TYPE_TAB then</SourceLine>
   <SourceLine>text = TABCHAR</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif Word.TYPE = TYPE_EOL then</SourceLine>
   <SourceLine>if displayInvisible then</SourceLine>
   <SourceLine>text = VISIBLEEOLCHAR</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>text = ""</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif word.TYPE = TYPE_PLACEHOLDER then</SourceLine>
   <SourceLine>//Highlight color</SourceLine>
   <SourceLine>if highlighted then</SourceLine>
   <SourceLine>g.ForeColor = word.textColor</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>g.ForeColor = defaultColor</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>text = PlaceholderPaddingString + storage.getText(TextPlaceholder(word).textRange.offset + offset, TextPlaceholder(word).textRange.length) + PlaceholderPaddingString</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>//Highlight color</SourceLine>
   <SourceLine>if highlighted then</SourceLine>
   <SourceLine>g.ForeColor = word.textColor</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>g.ForeColor = defaultColor</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>text = storage.getText(word.offset + offset, word.length)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.Bold = Word.bold or bold</SourceLine>
   <SourceLine>g.Underline = Word.underline or underline</SourceLine>
   <SourceLine>g.Italic = word.italic or italic</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//cache width</SourceLine>
   <SourceLine>if word.lastFont &lt;&gt; g.TextFont or word.lastSize &lt;&gt; g.TextSize or showInvisible &lt;&gt; displayInvisible then</SourceLine>
   <SourceLine>word.width = -1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>if word.width &lt; 0 then</SourceLine>
   <SourceLine>word.width = g.StringWidth(text)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//text wrap</SourceLine>
   <SourceLine>if x + word.width &gt; ox + w then</SourceLine>
   <SourceLine>//split word?</SourceLine>
   <SourceLine>if Word.width &gt; w then</SourceLine>
   <SourceLine>dim idx as Integer</SourceLine>
   <SourceLine>for idx = 1 to word.length</SourceLine>
   <SourceLine>if g.StringWidth(storage.getText(word.offset + offset, idx)) &gt;= w then exit for</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>idx = idx - 1</SourceLine>
   <SourceLine>dim tmp as TextSegment = word.SplitAtLength(idx)</SourceLine>
   <SourceLine>if wrap then words.Insert i + 1, tmp</SourceLine>
   <SourceLine>i = i - 1</SourceLine>
   <SourceLine>Continue for</SourceLine>
   <SourceLine>elseif wrap then</SourceLine>
   <SourceLine>y = y + g.TextHeight</SourceLine>
   <SourceLine>x = ox</SourceLine>
   <SourceLine>lines = lines + 1</SourceLine>
   <SourceLine>else //just clip</SourceLine>
   <SourceLine>Return lines</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//draw background, if any</SourceLine>
   <SourceLine>if word.hasBackgroundColor and word.Type &lt;&gt; word.TYPE_EOL then</SourceLine>
   <SourceLine>dim oc as Color = g.ForeColor</SourceLine>
   <SourceLine>g.ForeColor = word.backgroundColor</SourceLine>
   <SourceLine>g.FillRect ceil(x), y - g.TextAscent, ceil(word.width), g.TextHeight + 1</SourceLine>
   <SourceLine>g.ForeColor = oc</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//draw txt</SourceLine>
   <SourceLine>if (word.Type = TYPE_WORD or word.Type = TYPE_PLACEHOLDER or displayInvisible) and x + word.width &gt;= 0 and  x &lt; g.Width and y &gt;= 0 and y &lt;= g.Height + g.TextHeight  then</SourceLine>
   <SourceLine>if Word.TYPE = TYPE_TAB then</SourceLine>
   <SourceLine>Text = VISIBLETABCHAR //a small hack to make the visible char the same width as the tab</SourceLine>
   <SourceLine>ElseIf Word.TYPE = TYPE_SPACE then</SourceLine>
   <SourceLine>text = VISIBLESPACECHAR</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if word.TYPE = TYPE_PLACEHOLDER then</SourceLine>
   <SourceLine>dim oldc as color = g.ForeColor</SourceLine>
   <SourceLine>g.ForeColor = TextPlaceholder(word).placeholderBackgroundColor</SourceLine>
   <SourceLine>g.fillRoundRect x, y - g.TextAscent, word.width, g.TextHeight + 1, g.TextHeight, g.TextHeight</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.ForeColor = TextPlaceholder(word).placeholderBackgroundColor.darkerColor(30)</SourceLine>
   <SourceLine>g.DrawRoundRect x, y - g.TextAscent, word.width, g.TextHeight + 1, g.TextHeight, g.TextHeight</SourceLine>
   <SourceLine>g.ForeColor = oldc</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//utf-16 just won't work correctly..</SourceLine>
   <SourceLine>if text.Encoding &lt;&gt; nil and text.Encoding.Equals(encodings.UTF16) then text = text + " "</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.DrawString text, x, y</SourceLine>
   <SourceLine>'g.DrawRect x,y - g.TextAscent,word.width,g.TextHeight</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>x = x + word.Width</SourceLine>
   <SourceLine>width = width + Word.width</SourceLine>
   <SourceLine>word.lastFont = g.TextFont</SourceLine>
   <SourceLine>word.lastSize = g.TextSize</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>showInvisible = displayInvisible</SourceLine>
   <SourceLine>Return lines</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>storage as gapBuffer, g as graphics, x as double, y as double, w as integer, defaultColor as color, displayInvisible as boolean, wrap as boolean</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>TabWidth</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub TabWidth(assigns value as integer)</SourceLine>
   <SourceLine>TABCHAR = ""</SourceLine>
   <SourceLine>for i as Integer = 1 to value</SourceLine>
   <SourceLine>TABCHAR = TABCHAR + " "</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim word as TextSegment</SourceLine>
   <SourceLine>for each Word in words</SourceLine>
   <SourceLine>word.width = -1</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>assigns value as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>TextWidth</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function TextWidth(buffer as gapBuffer, g as graphics, displayInvisible as boolean, length as integer = - 1) As Single</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//gets the text to be displayed by this line.</SourceLine>
   <SourceLine>if length = 0 then Return 0</SourceLine>
   <SourceLine>if length &lt; 0 then</SourceLine>
   <SourceLine>length = self.length</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if self.lastFont &lt;&gt; g.TextFont or self.lastSize &lt;&gt; g.TextSize then width = 0</SourceLine>
   <SourceLine>if TotalWidth &gt; 0 then Return TotalWidth</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>self.lastFont = g.TextFont</SourceLine>
   <SourceLine>self.lastSize = g.TextSize</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//unparsed? return the raw text</SourceLine>
   <SourceLine>if UBound(words) &lt; 0 then</SourceLine>
   <SourceLine>ParseLine(buffer, &amp;c00)</SourceLine>
   <SourceLine>if UBound(words) &lt; 0 then Return g.StringWidth(buffer.getText(self.offset, self.length))</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim ret as Single</SourceLine>
   <SourceLine>dim word as TextSegment</SourceLine>
   <SourceLine>dim charsToRead as Integer</SourceLine>
   <SourceLine>dim text as String</SourceLine>
   <SourceLine>dim u as Integer = UBound(words)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as integer = 0 to u</SourceLine>
   <SourceLine>Word = words(i)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>charsToRead = word.length</SourceLine>
   <SourceLine>select case word.TYPE</SourceLine>
   <SourceLine>case TextSegment.TYPE_SPACE</SourceLine>
   <SourceLine>text = " "</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case TextSegment.TYPE_TAB</SourceLine>
   <SourceLine>text = TABCHAR</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case TextSegment.TYPE_EOL</SourceLine>
   <SourceLine>if displayInvisible then</SourceLine>
   <SourceLine>text = " "</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>text = ""</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case TextSegment.TYPE_PLACEHOLDER</SourceLine>
   <SourceLine>text = PlaceholderPaddingString + buffer.getText(TextPlaceholder(word).textRange.offset + offset, TextPlaceholder(word).textRange.length) + PlaceholderPaddingString</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>//find out the number of chars to read in the current token</SourceLine>
   <SourceLine>if word.offset + word.length &gt; length then</SourceLine>
   <SourceLine>'charsToRead = word.length</SourceLine>
   <SourceLine>'else</SourceLine>
   <SourceLine>charsToRead = length - word.offset</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>text = buffer.getText(word.offset + self.offset, charsToRead)</SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if word.lastFont &lt;&gt; g.TextFont or word.lastSize &lt;&gt; g.TextSize then</SourceLine>
   <SourceLine>word.width = -1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if word.width &lt; 0 or charsToRead &lt; word.length then</SourceLine>
   <SourceLine>//measure</SourceLine>
   <SourceLine>g.Bold = word.bold</SourceLine>
   <SourceLine>g.Italic = Word.italic</SourceLine>
   <SourceLine>g.Underline = Word.underline</SourceLine>
   <SourceLine>ret = ret + g.StringWidth(text)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>ret = ret + word.width</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>word.lastFont = g.TextFont</SourceLine>
   <SourceLine>word.lastSize = g.TextSize</SourceLine>
   <SourceLine>if word.offset + Word.length &gt;= length then exit for</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return ret</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>buffer as gapBuffer, g as graphics, displayInvisible as boolean, length as integer = - 1</ItemParams>
  <ItemResult>Single</ItemResult>
 </Method>
 <Method>
  <ItemName>TotalWidth</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function TotalWidth() As integer</SourceLine>
   <SourceLine>Return width</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Property>
  <ItemName>Context</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Context As highlightContext</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Context As highlightContext</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>delimiterLength</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>delimiterLength As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>delimiterLength As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>folded</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>folded As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>folded As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>highlighted</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>highlighted As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>highlighted As boolean</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>icon</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>icon As picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>icon As picture</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>isBlockEnd</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>isBlockEnd As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>isBlockEnd As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>isBlockStart</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>isBlockStart As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>isBlockStart As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>isDirty</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>isDirty As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>isDirty As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>LineSymbols</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>LineSymbols As dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>LineSymbols As dictionary</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>placeholders()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>placeholders() As TextPlaceholder</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>placeholders() As TextPlaceholder</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>ScreenWidth</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ScreenWidth As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ScreenWidth As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return width</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>showInvisible</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>showInvisible As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>showInvisible As boolean</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>TABCHAR</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TABCHAR As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TABCHAR As String</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>visible</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>visible As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>visible As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>words()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>words() As textsegment</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>words() As textsegment</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>BackgroundColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
   <InheritsFrom>TextSegment</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>bold</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
   <InheritsFrom>TextSegment</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EndOffset</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>DataRange</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HasBackgroundColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>boolean</ItemType>
   <InheritsFrom>TextSegment</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ID</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
   <InheritsFrom>TextSegment</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>italic</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
   <InheritsFrom>TextSegment</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>length</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>DataRange</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>offset</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>DataRange</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
   <InheritsFrom>TextSegment</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Type</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>TextSegment</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>underline</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
   <InheritsFrom>TextSegment</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>width</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>double</ItemType>
   <InheritsFrom>TextSegment</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>delimiterLength</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>folded</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>icon</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>picture</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>isBlockEnd</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>isBlockStart</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>isDirty</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>false</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ScreenWidth</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>visible</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>PlaceholderPaddingString</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>PlaceholderPaddingString</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>&#32;&#32;</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>VISIBLEEOLCHAR</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>VISIBLEEOLCHAR</ItemName>
  <ItemType>0</ItemType>
  <ItemDef><Hex bytes="2">C2B6</Hex></ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>VISIBLESPACECHAR</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>VISIBLESPACECHAR</ItemName>
  <ItemType>0</ItemType>
  <ItemDef><Hex bytes="2">C2B7</Hex></ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>VISIBLETABCHAR</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>VISIBLETABCHAR</ItemName>
  <ItemType>0</ItemType>
  <ItemDef></ItemDef>
  <ItemFlags>1</ItemFlags>
  <ConstantInstance>
   <ItemPlatform>1</ItemPlatform>
   <ItemLanguage>0</ItemLanguage>
   <ItemDef><Hex bytes="3">E29E9D</Hex></ItemDef>
  </ConstantInstance>
  <ConstantInstance>
   <ItemPlatform>2</ItemPlatform>
   <ItemLanguage>0</ItemLanguage>
   <ItemDef><Hex bytes="2">C2BB</Hex></ItemDef>
  </ConstantInstance>
 </Constant>
</block>
<block type="Module" ID="183882232">
 <ObjName>TextPlaceholder</ObjName>
 <ObjContainerID>999428013</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>TextSegment</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Clone</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Clone() As textsegment</SourceLine>
   <SourceLine>dim tmp as new TextPlaceholder(offset, length, textRange.offset, textRange.length, self.textColor, backgroundColor, bold, italic, underline)</SourceLine>
   <SourceLine>tmp.lastFont = lastFont</SourceLine>
   <SourceLine>tmp.lastSize = lastSize</SourceLine>
   <SourceLine>tmp.Type = TYPE</SourceLine>
   <SourceLine>tmp.width = width</SourceLine>
   <SourceLine>tmp.placeholderBackgroundColor = placeholderBackgroundColor</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return tmp</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>textsegment</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(offset as integer, length as integer, labelOffset as integer, labelLength as Integer, highlightColor as color, backgroundColor as color, bold as boolean = false, italic as boolean = false, underline as boolean = false)</SourceLine>
   <SourceLine>// Calling the overridden superclass constructor.</SourceLine>
   <SourceLine>// Note that this may need modifications if there are multiple constructor choices.</SourceLine>
   <SourceLine>// Possible constructor calls:</SourceLine>
   <SourceLine>// Constructor(offset as integer, length as integer, type as integer, highlightColor as color = &amp;c0, backgroundColor as color = &amp;c0, bold as boolean = false, italic as boolean = false, underline as boolean = false) -- From TextSegment</SourceLine>
   <SourceLine>// Constructor() -- From TextSegment</SourceLine>
   <SourceLine>// Constructor(offset as integer, length as integer) -- From DataRange</SourceLine>
   <SourceLine>// Constructor() -- From DataRange</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Super.Constructor(offset, length, TextSegment.TYPE_PLACEHOLDER, HighlightColor, &amp;c0, bold, italic, underline)</SourceLine>
   <SourceLine>placeholderBackgroundColor = backgroundColor</SourceLine>
   <SourceLine>if placeholderBackgroundColor = &amp;c0 then placeholderBackgroundColor = &amp;ce9effa</SourceLine>
   <SourceLine>textRange = new DataRange(labelOffset, labelLength)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer, length as integer, labelOffset as integer, labelLength as Integer, highlightColor as color, backgroundColor as color, bold as boolean = false, italic as boolean = false, underline as boolean = false</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>inRange</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function inRange(offset as integer) As boolean</SourceLine>
   <SourceLine>Return offset &gt; self.offset and offset &lt; self.offset + self.length //changed to  &lt; instead of &lt;= per Thomas Tempelmann's suggestion.</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Property>
  <ItemName>placeholderBackgroundColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>placeholderBackgroundColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>placeholderBackgroundColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>textRange</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>textRange As DataRange</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>textRange As DataRange</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>BackgroundColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
   <InheritsFrom>TextSegment</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>bold</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
   <InheritsFrom>TextSegment</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EndOffset</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>DataRange</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HasBackgroundColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>boolean</ItemType>
   <InheritsFrom>TextSegment</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ID</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
   <InheritsFrom>TextSegment</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>italic</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
   <InheritsFrom>TextSegment</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>length</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>DataRange</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>offset</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>DataRange</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
   <InheritsFrom>TextSegment</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Type</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>TextSegment</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>underline</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
   <InheritsFrom>TextSegment</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>width</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>double</ItemType>
   <InheritsFrom>TextSegment</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>placeholderBackgroundColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="956409622">
 <ObjName>TextSegment</ObjName>
 <ObjContainerID>999428013</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>DataRange</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Clone</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Clone() As textsegment</SourceLine>
   <SourceLine>dim tmp as new TextSegment</SourceLine>
   <SourceLine>tmp.backgroundColor = backgroundColor</SourceLine>
   <SourceLine>tmp.bold = bold</SourceLine>
   <SourceLine>tmp.hasBackgroundColor = hasBackgroundColor</SourceLine>
   <SourceLine>tmp.italic = italic</SourceLine>
   <SourceLine>tmp.lastFont = lastFont</SourceLine>
   <SourceLine>tmp.lastSize = lastSize</SourceLine>
   <SourceLine>tmp.textColor = textColor</SourceLine>
   <SourceLine>tmp.Type = TYPE</SourceLine>
   <SourceLine>tmp.underline = underline</SourceLine>
   <SourceLine>tmp.width = width</SourceLine>
   <SourceLine>tmp.offset = offset</SourceLine>
   <SourceLine>tmp.length = length</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return tmp</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>textsegment</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>Constructor(0,0,0)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(offset as integer, length as integer, type as integer, highlightColor as color = &amp;c0, backgroundColor as color = &amp;c0, bold as boolean = false, italic as boolean = false, underline as boolean = false)</SourceLine>
   <SourceLine>super.Constructor(offset, length)</SourceLine>
   <SourceLine>self.Type = TYPE</SourceLine>
   <SourceLine>self.textColor = highlightColor</SourceLine>
   <SourceLine>self.backgroundColor = backgroundColor</SourceLine>
   <SourceLine>hasBackgroundColor = backgroundColor &lt;&gt; &amp;c0</SourceLine>
   <SourceLine>self.bold = bold</SourceLine>
   <SourceLine>self.italic = italic</SourceLine>
   <SourceLine>self.underline = underline</SourceLine>
   <SourceLine>width = -1</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer, length as integer, type as integer, highlightColor as color = &amp;c0, backgroundColor as color = &amp;c0, bold as boolean = false, italic as boolean = false, underline as boolean = false</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SplitAtLength</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function SplitAtLength(length as integer) As textsegment</SourceLine>
   <SourceLine>dim tmp as TextSegment = clone</SourceLine>
   <SourceLine>tmp.offset = tmp.offset + length</SourceLine>
   <SourceLine>tmp.length = self.length - length</SourceLine>
   <SourceLine>tmp.width = -1</SourceLine>
   <SourceLine>self.length = length</SourceLine>
   <SourceLine>self.width = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return tmp</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>length as integer</ItemParams>
  <ItemResult>textsegment</ItemResult>
 </Method>
 <Property>
  <ItemName>BackgroundColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>BackgroundColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>BackgroundColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Bold</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Bold As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Bold As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>HasBackgroundColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>HasBackgroundColor As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>HasBackgroundColor As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>ID</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ID As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ID As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Italic</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Italic As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Italic As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>lastFont</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>lastFont As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lastFont As string</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>lastSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>lastSize As integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lastSize As integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>TextColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Type</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Type As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Type As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Underline</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Underline As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Underline As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Width</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Width As double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Width As double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>BackgroundColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>bold</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EndOffset</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>DataRange</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HasBackgroundColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ID</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>italic</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>length</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>DataRange</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>offset</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>DataRange</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Type</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>underline</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>width</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>double</ItemType>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>TYPE_EOL</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>TYPE_EOL</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>3</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>TYPE_PLACEHOLDER</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>TYPE_PLACEHOLDER</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>4</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>TYPE_SPACE</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>TYPE_SPACE</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>1</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>TYPE_TAB</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>TYPE_TAB</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>2</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>TYPE_WORD</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>TYPE_WORD</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>0</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
</block>
<block type="Folder" ID="23860225">
 <ObjName>MessageCenter</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
</block>
<block type="Module" ID="-1085257516">
 <ObjName>Message</ObjName>
 <ObjContainerID>23860225</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>Dictionary</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>addInfo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub addInfo(key as variant, info as variant)</SourceLine>
   <SourceLine>//Add info to the message in a key/data fashion</SourceLine>
   <SourceLine>value(key)=info</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>key as variant, info as variant</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(type as variant, sender as object)</SourceLine>
   <SourceLine>self.type = Type</SourceLine>
   <SourceLine>messageSender = sender</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>type as variant, sender as object</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Info</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Info(key as variant) As variant</SourceLine>
   <SourceLine>//get the info for a given key</SourceLine>
   <SourceLine>return Lookup(key,nil)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>key as variant</ItemParams>
  <ItemResult>variant</ItemResult>
 </Method>
 <Method>
  <ItemName>InfoCount</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function InfoCount() As integer</SourceLine>
   <SourceLine>return count</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>MessageType</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function MessageType() As variant</SourceLine>
   <SourceLine>return type</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>variant</ItemResult>
 </Method>
 <Method>
  <ItemName>Sender</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Sender() As object</SourceLine>
   <SourceLine>return messageSender</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>object</ItemResult>
 </Method>
 <Method>
  <ItemName>ToString</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ToString() As string</SourceLine>
   <SourceLine>dim tmp as String</SourceLine>
   <SourceLine>dim key as String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tmp="Type: "+messageType+EndOfLine</SourceLine>
   <SourceLine>for Each key in Keys</SourceLine>
   <SourceLine>tmp=tmp+key+": "+Value(key).StringValue+EndOfLine</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return tmp</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>string</ItemResult>
 </Method>
 <Property>
  <ItemName>messageSender</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>messageSender As object</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>messageSender As object</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>type</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>type As variant</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>type As variant</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>BinCount</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Dictionary</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Count</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Dictionary</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="-1085257487">
 <ObjName>MessageCenter</ObjName>
 <ObjContainerID>23860225</ObjContainerID>
 <IsClass>0</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>queueMessage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub queueMessage(theMessage as Message)</SourceLine>
   <SourceLine>if messages = nil then return //no receivers</SourceLine>
   <SourceLine>if theMessage = nil then Return //???</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if queue = nil then</SourceLine>
   <SourceLine>queue = new MessageQueue</SourceLine>
   <SourceLine>queue.mode = Timer.ModeMultiple</SourceLine>
   <SourceLine>queue.Period = 50 '100</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>queue.addMessage(theMessage)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>theMessage as Message</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>registerForMessage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub registerForMessage(extends theReceiver as MessageReceiver, messageType as variant)</SourceLine>
   <SourceLine>//register a message receiver for a specific msg type</SourceLine>
   <SourceLine>if messages = nil then</SourceLine>
   <SourceLine>messages = new dictionary</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim tmp as dictionary</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if messages.hasKey(messageType) then</SourceLine>
   <SourceLine>tmp = messages.value(messageType)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>tmp = new Dictionary</SourceLine>
   <SourceLine>messages.value(messageType) = tmp</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tmp.value(theReceiver) = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends theReceiver as MessageReceiver, messageType as variant</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>sendMessage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub sendMessage(theMessage as Message)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if messages = nil then return //no receivers</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim type as Variant</SourceLine>
   <SourceLine>type = theMessage.messageType</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//no receivers for msg</SourceLine>
   <SourceLine>if not messages.hasKey(type) then return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim item as integer</SourceLine>
   <SourceLine>dim receivers as dictionary</SourceLine>
   <SourceLine>dim receiver as messageReceiver</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//send to all receivers</SourceLine>
   <SourceLine>receivers=messages.value(type)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for each receiver in receivers.Keys</SourceLine>
   <SourceLine>receiver.receiveMessage(theMessage)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>theMessage as Message</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>unregisterForMessage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub unregisterForMessage(extends theReceiver as MessageReceiver, messageType as variant)</SourceLine>
   <SourceLine>if messages = nil then return //no receivers</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//no such message</SourceLine>
   <SourceLine>if not messages.hasKey(messageType) then return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//remove receiver</SourceLine>
   <SourceLine>dim receivers as dictionary</SourceLine>
   <SourceLine>receivers = messages.value(messageType)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not receivers.hasKey(theReceiver) then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>receivers.remove(thereceiver)</SourceLine>
   <SourceLine>if receivers.Count = 0 then Messages.Remove(messageType)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends theReceiver as MessageReceiver, messageType as variant</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>unregisterReceiver</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub unregisterReceiver(extends theReceiver as messageReceiver)</SourceLine>
   <SourceLine>if messages = nil then return //no receivers</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find the object within our registered receivers</SourceLine>
   <SourceLine>dim item as integer</SourceLine>
   <SourceLine>dim type as Variant</SourceLine>
   <SourceLine>dim receivers as dictionary</SourceLine>
   <SourceLine>dim typesToRemove() as Variant</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for item=0 to messages.count-1</SourceLine>
   <SourceLine>//msg type</SourceLine>
   <SourceLine>type = messages.key(item)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//receivers</SourceLine>
   <SourceLine>receivers = messages.value(type)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not receivers.hasKey(theReceiver) then Continue for</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>receivers.remove(theReceiver)</SourceLine>
   <SourceLine>if receivers.Count = 0 then typesToRemove.Append(type)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for each type in typesToRemove</SourceLine>
   <SourceLine>if Messages.HasKey(type) then Messages.Remove(Type)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>extends theReceiver as messageReceiver</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Note>
  <ItemName>Info</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>Info</NoteLine>
   <NoteLine>Based on the article "Implementing a MessageCenter Module"</NoteLine>
   <NoteLine>by Charles Yeomans</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Available in realbasic developer 3.6</NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>messages</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>messages As Dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>messages As Dictionary</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>queue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>queue As MessageQueue</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>queue As MessageQueue</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="-1085256597">
 <ObjName>MessageQueue</ObjName>
 <ObjContainerID>23860225</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>Timer</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <HookInstance>
  <ItemName>Action</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Action()</SourceLine>
   <SourceLine>//timer tick... send the next queued msg</SourceLine>
   <SourceLine>if ubound(queue)&lt;0 then return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim msg as Message</SourceLine>
   <SourceLine>msg=queue(0)</SourceLine>
   <SourceLine>queue.remove(0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>MessageCenter.sendMessage(msg)</SourceLine>
   <SourceLine>//if queue empty, stop timer</SourceLine>
   <SourceLine>if UBound(queue)&lt;0 then me.Mode=0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <Method>
  <ItemName>addMessage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub addMessage(theMessage as Message)</SourceLine>
   <SourceLine>queue.append theMessage</SourceLine>
   <SourceLine>//start timer if stopped.</SourceLine>
   <SourceLine>if me.Mode=0 then me.Mode=2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>theMessage as Message</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>queue(-1)</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>queue(-1) As Message</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>queue(-1) As Message</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Timer</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <InheritsFrom>Timer</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Mode</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>2</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <InheritsFrom>Timer</InheritsFrom>
   <Enumeration>
    <ItemDef>0 - Off</ItemDef>
    <ItemDef>1 - Single</ItemDef>
    <ItemDef>2 - Multiple</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Timer</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Period</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>1000</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Timer</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Timer</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <InheritsFrom>Timer</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="-1085257500">
 <ObjName>MessageReceiver</ObjName>
 <ObjContainerID>23860225</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>1</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>receiveMessage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub receiveMessage(theMessage as Message)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>theMessage as Message</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Folder" ID="1481871117">
 <ObjName>SyntaxHighlightEngine</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
</block>
<block type="Module" ID="378378458">
 <ObjName>DocumentSymbol</ObjName>
 <ObjContainerID>1481871117</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(name as string, offset as integer, type as string)</SourceLine>
   <SourceLine>self.Name = name</SourceLine>
   <SourceLine>self.Offset = Offset</SourceLine>
   <SourceLine>self.Type = type</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>name as string, offset as integer, type as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>Name</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Name As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Name As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Offset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Offset As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Offset As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Type</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Type As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Type As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Offset</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Type</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="1063843830">
 <ObjName>HighlightContext</ObjName>
 <ObjContainerID>1481871117</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>addKeyword</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub addKeyword(keyword as string)</SourceLine>
   <SourceLine>if keyword="" then Return</SourceLine>
   <SourceLine>keywords.Append(keyword)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>keyword as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>addRegEx</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub addRegEx(newRegEx as string)</SourceLine>
   <SourceLine>if newRegEx="" then Return</SourceLine>
   <SourceLine>regexes.Append(newRegEx)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>newRegEx as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>addSubContext</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub addSubContext(entry as HighlightContext)</SourceLine>
   <SourceLine>if entry=nil then Return</SourceLine>
   <SourceLine>subContexts.Append(entry)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>subExpressionCount = subExpressionCount + 1</SourceLine>
   <SourceLine>subExpressionIndex.Append subExpressionCount</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// add pattern to search string</SourceLine>
   <SourceLine>if searchPattern &lt;&gt; "" then searchPattern = searchPattern + "|"</SourceLine>
   <SourceLine>searchPattern = searchPattern + "(" + entry.contextRegEx + ")"</SourceLine>
   <SourceLine>fixSubExpressionCount(entry.contextRegEx)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>entry as HighlightContext</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>appendToXMLNode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub appendToXMLNode(parent as xmlNode, depth as integer = 2)</SourceLine>
   <SourceLine>//appends this context to the parent xml node</SourceLine>
   <SourceLine>//this is done to export the syntax definition as an xml file.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim xdoc as XmlDocument</SourceLine>
   <SourceLine>dim node, context as XmlNode</SourceLine>
   <SourceLine>dim tmpObj as Variant</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>xdoc = parent.OwnerDocument</SourceLine>
   <SourceLine>context=parent.AppendChild(xdoc.CreateElement("highlightContext"))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//name</SourceLine>
   <SourceLine>context.SetAttribute("name",Name)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//HighlightColor</SourceLine>
   <SourceLine>tmpObj=HighlightColor</SourceLine>
   <SourceLine>context.SetAttribute("highlightColor","#"+Hex(tmpObj.IntegerValue))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//BackgroundColor</SourceLine>
   <SourceLine>if HasBackgroundColor then</SourceLine>
   <SourceLine>tmpObj=BackgroundColor</SourceLine>
   <SourceLine>context.SetAttribute("backgroundColor","#"+Hex(tmpObj.IntegerValue))</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//bold</SourceLine>
   <SourceLine>if Bold then</SourceLine>
   <SourceLine>context.SetAttribute("bold", "true")</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>//italic</SourceLine>
   <SourceLine>if Italic then</SourceLine>
   <SourceLine>context.SetAttribute("italic", "true")</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>//Underline</SourceLine>
   <SourceLine>if Underline then</SourceLine>
   <SourceLine>context.SetAttribute("underline", "true")</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//start regex?</SourceLine>
   <SourceLine>if StartRegEx&lt;&gt;"" then</SourceLine>
   <SourceLine>node=context.AppendChild(xdoc.CreateElement("startRegEx"))</SourceLine>
   <SourceLine>node.AppendChild(xdoc.CreateTextNode(StartRegEx))</SourceLine>
   <SourceLine>IndentNode(node,depth+1)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//end regex?</SourceLine>
   <SourceLine>if EndRegEx&lt;&gt;"" then</SourceLine>
   <SourceLine>node=context.AppendChild(xdoc.CreateElement("endRegEx"))</SourceLine>
   <SourceLine>node.AppendChild(xdoc.CreateTextNode(EndRegEx))</SourceLine>
   <SourceLine>IndentNode(node,depth+1)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//entry regex?</SourceLine>
   <SourceLine>if EntryRegEx&lt;&gt;"" then</SourceLine>
   <SourceLine>node=context.AppendChild(xdoc.CreateElement("entryRegEx"))</SourceLine>
   <SourceLine>node.AppendChild(xdoc.CreateTextNode(EntryRegEx))</SourceLine>
   <SourceLine>IndentNode(node,depth+1)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//keywords</SourceLine>
   <SourceLine>if UBound(keywords)&gt;-1 then</SourceLine>
   <SourceLine>node=context.AppendChild(xdoc.CreateElement("keywords"))</SourceLine>
   <SourceLine>dim tmp as String</SourceLine>
   <SourceLine>dim kw as XmlNode</SourceLine>
   <SourceLine>for each tmp in keywords</SourceLine>
   <SourceLine>kw=node.AppendChild(xdoc.CreateElement("string"))</SourceLine>
   <SourceLine>kw.AppendChild(xdoc.CreateTextNode(tmp))</SourceLine>
   <SourceLine>IndentNode(kw,depth+2)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>IndentNode(node,depth+1,true)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//regexes</SourceLine>
   <SourceLine>if UBound(regexes)&gt;-1 then</SourceLine>
   <SourceLine>node=context.AppendChild(xdoc.CreateElement("regExes"))</SourceLine>
   <SourceLine>dim tmp as String</SourceLine>
   <SourceLine>dim kw as XmlNode</SourceLine>
   <SourceLine>for each tmp in regexes</SourceLine>
   <SourceLine>kw=node.AppendChild(xdoc.CreateElement("string"))</SourceLine>
   <SourceLine>kw.AppendChild(xdoc.CreateTextNode(tmp))</SourceLine>
   <SourceLine>IndentNode(kw,depth+2)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>IndentNode(node,depth+1,true)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//finally, subcontexs, if any</SourceLine>
   <SourceLine>dim subContext as HighlightContext</SourceLine>
   <SourceLine>for each subContext in subContexts</SourceLine>
   <SourceLine>if subContext.Name = "fieldwhitespace" or subContext.isPlaceholder then Continue for</SourceLine>
   <SourceLine>subContext.appendToXMLNode(context,depth+1)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>IndentNode(Context,depth, true)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>parent as xmlNode, depth as integer = 2</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(caseSensitive as boolean, createBlank as boolean = true)</SourceLine>
   <SourceLine>//init regex scanner</SourceLine>
   <SourceLine>scanner=new RegEx</SourceLine>
   <SourceLine>scanner.Options.DotMatchAll=true</SourceLine>
   <SourceLine>scanner.Options.CaseSensitive=caseSensitive</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if add whitespace tokenizer</SourceLine>
   <SourceLine>if createBlank then</SourceLine>
   <SourceLine>dim blankSpaceContext as new HighlightContext(false, false)</SourceLine>
   <SourceLine>blankSpaceContext.EntryRegEx = "([ ]|\t|\x0A|(?:\x0D\x0A?))"'"([\s])"</SourceLine>
   <SourceLine>blankSpaceContext.Name = "fieldwhitespace"</SourceLine>
   <SourceLine>addSubContext(blankSpaceContext)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>caseSensitive as boolean, createBlank as boolean = true</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ContextRegEx</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ContextRegEx() As string</SourceLine>
   <SourceLine>//return the regex pattern for this context</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if there's a StartRegEx then the pattern is the StartRegEx, the same goes with the EntryRegEx</SourceLine>
   <SourceLine>if StartRegEx&lt;&gt;"" then Return StartRegEx</SourceLine>
   <SourceLine>if entryRegEx&lt;&gt;"" then Return entryRegEx</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//else, if there's a cached version of the regex, return it.</SourceLine>
   <SourceLine>if _contextRegEx&lt;&gt;"" then Return _contextRegEx</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//finally, build the pattern using the keywords, regexes and subcontexts (these are exclusive)</SourceLine>
   <SourceLine>//check for keywords</SourceLine>
   <SourceLine>dim keyword as String</SourceLine>
   <SourceLine>if UBound(keywords)&gt;-1 then</SourceLine>
   <SourceLine>_contextRegEx="\b("</SourceLine>
   <SourceLine>for Each keyword in keywords</SourceLine>
   <SourceLine>_contextRegEx=_contextRegEx+keyword+"|"</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>_contextRegEx=Left(_contextRegEx,_contextRegEx.Len-1)+")\b"</SourceLine>
   <SourceLine>Return _contextRegEx</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//else, check for regexes</SourceLine>
   <SourceLine>dim aRegEx as String</SourceLine>
   <SourceLine>if UBound(regexes)&gt;-1 then</SourceLine>
   <SourceLine>_contextRegEx="("</SourceLine>
   <SourceLine>for Each aRegEx in regexes</SourceLine>
   <SourceLine>_contextRegEx=_contextRegEx+aRegEx+"|"</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>_contextRegEx=Left(_contextRegEx,_contextRegEx.Len-1)+")"</SourceLine>
   <SourceLine>Return _contextRegEx</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>_contextRegEx=subContextRegEx</SourceLine>
   <SourceLine>if _contextRegEx&lt;&gt;"" then Return _contextRegEx</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>string</ItemResult>
 </Method>
 <Method>
  <ItemName>Contexts</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Contexts() As highlightcontext()</SourceLine>
   <SourceLine>dim current, tmp() as HighlightContext</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for each current in subContexts</SourceLine>
   <SourceLine>if current.Name &lt;&gt; "fieldwhitespace" then tmp.Append current</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return tmp</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>highlightcontext()</ItemResult>
 </Method>
 <Method>
  <ItemName>fixSubExpressionCount</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub fixSubExpressionCount(pattern as string)</SourceLine>
   <SourceLine>// determine subexpression count</SourceLine>
   <SourceLine>// determine subexpression count</SourceLine>
   <SourceLine>// This method is original from Nick Lockwood: http://www.charcoaldesign.co.uk/oss#tokenizer</SourceLine>
   <SourceLine>// It speeds up the matching of the matched regex.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim escaped, inCharClass, prevBracket as Boolean = false</SourceLine>
   <SourceLine>escaped = false</SourceLine>
   <SourceLine>for i as integer = 1 to pattern.Len</SourceLine>
   <SourceLine>select case pattern.mid(i,1)</SourceLine>
   <SourceLine>case "\"</SourceLine>
   <SourceLine>escaped = true</SourceLine>
   <SourceLine>prevBracket = false</SourceLine>
   <SourceLine>case "("</SourceLine>
   <SourceLine>dim nextChar as String = pattern.Mid(i+1,1)</SourceLine>
   <SourceLine>if not inCharClass and not escaped and nextChar &lt;&gt; "?" then subExpressionCount = subExpressionCount + 1</SourceLine>
   <SourceLine>prevBracket = false</SourceLine>
   <SourceLine>escaped = false</SourceLine>
   <SourceLine>case "["</SourceLine>
   <SourceLine>if inCharClass or escaped then</SourceLine>
   <SourceLine>prevBracket = false</SourceLine>
   <SourceLine>escaped = false</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>inCharClass = true</SourceLine>
   <SourceLine>prevBracket = true</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>case "]"</SourceLine>
   <SourceLine>if not prevBracket then inCharClass = false</SourceLine>
   <SourceLine>prevBracket = false</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>prevBracket = false</SourceLine>
   <SourceLine>escaped = false</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>pattern as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>highlight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function highlight(text as string, subExpression as string, position as integer, positionB as integer, scanner as regex, tokens() as textsegment, placeholders() as TextPlaceholder) As boolean</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//Highlight this context</SourceLine>
   <SourceLine>dim match as RegExMatch</SourceLine>
   <SourceLine>dim scanNextLine as Boolean = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if there's a start and end regexes we need to find the EndRegEx</SourceLine>
   <SourceLine>if StartRegEx.trim&lt;&gt;"" and EndRegEx&lt;&gt;"" then</SourceLine>
   <SourceLine>//find end...</SourceLine>
   <SourceLine>dim oldPattern as String = scanner.SearchPattern</SourceLine>
   <SourceLine>scanner.SearchPattern = EndRegEx</SourceLine>
   <SourceLine>match=scanner.Search(text, positionB + subExpression.Lenb) //fix, added .lenb to support utf correctly</SourceLine>
   <SourceLine>scanner.SearchPattern = oldPattern</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find the subExpression</SourceLine>
   <SourceLine>if match&lt;&gt;nil then</SourceLine>
   <SourceLine>subExpression=LeftB(text, match.SubExpressionStartB(0)+match.SubExpressionString(0).LenB)</SourceLine>
   <SourceLine>subExpression=Right(subExpression, subExpression.Len-position)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>//no match? then use the rest of the String...</SourceLine>
   <SourceLine>subExpression=Right(text, text.Len-position)</SourceLine>
   <SourceLine>scanner.SearchStartPosition = text.Lenb //fix, added .lenb to support utf correctly</SourceLine>
   <SourceLine>scanNextLine = true</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim entry as HighlightContext</SourceLine>
   <SourceLine>dim substring as String</SourceLine>
   <SourceLine>dim startPos, startPosB, charPos, charPosB as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//scan subcontexts</SourceLine>
   <SourceLine>substring = searchPattern'subContextRegEx</SourceLine>
   <SourceLine>if substring = "" then</SourceLine>
   <SourceLine>//Highlight subExpression</SourceLine>
   <SourceLine>select case subExpression</SourceLine>
   <SourceLine>case " "</SourceLine>
   <SourceLine>tokens.Append(new TextSegment(position, 1, TextSegment.TYPE_SPACE, HighlightColor, BackgroundColor))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case chr(9)</SourceLine>
   <SourceLine>tokens.Append(new TextSegment(position, 1, TextSegment.TYPE_TAB, HighlightColor, BackgroundColor))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case chr(10), chr(13), chr(13) + chr(10)</SourceLine>
   <SourceLine>tokens.Append(new TextSegment(position, subExpression.Len, TextSegment.TYPE_EOL, HighlightColor, BackgroundColor))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>if subExpression.len &gt; 0 then _</SourceLine>
   <SourceLine>tokens.Append(new TextSegment(position, subExpression.Len, TextSegment.TYPE_WORD, HighlightColor, BackgroundColor, bold, italic, underline))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>self.scanner.SearchPattern = substring</SourceLine>
   <SourceLine>match=self.scanner.Search(subExpression)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>while match&lt;&gt;nil</SourceLine>
   <SourceLine>substring=match.SubExpressionString(0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// determine which token was matched</SourceLine>
   <SourceLine>dim tknIndex as integer</SourceLine>
   <SourceLine>for i as integer = 1 to match.SubExpressionCount - 1</SourceLine>
   <SourceLine>if match.SubExpressionString(i) = substring then</SourceLine>
   <SourceLine>tknIndex = subExpressionIndex.IndexOf(i)</SourceLine>
   <SourceLine>exit</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if tknIndex &lt; 0 then //definition can't handle source!</SourceLine>
   <SourceLine>exit while</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>dim start as Integer = match.SubExpressionStartB(0)</SourceLine>
   <SourceLine>dim wtf as String = subExpression.leftb(start)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>charPos = subExpression.leftb(match.SubExpressionStartB(0)).len</SourceLine>
   <SourceLine>charPosB = match.SubExpressionStartB(0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if charPos - startPos &gt; 0 then _</SourceLine>
   <SourceLine>tokens.Append(new TextSegment(startPos + position, charPos - startPos, TextSegment.TYPE_WORD, HighlightColor, BackgroundColor, bold, italic, underline))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>startPos = charPos</SourceLine>
   <SourceLine>startPosB = charPosB</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>entry = subContexts(tknIndex)'findSubContextForMatch(substring, subExpression, start)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//forward execution to subcontext...</SourceLine>
   <SourceLine>if entry&lt;&gt;nil and not entry.isPlaceholder then</SourceLine>
   <SourceLine>call entry.Highlight(subExpression, substring, position + startPos, positionB + startPosB, self.scanner, tokens, placeholders)</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>dim asub as String = subExpression.leftb(self.scanner.SearchStartPosition)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>startPos = subExpression.leftb(self.scanner.SearchStartPosition).len</SourceLine>
   <SourceLine>startPosB = self.scanner.SearchStartPosition</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseIf entry &lt;&gt; nil and entry.isPlaceholder then</SourceLine>
   <SourceLine>dim label as String = match.SubExpressionString(match.SubExpressionCount - 1)</SourceLine>
   <SourceLine>dim tmp as Integer = text.leftb(match.SubExpressionStartB(match.SubExpressionCount - 1)).len</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim placeholder as new TextPlaceholder(startPos + position, substring.Len, tmp + position, label.len, entry.HighlightColor, entry.BackgroundColor, entry.Bold, entry.Italic, entry.Underline)</SourceLine>
   <SourceLine>tokens.Append(placeholder)</SourceLine>
   <SourceLine>placeholders.Append(placeholder)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>startPos = subExpression.leftb(self.scanner.SearchStartPosition).len</SourceLine>
   <SourceLine>startPosB = self.scanner.SearchStartPosition</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>match=self.scanner.Search</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if subExpression.len - startPos &gt; 0 then _</SourceLine>
   <SourceLine>tokens.Append(new TextSegment(startPos + position, subExpression.len - startPos, TextSegment.TYPE_WORD, HighlightColor, BackgroundColor, bold, italic, underline))</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return scanNextLine</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>text as string, subExpression as string, position as integer, positionB as integer, scanner as regex, tokens() as textsegment, placeholders() as TextPlaceholder</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>IndentNode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub IndentNode(node As XmlNode, level As Integer, indentCloseTag As Boolean = False)</SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim s As String</SourceLine>
   <SourceLine>s = EndOfLine</SourceLine>
   <SourceLine>For i = 1 To level</SourceLine>
   <SourceLine>s = s + Chr(9) // Tab</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>node.Parent.Insert(node.OwnerDocument.CreateTextNode(s), node)</SourceLine>
   <SourceLine>If indentCloseTag Then</SourceLine>
   <SourceLine>node.AppendChild(node.OwnerDocument.CreateTextNode(s))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>node As XmlNode, level As Integer, indentCloseTag As Boolean = False</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ListKeywords</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ListKeywords(storage() as string)</SourceLine>
   <SourceLine>//add mine..</SourceLine>
   <SourceLine>dim keyword as String</SourceLine>
   <SourceLine>for each keyword in keywords</SourceLine>
   <SourceLine>storage.Append(keyword)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//then subs...</SourceLine>
   <SourceLine>for i as Integer = 0 to UBound(subContexts)</SourceLine>
   <SourceLine>subContexts(i).ListKeywords(storage)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>storage() as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>LoadFromXmlNode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub LoadFromXmlNode(node as xmlNode)</SourceLine>
   <SourceLine>//load context out of an xml node</SourceLine>
   <SourceLine>dim tmpObj as Variant</SourceLine>
   <SourceLine>dim tmp as String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//Highlight color</SourceLine>
   <SourceLine>Name = node.GetAttribute("name")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tmpObj = "&amp;h" + node.GetAttribute("highlightColor").Mid(1)</SourceLine>
   <SourceLine>HighlightColor = tmpObj.ColorValue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//background color</SourceLine>
   <SourceLine>tmp = node.GetAttribute("backgroundColor")</SourceLine>
   <SourceLine>if tmp &lt;&gt; "" then</SourceLine>
   <SourceLine>tmpObj = "&amp;h" + tmp</SourceLine>
   <SourceLine>BackgroundColor = tmpObj.ColorValue</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//Bold</SourceLine>
   <SourceLine>tmp = node.GetAttribute("bold")</SourceLine>
   <SourceLine>if tmp &lt;&gt; "" then Bold = tmp = "true"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//Italic</SourceLine>
   <SourceLine>tmp = node.GetAttribute("italic")</SourceLine>
   <SourceLine>if tmp &lt;&gt; "" then Italic = tmp = "true"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//Underline</SourceLine>
   <SourceLine>tmp = node.GetAttribute("underline")</SourceLine>
   <SourceLine>if tmp &lt;&gt; "" then Underline = tmp = "true"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim i, j as Integer</SourceLine>
   <SourceLine>dim subNode as XmlNode</SourceLine>
   <SourceLine>dim subContext as HighlightContext</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i=0 to node.ChildCount-1</SourceLine>
   <SourceLine>subNode=node.Child(i)</SourceLine>
   <SourceLine>select case subNode.Name</SourceLine>
   <SourceLine>case "startRegEx"</SourceLine>
   <SourceLine>StartRegEx=subNode.FirstChild.Value</SourceLine>
   <SourceLine>case "endRegEx"</SourceLine>
   <SourceLine>EndRegEx=subNode.FirstChild.Value</SourceLine>
   <SourceLine>case "entryRegEx"</SourceLine>
   <SourceLine>EntryRegEx=subNode.FirstChild.Value</SourceLine>
   <SourceLine>case "keywords"</SourceLine>
   <SourceLine>for j=0 to subNode.ChildCount-1</SourceLine>
   <SourceLine>if not subNode.Child(j) isa XmlComment then _ //add only if it's not a comment</SourceLine>
   <SourceLine>addKeyword(subNode.Child(j).FirstChild.Value)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>case "regExes"</SourceLine>
   <SourceLine>for j=0 to subNode.ChildCount-1</SourceLine>
   <SourceLine>if not subNode.Child(j) isa XmlComment then _</SourceLine>
   <SourceLine>addRegEx(subNode.Child(j).FirstChild.Value)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>case "highlightContext"</SourceLine>
   <SourceLine>subContext=new HighlightContext(scanner.Options.CaseSensitive)</SourceLine>
   <SourceLine>subContext.loadFromXmlNode(subNode)</SourceLine>
   <SourceLine>addSubContext(subContext)</SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>node as xmlNode</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>subContextRegEx</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function subContextRegEx() As string</SourceLine>
   <SourceLine>if _subContextRegEx&lt;&gt;"" then Return _subContextRegEx</SourceLine>
   <SourceLine>dim current as HighlightContext</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//get the regex for the subContexts</SourceLine>
   <SourceLine>if UBound(subContexts)&gt;-1 then</SourceLine>
   <SourceLine>_subContextRegEx="("</SourceLine>
   <SourceLine>for Each current in subContexts</SourceLine>
   <SourceLine>_subContextRegEx=_subContextRegEx+current.contextRegEx+"|"</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>_subContextRegEx=Left(_subContextRegEx,_subContextRegEx.Len-1)+")"</SourceLine>
   <SourceLine>Return _subContextRegEx</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>string</ItemResult>
 </Method>
 <Note>
  <ItemName>About</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>About</NoteLine>
   <NoteLine>Info</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>HighlightContext</NoteLine>
   <NoteLine>By Alex Restrepo</NoteLine>
   <NoteLine>send comments, suggestions, fixes to alexrestrepo@mac.com</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>A little experiment on SyntaxHighlighting</NoteLine>
   <NoteLine>Contains the rules of how to Highlight a Context within a HighlightDefinition</NoteLine>
   <NoteLine>A context is composed of ONE of the following:</NoteLine>
   <NoteLine>- a start and end regexes, everything inside the start and end regexes is part of the context, this is a full match regex (subexpression 0)</NoteLine>
   <NoteLine>- an EntryRegEx, specifies the regular expression to match the whole context (ie: an html tag), the first subexpression of the expression is used (subexpression 1)</NoteLine>
   <NoteLine>- keywords, one or more keywords that need to be Highlighted, you can have multiple keyword contexts with different highlight colors. (array of strings)</NoteLine>
   <NoteLine>- regexes, one or more regular expressions that define variations of the same context (ie: in java #include or #package), subexpression 1 is used for each entry.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Methods:</NoteLine>
   <NoteLine>addKeyword(keyword as String): adds the keyword to the keywords array</NoteLine>
   <NoteLine>addRegEx(newRegEx as String): adds the newRegEx to the regexes array</NoteLine>
   <NoteLine>addSubContext(context as HighlightContext): adds the context as a subcontext of this one, for example: properties within xml tags</NoteLine>
   <NoteLine>appendToXMLNode(parent as xmlNode, depth as integer = 2): appends this context to the parent xml node as an xml node, this is done when exporting the parent definition as an xml.</NoteLine>
   <NoteLine>Constructor(caseSensitive as Boolean): the constructor sets the case sensitiviness of the context.</NoteLine>
   <NoteLine>contextRegEx as string: returns the composed regular expression with all the contents of the context, if the context has StartRegEx and EndRegEx, the contextRegEx is the StartRegEx</NoteLine>
   <NoteLine>Highlight(text as string, style as styledText, subExpression as string, position as integer, scanner as regex): Highlights the subexpression, text is the text of the parent context, position is the position of the first character of the subexpression in the context.</NoteLine>
   <NoteLine>loadFromXmlNode(node as XmlNode): loads the context from the xmlNode.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Properties:</NoteLine>
   <NoteLine>StartRegEx: the regular expression that defines the start of the context (ie: in java, /* for multiline comments)</NoteLine>
   <NoteLine>EndRegEx: the regular expression that marks the end of the context (ie: */)</NoteLine>
   <NoteLine>EntryRegEx: the regular expression that defines the context, ie: an xml tag: (&lt;[^&gt;]*&gt;)</NoteLine>
   <NoteLine>HighlightColor: the HighlightColor for the context</NoteLine>
   <NoteLine>Name: the name of the Context, ie: "Tags"</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Open source under the creative commons license.</NoteLine>
   <NoteLine>Use in whatever way you like... at your own risk :P</NoteLine>
   <NoteLine>let me know if you find it useful.</NoteLine>
   <NoteLine>If you decide to use it in your projects, please give me credit in your about window or documentation, thanks.</NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>BackgroundColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>BackgroundColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>BackgroundColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mBackgroundcolor = value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//this is to make whitespaces the same color as the "parent" context</SourceLine>
   <SourceLine>//whitespace should always be subcontext(0)... if it's available at all.</SourceLine>
   <SourceLine>if UBound(subContexts) &gt; -1 and subContexts(0).Name = "fieldwhitespace" then</SourceLine>
   <SourceLine>subContexts(0).BackgroundColor = value</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mHasBackgroundColor = value &lt;&gt; &amp;c0</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mBackgroundcolor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Bold</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Bold As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Bold As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mBold = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mBold</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>EndRegEx</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>EndRegEx As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>EndRegEx As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>_endregex=value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return _endregex</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>EntryRegEx</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>EntryRegEx As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>EntryRegEx As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>_entryRegEx=value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return _entryRegEx</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>HasBackgroundColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>HasBackgroundColor As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>HasBackgroundColor As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mHasbackgroundcolor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>HighlightColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>HighlightColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>HighlightColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>_color=value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return _color</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>isPlaceholder</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>isPlaceholder As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>isPlaceholder As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Italic</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Italic As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Italic As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mItalic = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mItalic</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>keywords()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>keywords() As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>keywords() As string</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mBackgroundcolor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mBackgroundcolor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mBackgroundcolor As color</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mBold</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mBold As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mBold As boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mHasbackgroundcolor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mHasbackgroundcolor As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mHasbackgroundcolor As boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mItalic</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mItalic As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mItalic As boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mPlaceholderContextDef</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mPlaceholderContextDef As HighlightContext</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mPlaceholderContextDef As HighlightContext</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mUnderline</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mUnderline As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mUnderline As boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Name</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Name As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Name As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>_name=value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return _name</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>PlaceholderContextDef</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>PlaceholderContextDef As HighlightContext</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>PlaceholderContextDef As HighlightContext</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>if mPlaceholderContextDef &lt;&gt; nil then Return //if already set, bail out...</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mPlaceholderContextDef = value</SourceLine>
   <SourceLine>self.addSubContext(value)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for each subcontext as HighlightContext in subContexts</SourceLine>
   <SourceLine>if subContext &lt;&gt; value then subContext.placeholderContextDef = value</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mPlaceholderContextDef</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>regexes()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>regexes() As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>regexes() As string</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>scanner</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>scanner As regex</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>scanner As regex</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>searchPattern</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>searchPattern As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>searchPattern As string</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>StartRegEx</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>StartRegEx As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>StartRegEx As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>_startregex=value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return _startregex</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>subContexts()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>subContexts() As HighlightContext</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>subContexts() As HighlightContext</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>subExpressionCount</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>subExpressionCount As integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>subExpressionCount As integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>subExpressionIndex()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>subExpressionIndex() As integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>subExpressionIndex() As integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Underline</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Underline As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Underline As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mUnderline = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mUnderline</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>_color</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>_color As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>_color As color = &amp;c000000</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>_contextRegEx</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>_contextRegEx As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>_contextRegEx As string</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>_endRegex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>_endRegex As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>_endRegex As string</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>_entryRegEx</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>_entryRegEx As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>_entryRegEx As string</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>_name</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>_name As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>_name As string</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>_startRegex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>_startRegex As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>_startRegex As string</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>_subContextRegEx</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>_subContextRegEx As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>_subContextRegEx As string</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>BackgroundColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Bold</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EndRegEx</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>entryRegEx</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HasBackgroundColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HighlightColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>isPlaceholder</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Italic</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>StartRegEx</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Underline</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="74422694">
 <ObjName>HighlightDefinition</ObjName>
 <ObjContainerID>1481871117</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>addContext</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub addContext(context as HighlightContext)</SourceLine>
   <SourceLine>if Context=nil then Return</SourceLine>
   <SourceLine>subContexts.Append(Context)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if Context &lt;&gt; PlaceholderContextDef then</SourceLine>
   <SourceLine>context.PlaceholderContextDef = PlaceholderContextDef</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>subExpressionCount = subExpressionCount + 1</SourceLine>
   <SourceLine>subExpressionIndex.Append subExpressionCount</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// add pattern to search string</SourceLine>
   <SourceLine>if searchPattern &lt;&gt; "" then searchPattern = searchPattern + "|"</SourceLine>
   <SourceLine>searchPattern = searchPattern + "(" + context.contextRegEx + ")"</SourceLine>
   <SourceLine>fixSubExpressionCount(context.contextRegEx)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>context as HighlightContext</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>addSymbol</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub addSymbol(symbol as symbolsDefinition)</SourceLine>
   <SourceLine>if Symbol = nil then Return</SourceLine>
   <SourceLine>Symbols.Append Symbol</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>symbolCount = symbolCount + 1</SourceLine>
   <SourceLine>symbolIndex.Append symbolCount</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// add pattern to search string</SourceLine>
   <SourceLine>if symbolPattern &lt;&gt; "" then symbolPattern = symbolPattern + "|"</SourceLine>
   <SourceLine>symbolPattern = symbolPattern + "(" + symbol.EntryRegex + ")"</SourceLine>
   <SourceLine>fixSymbolCount(symbol.EntryRegex)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>symbol as symbolsDefinition</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>bool2YN</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function bool2YN(value as boolean) As string</SourceLine>
   <SourceLine>if value then Return "yes"</SourceLine>
   <SourceLine>Return "no"</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>value as boolean</ItemParams>
  <ItemResult>string</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>//init regex scanner</SourceLine>
   <SourceLine>scanner = new regex</SourceLine>
   <SourceLine>scanner.Options.DotMatchAll=true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//add a blank space context, this will tokenize strings.</SourceLine>
   <SourceLine>dim blankSpaceContext as new HighlightContext(false, false)</SourceLine>
   <SourceLine>blankSpaceContext.EntryRegEx = "([ ]|\t|\x0A|(?:\x0D\x0A?))"'"([\s])"</SourceLine>
   <SourceLine>blankSpaceContext.Name = "fieldwhitespace"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>addContext(blankSpaceContext)</SourceLine>
   <SourceLine>blockEndDef = new Dictionary</SourceLine>
   <SourceLine>blockStartDef = new Dictionary</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Contexts</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Contexts() As highlightcontext()</SourceLine>
   <SourceLine>dim current, tmp() as HighlightContext</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for each current in subContexts</SourceLine>
   <SourceLine>if current.Name &lt;&gt; "fieldwhitespace" then tmp.Append current</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return tmp</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>highlightcontext()</ItemResult>
 </Method>
 <Method>
  <ItemName>fixSubExpressionCount</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub fixSubExpressionCount(pattern as string)</SourceLine>
   <SourceLine>// determine subexpression count</SourceLine>
   <SourceLine>// This method is original from Nick Lockwood: http://www.charcoaldesign.co.uk/oss#tokenizer</SourceLine>
   <SourceLine>// It speeds up the matching of the matched regex.</SourceLine>
   <SourceLine>dim escaped, inCharClass, prevBracket as Boolean = false</SourceLine>
   <SourceLine>escaped = false</SourceLine>
   <SourceLine>for i as integer = 1 to pattern.Len</SourceLine>
   <SourceLine>select case pattern.mid(i,1)</SourceLine>
   <SourceLine>case "\"</SourceLine>
   <SourceLine>escaped = true</SourceLine>
   <SourceLine>prevBracket = false</SourceLine>
   <SourceLine>case "("</SourceLine>
   <SourceLine>dim nextChar as String = pattern.Mid(i+1,1)</SourceLine>
   <SourceLine>if not inCharClass and not escaped and nextChar &lt;&gt; "?" then subExpressionCount = subExpressionCount + 1</SourceLine>
   <SourceLine>prevBracket = false</SourceLine>
   <SourceLine>escaped = false</SourceLine>
   <SourceLine>case "["</SourceLine>
   <SourceLine>if inCharClass or escaped then</SourceLine>
   <SourceLine>prevBracket = false</SourceLine>
   <SourceLine>escaped = false</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>inCharClass = true</SourceLine>
   <SourceLine>prevBracket = true</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>case "]"</SourceLine>
   <SourceLine>if not prevBracket then inCharClass = false</SourceLine>
   <SourceLine>prevBracket = false</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>prevBracket = false</SourceLine>
   <SourceLine>escaped = false</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>pattern as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>fixSymbolCount</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub fixSymbolCount(pattern as string)</SourceLine>
   <SourceLine>// determine subexpression count</SourceLine>
   <SourceLine>// This method is original from Nick Lockwood: http://www.charcoaldesign.co.uk/oss#tokenizer</SourceLine>
   <SourceLine>// It speeds up the matching of the matched regex.</SourceLine>
   <SourceLine>dim escaped, inCharClass, prevBracket as Boolean = false</SourceLine>
   <SourceLine>escaped = false</SourceLine>
   <SourceLine>for i as integer = 1 to pattern.Len</SourceLine>
   <SourceLine>select case pattern.mid(i,1)</SourceLine>
   <SourceLine>case "\"</SourceLine>
   <SourceLine>escaped = true</SourceLine>
   <SourceLine>prevBracket = false</SourceLine>
   <SourceLine>case "("</SourceLine>
   <SourceLine>dim nextChar as String = pattern.Mid(i+1,1)</SourceLine>
   <SourceLine>if not inCharClass and not escaped and nextChar &lt;&gt; "?" then symbolCount = symbolCount + 1</SourceLine>
   <SourceLine>prevBracket = false</SourceLine>
   <SourceLine>escaped = false</SourceLine>
   <SourceLine>case "["</SourceLine>
   <SourceLine>if inCharClass or escaped then</SourceLine>
   <SourceLine>prevBracket = false</SourceLine>
   <SourceLine>escaped = false</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>inCharClass = true</SourceLine>
   <SourceLine>prevBracket = true</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>case "]"</SourceLine>
   <SourceLine>if not prevBracket then inCharClass = false</SourceLine>
   <SourceLine>prevBracket = false</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>prevBracket = false</SourceLine>
   <SourceLine>escaped = false</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>pattern as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Highlight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Highlight(text as string, tokens() as textsegment, placeholders() as textplaceholder, forceMatch as highlightContext = nil) As highlightcontext</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim match as RegExMatch</SourceLine>
   <SourceLine>dim subExpression as String</SourceLine>
   <SourceLine>dim context as HighlightContext</SourceLine>
   <SourceLine>dim startPos, startPosB as Integer</SourceLine>
   <SourceLine>dim openContext as HighlightContext</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if text.Encoding &lt;&gt; nil and text.Encoding.Equals(Encodings.UTF16) then</SourceLine>
   <SourceLine>text = text.ConvertEncoding(Encodings.UTF8)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if forceMatch = nil then</SourceLine>
   <SourceLine>//init the regex pattern and perform the initial search</SourceLine>
   <SourceLine>scanner.SearchPattern = searchPattern'syntaxRegEx</SourceLine>
   <SourceLine>match=scanner.Search(Text)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim charPos, charPosB as Integer</SourceLine>
   <SourceLine>while forceMatch &lt;&gt; nil or match&lt;&gt;nil</SourceLine>
   <SourceLine>if match = nil Then</SourceLine>
   <SourceLine>subExpression = ""</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>subExpression = match.SubExpressionString(0)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// determine which token was matched</SourceLine>
   <SourceLine>if forceMatch = nil then</SourceLine>
   <SourceLine>dim tknIndex as integer</SourceLine>
   <SourceLine>for i as integer = 1 to match.SubExpressionCount - 1</SourceLine>
   <SourceLine>if match.SubExpressionString(i) = subExpression then</SourceLine>
   <SourceLine>tknIndex = subExpressionIndex.IndexOf(i)</SourceLine>
   <SourceLine>exit</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if tknIndex &lt; 0 then //definition can't handle source!?</SourceLine>
   <SourceLine>exit while</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find the context for the match</SourceLine>
   <SourceLine>Context = subContexts(tknIndex)'findContextForMatch(subExpression)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>Context = forceMatch</SourceLine>
   <SourceLine>forceMatch = nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//find the actual character position within the string, since SubExpressionStartB returns the byte position,</SourceLine>
   <SourceLine>//and if you have multi-byte strings you get an offsetted highlight.</SourceLine>
   <SourceLine>if match = nil then</SourceLine>
   <SourceLine>charPos = 0</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>charPos = text.leftb(match.SubExpressionStartB(0)).len</SourceLine>
   <SourceLine>charposB = match.SubExpressionStartB(0)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//Highlight everything up to this point with the default color.</SourceLine>
   <SourceLine>if charPos - startPos &gt; 0 then</SourceLine>
   <SourceLine>tokens.Append(new TextSegment(startPos, charPos-startPos, TextSegment.TYPE_WORD, DefaultColor))</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>startPos = charPos</SourceLine>
   <SourceLine>startPosB = charPosB</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//forward execution to the context for any further processing.</SourceLine>
   <SourceLine>if Context&lt;&gt;nil and not context.isPlaceholder then</SourceLine>
   <SourceLine>if Context.Highlight(text, subExpression, startPos, startPosB, scanner, tokens, placeholders) then openContext = Context</SourceLine>
   <SourceLine>startPos = text.leftb(scanner.SearchStartPosition).len</SourceLine>
   <SourceLine>startPosB = scanner.SearchStartPosition</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf Context &lt;&gt; nil and context.isPlaceholder then</SourceLine>
   <SourceLine>dim label as String = match.SubExpressionString(match.SubExpressionCount - 1)</SourceLine>
   <SourceLine>dim tmp as Integer = text.leftb(match.SubExpressionStartB(match.SubExpressionCount - 1)).len</SourceLine>
   <SourceLine>dim placeholder as new TextPlaceholder(startPos, subExpression.Len, tmp, label.len, context.HighlightColor, context.BackgroundColor, context.Bold, context.Italic, context.Underline)</SourceLine>
   <SourceLine>tokens.Append(placeholder)</SourceLine>
   <SourceLine>placeholders.Append(placeholder)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>startPos = text.leftb(scanner.SearchStartPosition).len</SourceLine>
   <SourceLine>startPosB = scanner.SearchStartPosition</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//and search again</SourceLine>
   <SourceLine>scanner.SearchPattern = searchPattern'syntaxRegEx</SourceLine>
   <SourceLine>match=scanner.Search</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//Highlight the rest of the text with the default color.</SourceLine>
   <SourceLine>if text.len - startPos &gt; 0 then</SourceLine>
   <SourceLine>tokens.Append(new TextSegment(startPos, text.len - startPos, TextSegment.TYPE_WORD, DefaultColor))</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return openContext</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>text as string, tokens() as textsegment, placeholders() as textplaceholder, forceMatch as highlightContext = nil</ItemParams>
  <ItemResult>highlightcontext</ItemResult>
 </Method>
 <Method>
  <ItemName>IndentNode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub IndentNode(node As XmlNode, level As Integer, indentCloseTag As Boolean = False)</SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim s As String</SourceLine>
   <SourceLine>s = EndOfLine</SourceLine>
   <SourceLine>For i = 1 To level</SourceLine>
   <SourceLine>s = s + Chr(9) // Tab</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>node.Parent.Insert(node.OwnerDocument.CreateTextNode(s), node)</SourceLine>
   <SourceLine>If indentCloseTag Then</SourceLine>
   <SourceLine>node.AppendChild(node.OwnerDocument.CreateTextNode(s))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>node As XmlNode, level As Integer, indentCloseTag As Boolean = False</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>IsBlockEnd</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsBlockEnd(lineText as string) As boolean</SourceLine>
   <SourceLine>if blockEndDef.Count = 0 then Return False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim scanner as new regex</SourceLine>
   <SourceLine>scanner.SearchPattern = blockEndDef.Key(0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if scanner.Search(lineText) &lt;&gt; nil then Return true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return false</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineText as string</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>IsBlockStart</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsBlockStart(lineText as string) As integer</SourceLine>
   <SourceLine>if blockStartDef.Count = 0 then Return 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim scanner as new regex</SourceLine>
   <SourceLine>scanner.SearchPattern = blockStartDef.Key(0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if scanner.Search(lineText) &lt;&gt; nil then Return blockStartDef.Value(blockStartDef.Key(0))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return 0</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>lineText as string</ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Keywords</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Keywords() As string()</SourceLine>
   <SourceLine>//get all the keyword strings in this definition.</SourceLine>
   <SourceLine>dim tmp() as String</SourceLine>
   <SourceLine>for i as Integer = 0 to UBound(subContexts)</SourceLine>
   <SourceLine>subContexts(i).ListKeywords(tmp)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tmp.Sort</SourceLine>
   <SourceLine>Return tmp</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>string()</ItemResult>
 </Method>
 <Method>
  <ItemName>LoadFromXml</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function LoadFromXml(data as folderItem) As boolean</SourceLine>
   <SourceLine>if data=nil then Return False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//read a file...</SourceLine>
   <SourceLine>dim tis as TextInputStream=data.OpenAsTextFile</SourceLine>
   <SourceLine>if tis=nil then Return False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim xml as String=tis.ReadAll(Encodings.UTF8)</SourceLine>
   <SourceLine>tis.Close</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return loadFromXml(xml)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>data as folderItem</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>LoadFromXml</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function LoadFromXml(data as string) As boolean</SourceLine>
   <SourceLine>dim xml as XmlDocument</SourceLine>
   <SourceLine>Dim root, node as XMLNode</SourceLine>
   <SourceLine>Dim context as HighlightContext</SourceLine>
   <SourceLine>dim Symbol as SymbolsDefinition</SourceLine>
   <SourceLine>Dim i, j as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//load a xml syntax definition.</SourceLine>
   <SourceLine>try</SourceLine>
   <SourceLine>xml=new XmlDocument</SourceLine>
   <SourceLine>xml.LoadXml(data)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>root=xml.Child(0)</SourceLine>
   <SourceLine>//doc check</SourceLine>
   <SourceLine>if root.Name&lt;&gt;"highlightDefinition" then Return False</SourceLine>
   <SourceLine>if val(root.GetAttribute("version")) &gt; version then Return False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i=0 to root.ChildCount-1</SourceLine>
   <SourceLine>node=root.Child(i)</SourceLine>
   <SourceLine>select case node.Name</SourceLine>
   <SourceLine>case "name"</SourceLine>
   <SourceLine>//syntax name</SourceLine>
   <SourceLine>Name=node.FirstChild.Value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case "blockStartMarker"</SourceLine>
   <SourceLine>//indent is the number of indentations.</SourceLine>
   <SourceLine>blockStartDef.Value(node.FirstChild.Value) = val(node.GetAttribute("indent"))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case "blockEndMarker"</SourceLine>
   <SourceLine>blockEndDef.Value(node.FirstChild.Value) = nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case "symbols"</SourceLine>
   <SourceLine>for j = 0 to node.ChildCount - 1</SourceLine>
   <SourceLine>Symbol = new SymbolsDefinition</SourceLine>
   <SourceLine>Symbol.loadFromXmlNode(node.Child(j))</SourceLine>
   <SourceLine>addSymbol(Symbol)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case "placeholders"</SourceLine>
   <SourceLine>placeholderContextDef = new HighlightContext(False, False)</SourceLine>
   <SourceLine>placeholderContextDef.EntryRegEx = node.FirstChild.Value</SourceLine>
   <SourceLine>placeholderContextDef.isPlaceholder = true</SourceLine>
   <SourceLine>placeholderContextDef.Name = "Placeholders"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim tmpObj as Variant</SourceLine>
   <SourceLine>if node.GetAttribute("highlightColor") &lt;&gt; "" then</SourceLine>
   <SourceLine>tmpObj = "&amp;h" + node.GetAttribute("highlightColor").Mid(1)</SourceLine>
   <SourceLine>PlaceholderContextDef.HighlightColor = tmpObj.ColorValue</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if node.GetAttribute("backgroundColor") &lt;&gt; "" then</SourceLine>
   <SourceLine>tmpObj = "&amp;h" + node.GetAttribute("backgroundColor").Mid(1)</SourceLine>
   <SourceLine>PlaceholderContextDef.BackgroundColor = tmpObj.ColorValue</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim tmp as String</SourceLine>
   <SourceLine>//Bold</SourceLine>
   <SourceLine>tmp = node.GetAttribute("bold")</SourceLine>
   <SourceLine>if tmp &lt;&gt; "" then placeholderContextDef.Bold = tmp = "true"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//Italic</SourceLine>
   <SourceLine>tmp = node.GetAttribute("italic")</SourceLine>
   <SourceLine>if tmp &lt;&gt; "" then placeholderContextDef.Italic = tmp = "true"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//Underline</SourceLine>
   <SourceLine>tmp = node.GetAttribute("underline")</SourceLine>
   <SourceLine>if tmp &lt;&gt; "" then placeholderContextDef.Underline = tmp = "true"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>self.addContext placeholderContextDef</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case "contexts"</SourceLine>
   <SourceLine>//contexts</SourceLine>
   <SourceLine>dim tmpObj as Variant</SourceLine>
   <SourceLine>tmpObj = "&amp;h" + node.GetAttribute("defaultColor").Mid(1)</SourceLine>
   <SourceLine>defaultColor=tmpObj.ColorValue</SourceLine>
   <SourceLine>caseSensitive = YN2Bool(node.GetAttribute("caseSensitive"))</SourceLine>
   <SourceLine>for j=0 to node.ChildCount-1</SourceLine>
   <SourceLine>Context=new HighlightContext(caseSensitive)</SourceLine>
   <SourceLine>Context.loadFromXmlNode(node.Child(j))</SourceLine>
   <SourceLine>addContext(Context)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return true</SourceLine>
   <SourceLine>Catch</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine>end try</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>data as string</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>SaveAsXml</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function SaveAsXml(file as folderItem) As boolean</SourceLine>
   <SourceLine>if file=nil then Return False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//save definition as an xml</SourceLine>
   <SourceLine>try</SourceLine>
   <SourceLine>dim tos as TextOutputStream = file.CreateTextFile</SourceLine>
   <SourceLine>tos.Write(toXml)</SourceLine>
   <SourceLine>tos.Close</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return true</SourceLine>
   <SourceLine>catch</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine>end try</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>file as folderItem</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>ScanSymbols</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ScanSymbols(forText as string) As dictionary</SourceLine>
   <SourceLine>//simple symbol scan</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if symbolPattern = "" then Return nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if forText.Encoding &lt;&gt; nil and forText.Encoding.Equals(Encodings.UTF16) then</SourceLine>
   <SourceLine>forText = forText.ConvertEncoding(Encodings.UTF8)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim scanner as new regex</SourceLine>
   <SourceLine>scanner.SearchPattern = symbolPattern</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim match as RegExMatch</SourceLine>
   <SourceLine>dim symbol as String</SourceLine>
   <SourceLine>dim pos as integer</SourceLine>
   <SourceLine>dim local as new Dictionary</SourceLine>
   <SourceLine>dim tknIndex as integer</SourceLine>
   <SourceLine>dim symbolDef as SymbolsDefinition</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>match = scanner.Search(forText)</SourceLine>
   <SourceLine>while match &lt;&gt; nil</SourceLine>
   <SourceLine>Symbol = match.SubExpressionString(0)</SourceLine>
   <SourceLine>pos = forText.leftb(match.SubExpressionStartB(0)).len</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as integer = 1 to match.SubExpressionCount - 1</SourceLine>
   <SourceLine>if match.SubExpressionString(i) = symbol then</SourceLine>
   <SourceLine>tknIndex = symbolIndex.IndexOf(i)</SourceLine>
   <SourceLine>exit</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if tknIndex &lt; 0 then //definition can't handle source!?</SourceLine>
   <SourceLine>exit while</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>symbolDef = Symbols(tknIndex)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Symbol = Symbol.Trim //strip spaces</SourceLine>
   <SourceLine>if Symbol &lt;&gt; "" then</SourceLine>
   <SourceLine>local.Value(Symbol) = new DocumentSymbol(Symbol, pos, symbolDef.Type)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>match = scanner.Search</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if local.Count = 0 then Return nil</SourceLine>
   <SourceLine>Return local</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>forText as string</ItemParams>
  <ItemResult>dictionary</ItemResult>
 </Method>
 <Method>
  <ItemName>SupportsCodeBlocks</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function SupportsCodeBlocks() As boolean</SourceLine>
   <SourceLine>Return blockStartDef.Count &gt; 0 and blockEndDef.Count &gt; 0</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>syntaxRegEx</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function syntaxRegEx() As string</SourceLine>
   <SourceLine>dim tmp as String</SourceLine>
   <SourceLine>dim current as HighlightContext</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//returns the regex pattern for all contexts</SourceLine>
   <SourceLine>tmp="("</SourceLine>
   <SourceLine>for Each current in subContexts</SourceLine>
   <SourceLine>tmp=tmp+current.contextRegEx+"|"</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>tmp=Left(tmp,tmp.Len-1)+")"</SourceLine>
   <SourceLine>Return tmp</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>string</ItemResult>
 </Method>
 <Method>
  <ItemName>ToXML</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ToXML() As string</SourceLine>
   <SourceLine>Dim xml as XmlDocument</SourceLine>
   <SourceLine>Dim root, node as XMLNode</SourceLine>
   <SourceLine>Dim context as HighlightContext</SourceLine>
   <SourceLine>dim Symbol as SymbolsDefinition</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>xml = New XmlDocument</SourceLine>
   <SourceLine>//root</SourceLine>
   <SourceLine>root = xml.AppendChild(xml.CreateElement("highlightDefinition"))</SourceLine>
   <SourceLine>root.SetAttribute("version",format(version,"#.0"))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//name</SourceLine>
   <SourceLine>node = root.AppendChild(xml.CreateElement("name"))</SourceLine>
   <SourceLine>node.AppendChild(xml.CreateTextNode(name))</SourceLine>
   <SourceLine>IndentNode(node,1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//block markers</SourceLine>
   <SourceLine>if blockStartDef.Count &gt; 0 then</SourceLine>
   <SourceLine>node = root.AppendChild(xml.CreateElement("blockStartMarker"))</SourceLine>
   <SourceLine>node.AppendChild(xml.CreateTextNode(blockStartDef.Key(0)))</SourceLine>
   <SourceLine>node.SetAttribute("indent", format(blockStartDef.Value(blockStartDef.Key(0)), "#"))</SourceLine>
   <SourceLine>IndentNode(node,1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>node = root.AppendChild(xml.CreateElement("blockEndMarker"))</SourceLine>
   <SourceLine>node.AppendChild(xml.CreateTextNode(blockEndDef.key(0)))</SourceLine>
   <SourceLine>IndentNode(node,1)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>node = root.AppendChild(xml.CreateElement("symbols"))</SourceLine>
   <SourceLine>for each Symbol in Symbols</SourceLine>
   <SourceLine>Symbol.appendToXMLNode(node)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>IndentNode(node,1, true)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if PlaceholderContextDef &lt;&gt; nil then</SourceLine>
   <SourceLine>node = root.AppendChild(xml.CreateElement("placeholders"))</SourceLine>
   <SourceLine>dim tmpObj as Variant</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//HighlightColor</SourceLine>
   <SourceLine>tmpObj = HighlightColor</SourceLine>
   <SourceLine>node.SetAttribute("highlightColor","#"+Hex(tmpObj.IntegerValue))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//BackgroundColor</SourceLine>
   <SourceLine>if PlaceholderContextDef.HasBackgroundColor then</SourceLine>
   <SourceLine>tmpObj = PlaceholderContextDef.BackgroundColor</SourceLine>
   <SourceLine>node.SetAttribute("backgroundColor","#"+Hex(tmpObj.IntegerValue))</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//bold</SourceLine>
   <SourceLine>if PlaceholderContextDef.Bold then</SourceLine>
   <SourceLine>node.SetAttribute("bold", "true")</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>//italic</SourceLine>
   <SourceLine>if PlaceholderContextDef.Italic then</SourceLine>
   <SourceLine>node.SetAttribute("italic", "true")</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>//Underline</SourceLine>
   <SourceLine>if PlaceholderContextDef.Underline then</SourceLine>
   <SourceLine>node.SetAttribute("underline", "true")</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>node.AppendChild(xml.CreateTextNode(PlaceholderContextDef.EntryRegEx))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>IndentNode(node,1, false)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>node = root.AppendChild(xml.CreateElement("contexts"))</SourceLine>
   <SourceLine>dim tmpObj as Variant=defaultColor</SourceLine>
   <SourceLine>node.SetAttribute("defaultColor","#"+Hex(tmpObj.IntegerValue))</SourceLine>
   <SourceLine>node.SetAttribute("caseSensitive",bool2YN(caseSensitive))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//process contexts</SourceLine>
   <SourceLine>for Each Context in subContexts</SourceLine>
   <SourceLine>if Context.Name = "fieldwhitespace" or context.isPlaceholder then Continue for</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Context.appendToXMLNode(node)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>IndentNode(node,1, true)</SourceLine>
   <SourceLine>IndentNode(root,0, true)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return xml.ToString</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>string</ItemResult>
 </Method>
 <Method>
  <ItemName>YN2Bool</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function YN2Bool(value as string) As boolean</SourceLine>
   <SourceLine>if value="yes" then Return true</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>value as string</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Note>
  <ItemName>About</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>About</NoteLine>
   <NoteLine>Info</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>HighlightDefinition</NoteLine>
   <NoteLine>By Alex Restrepo</NoteLine>
   <NoteLine>send comments, suggestions, fixes to alexrestrepo@mac.com</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>A little experiment on SyntaxHighlighting</NoteLine>
   <NoteLine>Contains the rules of how to Highlight the contents of the EditField.</NoteLine>
   <NoteLine>A definition is composed of one or more HighlightContexts</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Methods:</NoteLine>
   <NoteLine>Highlight(text as string, style as styledText): highlights the provided text using the provided styledtext object.</NoteLine>
   <NoteLine>LoadFromXml(data as string): loads a HighlightDefinition stored in a xml string</NoteLine>
   <NoteLine>LoadFromXml(data as folderItem): loads a HighlightDefinition stored in a xml file</NoteLine>
   <NoteLine>SaveAsXml(file as folderitem): saves the HighlightDefinition as an xml file.</NoteLine>
   <NoteLine>&#32;</NoteLine>
   <NoteLine>Properties:</NoteLine>
   <NoteLine>CaseSensitive: gets or sets if the contained syntax is case-sensitive</NoteLine>
   <NoteLine>DefaultColor: gets or sets the default color for the text</NoteLine>
   <NoteLine>Name: the name of the definition (ie: Xml or REALbasic)</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Open source under the creative commons license.</NoteLine>
   <NoteLine>Use in whatever way you like... at your own risk :P</NoteLine>
   <NoteLine>let me know if you find it useful.</NoteLine>
   <NoteLine>If you decide to use it in your projects, please give me credit in your about window or documentation, thanks.</NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>blockEndDef</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>blockEndDef As dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>blockEndDef As dictionary</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>blockStartDef</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>blockStartDef As dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>blockStartDef As dictionary</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>CaseSensitive</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CaseSensitive As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CaseSensitive As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>_caseSensitive=value</SourceLine>
   <SourceLine>scanner.Options.CaseSensitive=value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return _caseSensitive</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>DefaultColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DefaultColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DefaultColor As color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>_defaultColor=value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return _defaultColor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Name</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Name As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Name As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>_name=value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return _name</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>PlaceholderContextDef</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>PlaceholderContextDef As HighlightContext</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>PlaceholderContextDef As HighlightContext</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>scanner</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>scanner As regex</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>scanner As regex</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>searchPattern</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>searchPattern As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>searchPattern As string</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>subContexts()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>subContexts() As HighlightContext</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>subContexts() As HighlightContext</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>subExpressionCount</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>subExpressionCount As integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>subExpressionCount As integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>subExpressionIndex()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>subExpressionIndex() As integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>subExpressionIndex() As integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>symbolCount</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>symbolCount As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>symbolCount As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>symbolIndex()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>symbolIndex() As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>symbolIndex() As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>symbolPattern</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>symbolPattern As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>symbolPattern As string</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Symbols()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Symbols() As SymbolsDefinition</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Symbols() As SymbolsDefinition</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>_caseSensitive</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>_caseSensitive As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>_caseSensitive As boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>_defaultColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>_defaultColor As color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>_defaultColor As color</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>_name</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>_name As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>_name As string</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>caseSensitive</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>defaultColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>version</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>version</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>1.2</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
</block>
<block type="Module" ID="1754167103">
 <ObjName>LineHighlighter</ObjName>
 <ObjContainerID>1481871117</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>Thread</Superclass>
 <ItemFlags>0</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <HookInstance>
  <ItemName>Run</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Run()</SourceLine>
   <SourceLine>if owner = nil then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//do some heavy processing here!! :P</SourceLine>
   <SourceLine>//reprocess all changed lines...</SourceLine>
   <SourceLine>while changedLines.RangeCount &gt; 0</SourceLine>
   <SourceLine>dim currentRange as ModifiedLineRange = changedLines.NextRange</SourceLine>
   <SourceLine>dim highlightedLinesInRange as new Dictionary</SourceLine>
   <SourceLine>dim index as Integer</SourceLine>
   <SourceLine>dim highlightingScreenLines as Boolean = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>while currentRange.NextIndex</SourceLine>
   <SourceLine>while owner.VisibleLineRange.NextIndex</SourceLine>
   <SourceLine>index = owner.VisibleLineRange.CurrentIndex</SourceLine>
   <SourceLine>HighlightLine(index, highlightedLinesInRange)</SourceLine>
   <SourceLine>highlightingScreenLines = true</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if highlightingScreenLines then</SourceLine>
   <SourceLine>highlightingScreenLines = False</SourceLine>
   <SourceLine>DoneWithScreenLines</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>index = currentRange.CurrentIndex</SourceLine>
   <SourceLine>HighlightLine(index, highlightedLinesInRange)</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>HighlightingDone</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(owner as customEditField, definition as highlightdefinition, changedLines as modifiedLineRangeManager, buffer as gapBuffer, lines as linemanager)</SourceLine>
   <SourceLine>self.definition = definition</SourceLine>
   <SourceLine>self.changedLines = changedLines</SourceLine>
   <SourceLine>self.buffer = buffer</SourceLine>
   <SourceLine>self.lines = lines</SourceLine>
   <SourceLine>self.Reference = new WeakRef(owner)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>self.Priority = Thread.NormalPriority</SourceLine>
   <SourceLine>run</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>owner as customEditField, definition as highlightdefinition, changedLines as modifiedLineRangeManager, buffer as gapBuffer, lines as linemanager</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DoneWithScreenLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DoneWithScreenLines()</SourceLine>
   <SourceLine>dim msg as new Message(self, self)</SourceLine>
   <SourceLine>msg.addInfo(1, ScreenLinesHighlightedMsg)</SourceLine>
   <SourceLine>MessageCenter.sendMessage(msg)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HighlightingDone</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub HighlightingDone()</SourceLine>
   <SourceLine>dim msg as new Message(self, self)</SourceLine>
   <SourceLine>msg.addInfo(1, HighlightDoneMsg)</SourceLine>
   <SourceLine>MessageCenter.queueMessage(msg)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HighlightLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub HighlightLine(index as integer, highlightedLinesInRange as Dictionary = nil)</SourceLine>
   <SourceLine>dim line, previous, nextLine as TextLine</SourceLine>
   <SourceLine>dim context, previousContext as HighlightContext</SourceLine>
   <SourceLine>dim processed as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim lineFoldingsEnabled as Boolean = owner.EnableLineFoldings</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//get line</SourceLine>
   <SourceLine>line = lines.getLine(index)</SourceLine>
   <SourceLine>if line = nil then return //line can be nil if no longer in document</SourceLine>
   <SourceLine>if highlightedLinesInRange &lt;&gt; nil and highlightedLinesInRange.HasKey(index) then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//get context of previous line</SourceLine>
   <SourceLine>previous = lines.getLine(index - 1)</SourceLine>
   <SourceLine>if previous &lt;&gt; nil then Context = previous.Context</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>previousContext = line.Context</SourceLine>
   <SourceLine>context = line.Highlight(definition, buffer, context)</SourceLine>
   <SourceLine>if highlightedLinesInRange &lt;&gt; nil then highlightedLinesInRange.Value(index) = nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//restore fold markers</SourceLine>
   <SourceLine>//if the line is a blockStart, or if it was and it's folded, check the fold markers</SourceLine>
   <SourceLine>if lineFoldingsEnabled and (line.isBlockStart or (line.folded and not line.isBlockStart)) then</SourceLine>
   <SourceLine>nextLine = lines.getLine(lines.nextBlockEndLine(index, true))</SourceLine>
   <SourceLine>if nextLine &lt;&gt; nil and ((line.folded &lt;&gt; not nextLine.visible) or (line.folded and not line.isBlockStart)) then</SourceLine>
   <SourceLine>//if we got to this point, is because it's a startblock in an invalid state.</SourceLine>
   <SourceLine>line.isBlockStart = true</SourceLine>
   <SourceLine>call lines.toggleLineFolding(index)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>LineHighlighted(index)</SourceLine>
   <SourceLine>processed = processed + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if context &lt;&gt; nil then</SourceLine>
   <SourceLine>//scan next</SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine>index = index + 1</SourceLine>
   <SourceLine>line = lines.getLine(index)</SourceLine>
   <SourceLine>if line = nil then exit do</SourceLine>
   <SourceLine>if line.Context = context then Continue</SourceLine>
   <SourceLine>context = line.Highlight(definition, buffer, context)</SourceLine>
   <SourceLine>processed = processed + 1</SourceLine>
   <SourceLine>LineHighlighted(index)</SourceLine>
   <SourceLine>if highlightedLinesInRange &lt;&gt; nil then highlightedLinesInRange.Value(index) = nil</SourceLine>
   <SourceLine>Loop Until context = nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//add final line</SourceLine>
   <SourceLine>line = lines.getLine(index + 1)</SourceLine>
   <SourceLine>if line &lt;&gt; nil then</SourceLine>
   <SourceLine>owner.InvalidateLine(index + 1)</SourceLine>
   <SourceLine>call changedLines.AddRange(new ModifiedLineRange(index + 1, 1))//it will be highlighted in a future pass</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//if context changed</SourceLine>
   <SourceLine>elseif previousContext &lt;&gt; Context then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>index = index + 1</SourceLine>
   <SourceLine>line = lines.getLine(index)</SourceLine>
   <SourceLine>while line &lt;&gt; nil and line.Context = previousContext</SourceLine>
   <SourceLine>if highlightedLinesInRange &lt;&gt; nil then highlightedLinesInRange.Value(index) = nil</SourceLine>
   <SourceLine>context = line.Highlight(definition, buffer, context)</SourceLine>
   <SourceLine>processed = processed + 1</SourceLine>
   <SourceLine>LineHighlighted(index)</SourceLine>
   <SourceLine>index = index + 1</SourceLine>
   <SourceLine>line = lines.getLine(index)</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//final line</SourceLine>
   <SourceLine>if line &lt;&gt; nil then</SourceLine>
   <SourceLine>call changedLines.AddRange(new ModifiedLineRange(index, 1))</SourceLine>
   <SourceLine>owner.InvalidateLine(index)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer, highlightedLinesInRange as Dictionary = nil</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>LineHighlighted</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub LineHighlighted(index as integer)</SourceLine>
   <SourceLine>dim msg as new Message(self, self)</SourceLine>
   <SourceLine>msg.addInfo(1, LineHighlightedMsg)</SourceLine>
   <SourceLine>msg.addInfo(2, index)</SourceLine>
   <SourceLine>MessageCenter.sendMessage(msg)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>OldRun</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub OldRun()</SourceLine>
   <SourceLine>'if owner = nil then Return</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>''if definition = nil then</SourceLine>
   <SourceLine>''changedLines.Clear</SourceLine>
   <SourceLine>''Return</SourceLine>
   <SourceLine>''end if</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'//do some heavy processing here!! :P</SourceLine>
   <SourceLine>'dim index as Integer</SourceLine>
   <SourceLine>'dim line, previous, nextLine as TextLine</SourceLine>
   <SourceLine>'dim context, previousContext as HighlightContext</SourceLine>
   <SourceLine>'dim processed as Integer</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'dim lineFoldingsEnabled as Boolean = owner.EnableLineFoldings</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'//reprocess all changed lines...</SourceLine>
   <SourceLine>'while changedLines.Count &gt; 0</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'//get index of line</SourceLine>
   <SourceLine>'if changedLines.HasKey(owner.CaretLine) then</SourceLine>
   <SourceLine>'index = owner.CaretLine</SourceLine>
   <SourceLine>'else</SourceLine>
   <SourceLine>'index = changedLines.Key(0)</SourceLine>
   <SourceLine>'end if</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'changedLines.Remove(index)</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'//get line</SourceLine>
   <SourceLine>'line = lines.getLine(index)</SourceLine>
   <SourceLine>'if line = nil then Continue while //line can be nil if no longer in document</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'//get context of previous line</SourceLine>
   <SourceLine>'previous = lines.getLine(index - 1)</SourceLine>
   <SourceLine>'if previous &lt;&gt; nil then Context = previous.Context</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'previousContext = line.Context</SourceLine>
   <SourceLine>'context = line.Highlight(definition, buffer, context)</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'//restore fold markers</SourceLine>
   <SourceLine>'//if the line is a blockStart, or if it was and it's folded, check the fold markers</SourceLine>
   <SourceLine>'if lineFoldingsEnabled and (line.isBlockStart or (line.folded and not line.isBlockStart)) then</SourceLine>
   <SourceLine>'nextLine = lines.getLine(lines.nextBlockEndLine(index, true))</SourceLine>
   <SourceLine>'if nextLine &lt;&gt; nil and ((line.folded &lt;&gt; not nextLine.visible) or (line.folded and not line.isBlockStart)) then</SourceLine>
   <SourceLine>'//if we got to this point, is because it's a startblock in an invalid state.</SourceLine>
   <SourceLine>'line.isBlockStart = true</SourceLine>
   <SourceLine>'call lines.toggleLineFolding(index)</SourceLine>
   <SourceLine>'end if</SourceLine>
   <SourceLine>'end if</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>''owner.InvalidateLine(index)</SourceLine>
   <SourceLine>'LineHighlighted(index)</SourceLine>
   <SourceLine>'processed = processed + 1</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'if context &lt;&gt; nil then</SourceLine>
   <SourceLine>'//scan next</SourceLine>
   <SourceLine>'do</SourceLine>
   <SourceLine>'index = index + 1</SourceLine>
   <SourceLine>'line = lines.getLine(index)</SourceLine>
   <SourceLine>'if line = nil then exit do</SourceLine>
   <SourceLine>'if line.Context = context then Continue</SourceLine>
   <SourceLine>'context = line.Highlight(definition, buffer, context)</SourceLine>
   <SourceLine>'processed = processed + 1</SourceLine>
   <SourceLine>''owner.InvalidateLine(index)</SourceLine>
   <SourceLine>'LineHighlighted(index)</SourceLine>
   <SourceLine>'if changedLines.HasKey(index) then changedLines.Remove(index)</SourceLine>
   <SourceLine>'Loop Until context = nil</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'//add final line</SourceLine>
   <SourceLine>'line = lines.getLine(index + 1)</SourceLine>
   <SourceLine>'if line &lt;&gt; nil then</SourceLine>
   <SourceLine>'owner.InvalidateLine(index + 1)</SourceLine>
   <SourceLine>''LineHighlighted(index + 1)</SourceLine>
   <SourceLine>'changedLines.Value(index + 1) = true //it will be highlighted in a future pass</SourceLine>
   <SourceLine>'end if</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'//if context changed</SourceLine>
   <SourceLine>'elseif previousContext &lt;&gt; Context then</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'index = index + 1</SourceLine>
   <SourceLine>'line = lines.getLine(index)</SourceLine>
   <SourceLine>'while line &lt;&gt; nil and line.Context = previousContext</SourceLine>
   <SourceLine>'if changedLines.HasKey(index) then changedLines.Remove(index)</SourceLine>
   <SourceLine>'context = line.Highlight(definition, buffer, context)</SourceLine>
   <SourceLine>'processed = processed + 1</SourceLine>
   <SourceLine>''owner.InvalidateLine(index)</SourceLine>
   <SourceLine>'LineHighlighted(index)</SourceLine>
   <SourceLine>'index = index + 1</SourceLine>
   <SourceLine>'line = lines.getLine(index)</SourceLine>
   <SourceLine>'wend</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'//final line</SourceLine>
   <SourceLine>'if line &lt;&gt; nil then</SourceLine>
   <SourceLine>'changedLines.Value(index) = true</SourceLine>
   <SourceLine>'owner.InvalidateLine(index)</SourceLine>
   <SourceLine>''LineHighlighted(index)</SourceLine>
   <SourceLine>'end if</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'end if</SourceLine>
   <SourceLine>'wend</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'HighlightingDone</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>buffer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>buffer As gapBuffer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>buffer As gapBuffer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>changedLines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>changedLines As ModifiedLineRangeManager</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>changedLines As ModifiedLineRangeManager</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>definition</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>definition As highlightdefinition</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>definition As highlightdefinition</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>lines</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>lines As linemanager</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lines As linemanager</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>owner</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>owner As CustomEditField</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>owner As CustomEditField</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if me.Reference &lt;&gt; nil then</SourceLine>
   <SourceLine>return CustomEditField(me.Reference.Value)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>//stop thread, since the owner is no longer valid</SourceLine>
   <SourceLine>self.Kill</SourceLine>
   <SourceLine>return nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Reference</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Reference As weakRef</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Reference As weakRef</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Priority</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>5</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Thread</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>StackSize</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Thread</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>HighlightDoneMsg</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>HighlightDoneMsg</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>0</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>LineHighlightedMsg</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>LineHighlightedMsg</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>1</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>ScreenLinesHighlightedMsg</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>ScreenLinesHighlightedMsg</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>2</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
</block>
<block type="Module" ID="707681645">
 <ObjName>SymbolsDefinition</ObjName>
 <ObjContainerID>1481871117</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>appendToXMLNode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub appendToXMLNode(parent as xmlNode, depth as integer = 2)</SourceLine>
   <SourceLine>//appends this context to the parent xml node</SourceLine>
   <SourceLine>//this is done to export the syntax definition as an xml file.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim xdoc as XmlDocument</SourceLine>
   <SourceLine>dim node, context as XmlNode</SourceLine>
   <SourceLine>dim tmpObj as Variant</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>xdoc = parent.OwnerDocument</SourceLine>
   <SourceLine>context=parent.AppendChild(xdoc.CreateElement("symbol"))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//name</SourceLine>
   <SourceLine>context.SetAttribute("type",type)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//entry regex?</SourceLine>
   <SourceLine>if EntryRegex&lt;&gt;"" then</SourceLine>
   <SourceLine>node=context.AppendChild(xdoc.CreateElement("entryRegEx"))</SourceLine>
   <SourceLine>node.AppendChild(xdoc.CreateTextNode(EntryRegEx))</SourceLine>
   <SourceLine>IndentNode(node,depth+1)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>IndentNode(Context,depth, true)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>parent as xmlNode, depth as integer = 2</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>IndentNode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub IndentNode(node As XmlNode, level As Integer, indentCloseTag As Boolean = False)</SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim s As String</SourceLine>
   <SourceLine>s = EndOfLine</SourceLine>
   <SourceLine>For i = 1 To level</SourceLine>
   <SourceLine>s = s + Chr(9) // Tab</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>node.Parent.Insert(node.OwnerDocument.CreateTextNode(s), node)</SourceLine>
   <SourceLine>If indentCloseTag Then</SourceLine>
   <SourceLine>node.AppendChild(node.OwnerDocument.CreateTextNode(s))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>node As XmlNode, level As Integer, indentCloseTag As Boolean = False</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>loadFromXmlNode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub loadFromXmlNode(node as xmlNode)</SourceLine>
   <SourceLine>//load context out of an xml node</SourceLine>
   <SourceLine>dim tmpObj as Variant</SourceLine>
   <SourceLine>dim tmp as String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//type</SourceLine>
   <SourceLine>type = node.GetAttribute("type")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim i, j as Integer</SourceLine>
   <SourceLine>dim subNode as XmlNode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i=0 to node.ChildCount-1</SourceLine>
   <SourceLine>subNode=node.Child(i)</SourceLine>
   <SourceLine>select case subNode.Name</SourceLine>
   <SourceLine>case "entryRegEx"</SourceLine>
   <SourceLine>EntryRegex = subNode.FirstChild.Value</SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>node as xmlNode</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>EntryRegex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>EntryRegex As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>EntryRegex As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mRegex = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mRegex</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>mRegex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mRegex As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mRegex As string</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mType</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mType As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mType As string</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Type</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Type As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Type As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mType = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mType</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>EntryRegex</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Type</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Folder" ID="516206877">
 <ObjName>TextStorage</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
</block>
<block type="Module" ID="419271922">
 <ObjName>ArrayStorage</ObjName>
 <ObjContainerID>516206877</ObjContainerID>
 <IsClass>1</IsClass>
 <Interfaces>IBufferStorage</Interfaces>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>ByteAt</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ByteAt(offset as Integer) As Integer</SourceLine>
   <SourceLine>Return asc(Storage(offset))</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(size as integer)</SourceLine>
   <SourceLine>ReDim Storage(size - 1)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>size as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Copy</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Copy(from as IbufferStorage, fromIndex as integer, localIndex as integer, length as integer)</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if length = 0 then Return</SourceLine>
   <SourceLine>dim src as ArrayStorage = ArrayStorage(from)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim maxLocal, maxSrc as Integer</SourceLine>
   <SourceLine>maxLocal = UBound(Storage)</SourceLine>
   <SourceLine>maxSrc = UBound(src.Storage)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as Integer = 0 to length - 1</SourceLine>
   <SourceLine>if localIndex + i &gt; maxLocal or fromIndex + i &gt; maxSrc then exit for</SourceLine>
   <SourceLine>Storage(localIndex + i) = src.Storage(fromIndex + i)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>from as IbufferStorage, fromIndex as integer, localIndex as integer, length as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Size</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Size() As integer</SourceLine>
   <SourceLine>Return UBound(Storage) + 1</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Size</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Size(assigns length as integer)</SourceLine>
   <SourceLine>// Part of the IBufferStorage interface.</SourceLine>
   <SourceLine>ReDim Storage(length - 1)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>assigns length as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>StringValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function StringValue(index as integer, length as integer) As string</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if length = 0 then Return ""</SourceLine>
   <SourceLine>if index &gt;= Size then Return ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//create a copy of the right size</SourceLine>
   <SourceLine>dim tmp() as String</SourceLine>
   <SourceLine>ReDim tmp(length - 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as Integer = 0 to length - 1</SourceLine>
   <SourceLine>tmp(i) = Storage(i + index)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim ret as String = Join(tmp, "")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if ret.Encoding = nil then Return ret.DefineEncoding(encodings.UTF8)</SourceLine>
   <SourceLine>return ret</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer, length as integer</ItemParams>
  <ItemResult>string</ItemResult>
 </Method>
 <Method>
  <ItemName>StringValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub StringValue(index as integer, length as integer, assigns value as string)</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if length = 0 then Return</SourceLine>
   <SourceLine>if value.Len = 0 then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim encoding as TextEncoding = value.Encoding</SourceLine>
   <SourceLine>dim doubleByte as Boolean = encoding &lt;&gt; nil and encoding.Equals(encodings.UTF16) //fix to handle UTF-16</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim tmp as MemoryBlock</SourceLine>
   <SourceLine>dim chars() as String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//split data into a tmp array</SourceLine>
   <SourceLine>if doubleByte then</SourceLine>
   <SourceLine>tmp = new MemoryBlock(value.lenb)  //fix to handle UTF-16</SourceLine>
   <SourceLine>#if TargetX86 then</SourceLine>
   <SourceLine>tmp.LittleEndian = true</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>tmp.LittleEndian = False</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>tmp.StringValue(0, value.lenb) = value</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>if not doubleByte then chars = value.Split("")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim char as String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//and copy it</SourceLine>
   <SourceLine>for i as Integer = 0 to length - 1</SourceLine>
   <SourceLine>if doubleByte then</SourceLine>
   <SourceLine>char = Encoding.Chr(tmp.UShort(i * 2))  //fix to handle UTF-16</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>char = chars(i)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>Storage(i + index) = char</SourceLine>
   <SourceLine>'Storage(i + index) = chars(i)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer, length as integer, assigns value as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>StringValueOld</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub StringValueOld(index as integer, length as integer, assigns value as string)</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if length = 0 then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//split data into a tmp array</SourceLine>
   <SourceLine>dim chars() as String = value.Split("")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//and copy it</SourceLine>
   <SourceLine>for i as Integer = 0 to length - 1</SourceLine>
   <SourceLine>Storage(i + index) = chars(i)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer, length as integer, assigns value as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Note>
  <ItemName>Info</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>Info</NoteLine>
   <NoteLine>Text storage as an array of strings.</NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>Storage()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Storage() As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Storage() As string</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="1794734793">
 <ObjName>GapBuffer</ObjName>
 <ObjContainerID>516206877</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>0</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>checkBounds</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub checkBounds(index as integer)</SourceLine>
   <SourceLine>//checks if index is within bounds...</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if index &lt; 0 or index &gt; Length then</SourceLine>
   <SourceLine>dim ex as new OutOfBoundsException</SourceLine>
   <SourceLine>ex.Message = "Tried to access the buffer at invalid index."+EndOfLine+"Logic length = "+str(Length)+", index = "+str(index)</SourceLine>
   <SourceLine>Raise ex</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>//create a new gap buffer</SourceLine>
   <SourceLine>buffer = getBufferStorage(0)</SourceLine>
   <SourceLine>gapStart = 0</SourceLine>
   <SourceLine>gapEnd = 0</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ensureBufferSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ensureBufferSize(minRequiredLength as integer)</SourceLine>
   <SourceLine>//makes sure there's at least minRequiredLength spaces available in the buffer</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim newbuffer as IBufferStorage</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim delta as Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//gap too small</SourceLine>
   <SourceLine>if GapLength &lt; minRequiredLength or GapLength &lt; minGapSize then</SourceLine>
   <SourceLine>//resize buffer</SourceLine>
   <SourceLine>delta = max(minRequiredLength, maxGapSize) - GapLength</SourceLine>
   <SourceLine>newbuffer = getBufferStorage(buffer.Size + delta)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//gap too big!</SourceLine>
   <SourceLine>elseif GapLength &gt; maxGapSize then</SourceLine>
   <SourceLine>delta = max(minRequiredLength, minGapSize) - GapLength</SourceLine>
   <SourceLine>newbuffer = getBufferStorage(buffer.size + delta)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else //no need to resize!</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//copy contents to new buffer</SourceLine>
   <SourceLine>newbuffer.Copy(buffer, 0, 0, gapStart)</SourceLine>
   <SourceLine>'newbuffer.StringValue(0, gapStart) = buffer.StringValue(0, gapStart) //before gap</SourceLine>
   <SourceLine>newbuffer.Copy(buffer, gapEnd, newbuffer.Size - (buffer.Size - gapEnd), buffer.Size - gapEnd)</SourceLine>
   <SourceLine>'newbuffer.StringValue(newbuffer.Size - (buffer.Size - gapEnd), buffer.Size - gapEnd) = buffer.StringValue(gapEnd, buffer.Size - gapEnd) //after gap</SourceLine>
   <SourceLine>buffer = newbuffer</SourceLine>
   <SourceLine>gapEnd = gapEnd + delta</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>minRequiredLength as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>getBufferStorage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function getBufferStorage(size as integer) As IBufferStorage</SourceLine>
   <SourceLine>#if EditFieldGlobals.TextStorageType = EditFieldGlobals.STORAGE_MEMORYBLOCK then</SourceLine>
   <SourceLine>Return new MemoryBlockStorage(size)</SourceLine>
   <SourceLine>#elseif EditFieldGlobals.TextStorageType = EditFieldGlobals.STORAGE_ARRAY then</SourceLine>
   <SourceLine>Return new ArrayStorage(size)</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>Return new MemoryBlockStorageWide(size)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>size as integer</ItemParams>
  <ItemResult>IBufferStorage</ItemResult>
 </Method>
 <Method>
  <ItemName>getByteAt</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function getByteAt(offset as Integer) As Integer</SourceLine>
   <SourceLine>//if offset before gap</SourceLine>
   <SourceLine>if offset &lt; gapStart then</SourceLine>
   <SourceLine>Return buffer.ByteAt(offset)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//else, offset it by length</SourceLine>
   <SourceLine>Return buffer.ByteAt(offset + GapLength)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>getCharAt</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function getCharAt(offset as integer) As string</SourceLine>
   <SourceLine>//if offset before gap</SourceLine>
   <SourceLine>if offset &lt; gapStart then</SourceLine>
   <SourceLine>Return buffer.StringValue(offset, 1)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//else, offset it by length</SourceLine>
   <SourceLine>Return buffer.StringValue(offset + GapLength, 1)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as integer</ItemParams>
  <ItemResult>string</ItemResult>
 </Method>
 <Method>
  <ItemName>getText</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function getText(index as integer, length as integer) As string</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//nothing to get</SourceLine>
   <SourceLine>if Length &lt;= 0 or self.Length = 0 then Return ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>checkBounds(index)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim delta as Integer = index + Length</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//all text before gap?</SourceLine>
   <SourceLine>if delta &lt; gapStart then</SourceLine>
   <SourceLine>Return buffer.StringValue(index, Length)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//all text after gap?</SourceLine>
   <SourceLine>if index &gt; gapStart then</SourceLine>
   <SourceLine>return buffer.StringValue(index + GapLength, Length)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//text before and after gap</SourceLine>
   <SourceLine>dim result as IBufferStorage = getBufferStorage(length)</SourceLine>
   <SourceLine>result.Copy(buffer, index, 0, gapStart - index)</SourceLine>
   <SourceLine>'result.StringValue(0, gapStart - index) = buffer.StringValue(index, gapStart - index) //chunk before gap</SourceLine>
   <SourceLine>result.Copy(buffer, gapEnd, gapStart - index, delta - gapStart)</SourceLine>
   <SourceLine>'result.StringValue(gapStart - index, delta - gapStart) = buffer.StringValue(gapEnd, delta - gapStart) //chunk after gap</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return result.StringValue(0, result.size)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer, length as integer</ItemParams>
  <ItemResult>string</ItemResult>
 </Method>
 <Method>
  <ItemName>insert</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub insert(index as integer, text as string)</SourceLine>
   <SourceLine>replace(index, 0, text)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer, text as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>placeGap</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub placeGap(index as integer)</SourceLine>
   <SourceLine>//move the gap to a different place within the buffer</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if index = gapStart and GapLength&gt;0 then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim newbuffer as IBufferStorage = buffer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//empty?</SourceLine>
   <SourceLine>if buffer.Size = 0 then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//moving before current gap</SourceLine>
   <SourceLine>if index &lt; gapStart then</SourceLine>
   <SourceLine>dim count as Integer = gapStart - index //items to move</SourceLine>
   <SourceLine>newbuffer.StringValue(index + GapLength, Count) = buffer.StringValue(index, Count) //move items</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>gapStart = gapStart - Count</SourceLine>
   <SourceLine>gapEnd = gapEnd - Count</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//moving after current gap start</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>dim count as Integer = index - gapStart //items to move</SourceLine>
   <SourceLine>if count &gt; 0 then</SourceLine>
   <SourceLine>newbuffer.StringValue(gapStart, Count) = buffer.StringValue(gapEnd, Count) //move items</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>gapStart = gapStart + Count</SourceLine>
   <SourceLine>gapEnd = gapEnd + Count</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>remove</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function remove(index as integer, length as integer) As boolean</SourceLine>
   <SourceLine>//make sure we can remove</SourceLine>
   <SourceLine>if index &lt; 0 or index &gt; self.Length or self.Length = 0 then Return false</SourceLine>
   <SourceLine>replace(index, Length, "")</SourceLine>
   <SourceLine>Return true</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer, length as integer</ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>replace</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub replace(index as integer, length as integer, text as string)</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>lastOpMicros = Microseconds</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>checkBounds(index)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>placeGap(index)</SourceLine>
   <SourceLine>dim minLengthRequired as Integer = text.len</SourceLine>
   <SourceLine>ensureBufferSize(minLengthRequired)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//replace chars by moving them INTO the gap</SourceLine>
   <SourceLine>gapEnd = gapEnd + Length</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//add the text</SourceLine>
   <SourceLine>buffer.StringValue(index, text.len) = text</SourceLine>
   <SourceLine>gapStart = gapStart + text.len</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>lastOpMicros = Microseconds - lastOpMicros</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer, length as integer, text as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>setText</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub setText(text as string)</SourceLine>
   <SourceLine>//set the whole thing at once</SourceLine>
   <SourceLine>buffer.Size = text.len</SourceLine>
   <SourceLine>buffer.StringValue(0, text.len) = text</SourceLine>
   <SourceLine>gapStart = text.Len/2</SourceLine>
   <SourceLine>gapEnd = gapStart</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>text as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Note>
  <ItemName>Info</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>Info</NoteLine>
   <NoteLine>loosely adapted from:</NoteLine>
   <NoteLine>http://www.codeproject.com/KB/recipes/GenericGapBuffer.aspx</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>more info here:</NoteLine>
   <NoteLine>http://en.wikipedia.org/wiki/Gap_buffer</NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>buffer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>buffer As IBufferStorage</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>buffer As IBufferStorage</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>gapEnd</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>gapEnd As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>gapEnd As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>if value &gt; buffer.Size then value = buffer.Size</SourceLine>
   <SourceLine>mgapEnd = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mgapEnd</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>GapLength</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>GapLength As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>GapLength As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return gapEnd - gapStart</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>gapStart</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>gapStart As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>gapStart As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>lastOpMicros</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>lastOpMicros As double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>lastOpMicros As double</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Length</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Length As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Length As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return buffer.Size - GapLength</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>mgapEnd</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mgapEnd As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mgapEnd As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Stats</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Stats As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Stats As string</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine><Hex bytes="129">52657475726E202262756666657220706879736963616C3A20222B737472286275666665722E53697A65292B222C206C6F676963616C3A20222B737472284C656E677468292B222C206761703A20222B737472284761704C656E677468292B222C206C6173744F7020C2B5733A20222B737472286C6173744F704D6963726F7329</Hex></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>GapLength</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Length</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Stats</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>string</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>maxGapSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>maxGapSize</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>256</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>minGapSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>minGapSize</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>32</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
</block>
<block type="Module" ID="809364053">
 <ObjName>IBufferStorage</ObjName>
 <ObjContainerID>516206877</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>1</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>ByteAt</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ByteAt(offset as Integer) As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Copy</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Copy(from as IbufferStorage, fromIndex as integer, localIndex as integer, length as integer)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>from as IbufferStorage, fromIndex as integer, localIndex as integer, length as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Size</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Size() As integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Size</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Size(assigns length as integer)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>assigns length as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>StringValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function StringValue(index as integer, length as integer) As string</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer, length as integer</ItemParams>
  <ItemResult>string</ItemResult>
 </Method>
 <Method>
  <ItemName>StringValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub StringValue(index as integer, length as integer, assigns value as string)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer, length as integer, assigns value as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="1060546089">
 <ObjName>MemoryBlockStorage</ObjName>
 <ObjContainerID>516206877</ObjContainerID>
 <IsClass>1</IsClass>
 <Interfaces>IBufferStorage</Interfaces>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>ByteAt</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ByteAt(offset as Integer) As Integer</SourceLine>
   <SourceLine>Return Storage.Byte(offset)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(size as integer)</SourceLine>
   <SourceLine>Storage = new MemoryBlock(size)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// since this storage class can only handle single-byte characters, multi-byte strings need to be converted</SourceLine>
   <SourceLine>#if TargetWin32</SourceLine>
   <SourceLine>mSingleByteEncoding = encodings.WindowsANSI</SourceLine>
   <SourceLine>#elseif TargetLinux</SourceLine>
   <SourceLine>mSingleByteEncoding = encodings.ISOLatin1</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>mSingleByteEncoding = encodings.MacRoman</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>size as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Copy</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Copy(from as IbufferStorage, fromIndex as integer, localIndex as integer, length as integer)</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if from.size = 0 or length = 0 then Return //nuthin' to copy</SourceLine>
   <SourceLine>dim src as MemoryBlockStorage = MemoryBlockStorage(from)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>me.Storage.StringValue(localIndex, min(length, storage.Size - localIndex)) = src.Storage.StringValue(fromIndex, min(length, src.Size - fromIndex))</SourceLine>
   <SourceLine>me.mSingleByteEncoding = src.mSingleByteEncoding</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>from as IbufferStorage, fromIndex as integer, localIndex as integer, length as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Size</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Size() As integer</SourceLine>
   <SourceLine>Return Storage.Size</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Size</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Size(assigns length as integer)</SourceLine>
   <SourceLine>// Part of the IBufferStorage interface.</SourceLine>
   <SourceLine>Storage.Size = length</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>assigns length as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>StringValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function StringValue(index as integer, length as integer) As string</SourceLine>
   <SourceLine>// Part of the IBufferStorage interface.</SourceLine>
   <SourceLine>if length = 0 then Return ""</SourceLine>
   <SourceLine>if index &gt;= Size then Return ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return me.Storage.StringValue(index, min(length, storage.Size - index)).DefineEncoding(mSingleByteEncoding)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer, length as integer</ItemParams>
  <ItemResult>string</ItemResult>
 </Method>
 <Method>
  <ItemName>StringValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub StringValue(index as integer, length as integer, assigns value as string)</SourceLine>
   <SourceLine>// Part of the IBufferStorage interface.</SourceLine>
   <SourceLine>if length = 0 then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//Couldn't make memory blocks work correclty with multi-byte chars, so I force the data to be single-byte by re-encoding it.</SourceLine>
   <SourceLine>if value.encoding&lt;&gt; nil and (value.Encoding.Equals(encodings.UTF8) or value.Encoding.Equals(encodings.UTF16)) then</SourceLine>
   <SourceLine>value = value.ConvertEncoding(mSingleByteEncoding)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Storage.StringValue(index, length) = value</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer, length as integer, assigns value as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Note>
  <ItemName>Info</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>Info</NoteLine>
   <NoteLine>Text storage as a MemoryBlock</NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>mSingleByteEncoding</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mSingleByteEncoding As TextEncoding</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mSingleByteEncoding As TextEncoding</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>Storage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Storage As memoryBlock</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Storage As memoryBlock</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="196903828">
 <ObjName>MemoryBlockStorageWide</ObjName>
 <ObjContainerID>516206877</ObjContainerID>
 <IsClass>1</IsClass>
 <Interfaces>IBufferStorage</Interfaces>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>ByteAt</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ByteAt(offset as Integer) As Integer</SourceLine>
   <SourceLine>if Storage.LittleEndian then</SourceLine>
   <SourceLine>Return Storage.Byte(offset * BytesPerChar)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>Return Storage.Byte(offset * BytesPerChar + BytesPerChar - 1)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>offset as Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(size as integer)</SourceLine>
   <SourceLine>//since we'll be storing all strings as wstrings, we need 2 - 4 bytes per char.</SourceLine>
   <SourceLine>Storage = new MemoryBlock(size * BytesPerChar)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//looks like wstring uses 4 bytes when running under OSX, and 2 in windows XP</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>size as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Copy</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Copy(from as IbufferStorage, fromIndex as integer, localIndex as integer, length as integer)</SourceLine>
   <SourceLine>#if not DebugBuild</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma DisableBoundsChecking</SourceLine>
   <SourceLine>#pragma DisableAutoWaitCursor</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//indexes and length all have to be multiplied by BytesPerChar</SourceLine>
   <SourceLine>fromIndex = fromIndex * BytesPerChar</SourceLine>
   <SourceLine>localIndex = localIndex * BytesPerChar</SourceLine>
   <SourceLine>length = length * BytesPerChar</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if from.size = 0 or length = 0 then Return //nuthin' to copy</SourceLine>
   <SourceLine>dim src as MemoryBlockStorageWide = MemoryBlockStorageWide(from)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Storage.StringValue(localIndex, min(length, storage.Size - localIndex)) = src.Storage.StringValue(fromIndex, min(length, src.Size * BytesPerChar - fromIndex))</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>from as IbufferStorage, fromIndex as integer, localIndex as integer, length as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Size</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Size() As integer</SourceLine>
   <SourceLine>Return Storage.Size / BytesPerChar</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Size</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Size(assigns length as integer)</SourceLine>
   <SourceLine>// Part of the IBufferStorage interface.</SourceLine>
   <SourceLine>Storage.Size = length * BytesPerChar</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>assigns length as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>StringValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function StringValue(index as integer, length as integer) As string</SourceLine>
   <SourceLine>index = index * BytesPerChar</SourceLine>
   <SourceLine>length = length * BytesPerChar</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Part of the IBufferStorage interface.</SourceLine>
   <SourceLine>if length = 0 then Return ""</SourceLine>
   <SourceLine>if index &gt;= Size * BytesPerChar then Return ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//trailing 2 - 4 bytes needed to hold a null ending.</SourceLine>
   <SourceLine>dim tmp as new MemoryBlock(length + BytesPerChar)</SourceLine>
   <SourceLine>tmp.StringValue(0, length) = Storage.StringValue(index, min(length, storage.Size - index))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if TargetLinux</SourceLine>
   <SourceLine>return tmp.WString(0) // this uses UTF-16, no BOM</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>return tmp.WString(0)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer, length as integer</ItemParams>
  <ItemResult>string</ItemResult>
 </Method>
 <Method>
  <ItemName>StringValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub StringValue(index as integer, length as integer, assigns value as string)</SourceLine>
   <SourceLine>index = index * BytesPerChar</SourceLine>
   <SourceLine>length = length * BytesPerChar</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Part of the IBufferStorage interface.</SourceLine>
   <SourceLine>if length = 0 then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//trailing 4 bytes needed to hold a null ending.</SourceLine>
   <SourceLine>dim tmp as new MemoryBlock(value.LenB * BytesPerChar + 2*BytesPerChar) // Linux adds a BOM at the start</SourceLine>
   <SourceLine>tmp.WString(0) = value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//copy to local storage, without null terminator char.</SourceLine>
   <SourceLine>#if TargetLinux</SourceLine>
   <SourceLine>dim n as UInt32 = tmp.UInt32Value(0)</SourceLine>
   <SourceLine>if n = &amp;hFFFE or n = &amp;hFEFF then</SourceLine>
   <SourceLine>// remove the BOM</SourceLine>
   <SourceLine>Storage.StringValue(index, length) = tmp.StringValue(BytesPerChar, length)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>Storage.StringValue(index, length) = tmp.StringValue(0, length)</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>Storage.StringValue(index, length) = tmp.StringValue(0, length)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>index as integer, length as integer, assigns value as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Note>
  <ItemName>Info</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>Info</NoteLine>
   <NoteLine>Text storage as a MemoryBlock</NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>Storage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Storage As memoryBlock</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Storage As memoryBlock</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>BytesPerChar</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>BytesPerChar</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>4</ItemDef>
  <ItemFlags>0</ItemFlags>
  <ConstantInstance>
   <ItemPlatform>1</ItemPlatform>
   <ItemLanguage>0</ItemLanguage>
   <ItemDef>4</ItemDef>
  </ConstantInstance>
  <ConstantInstance>
   <ItemPlatform>2</ItemPlatform>
   <ItemLanguage>0</ItemLanguage>
   <ItemDef>2</ItemDef>
  </ConstantInstance>
 </Constant>
</block>
<block type="Folder" ID="2112788476">
 <ObjName>Undo</ObjName>
 <ObjContainerID>131773694</ObjContainerID>
</block>
<block type="Module" ID="2002437588">
 <ObjName>UndoableAction</ObjName>
 <ObjContainerID>2112788476</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>1</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>EventID</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function EventID() As integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>EventID</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub EventID(assigns value as integer)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>assigns value as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Redo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Redo()</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Undo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Undo()</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="233146128">
 <ObjName>UndoableDelete</ObjName>
 <ObjContainerID>2112788476</ObjContainerID>
 <IsClass>1</IsClass>
 <Interfaces>UndoableAction</Interfaces>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(field as customEditField, offset as integer, text as string, oldCaretPos as integer, ID as integer)</SourceLine>
   <SourceLine>Reference = new WeakRef(field)</SourceLine>
   <SourceLine>self.offset = offset</SourceLine>
   <SourceLine>self.text = text</SourceLine>
   <SourceLine>self.oldCaretPos = oldCaretPos</SourceLine>
   <SourceLine>EventID = ID</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>field as customEditField, offset as integer, text as string, oldCaretPos as integer, ID as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>EventID</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function EventID() As integer</SourceLine>
   <SourceLine>// Part of the UndoableAction interface.</SourceLine>
   <SourceLine>Return EventDesc</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>EventID</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub EventID(assigns value as integer)</SourceLine>
   <SourceLine>// Part of the UndoableAction interface.</SourceLine>
   <SourceLine>EventDesc = value</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>assigns value as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Redo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Redo()</SourceLine>
   <SourceLine>if owner = nil then Return</SourceLine>
   <SourceLine>owner.remove(offset, text.len)</SourceLine>
   <SourceLine>owner.SelStart = min(owner.TextLength, max(0, owner.CaretPos))</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Undo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Undo()</SourceLine>
   <SourceLine>if owner = nil then Return</SourceLine>
   <SourceLine>owner.Insert(offset, text)</SourceLine>
   <SourceLine>owner.SelStart = min(owner.TextLength, max(0, oldCaretPos))</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>EventDesc</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>EventDesc As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>EventDesc As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>offset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>offset As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>offset As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>oldCaretPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>oldCaretPos As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>oldCaretPos As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>owner</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>owner As CustomEditField</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>owner As CustomEditField</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if me.Reference &lt;&gt; nil then</SourceLine>
   <SourceLine>return CustomEditField(me.Reference.Value)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>return nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Reference</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Reference As weakRef</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Reference As weakRef</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>text</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>text As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>text As string</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="1476817974">
 <ObjName>UndoableReplace</ObjName>
 <ObjContainerID>2112788476</ObjContainerID>
 <IsClass>1</IsClass>
 <Interfaces>UndoableAction</Interfaces>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(field as customEditField, offset as integer, originalText as string, text as string, oldCaretPos as integer, ID as integer)</SourceLine>
   <SourceLine>Reference = new WeakRef(field)</SourceLine>
   <SourceLine>self.offset = offset</SourceLine>
   <SourceLine>self.originalText = originalText</SourceLine>
   <SourceLine>self.text = text</SourceLine>
   <SourceLine>self.oldCaretPos = oldCaretPos</SourceLine>
   <SourceLine>EventID = id</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>field as customEditField, offset as integer, originalText as string, text as string, oldCaretPos as integer, ID as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>EventID</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function EventID() As integer</SourceLine>
   <SourceLine>// Part of the UndoableAction interface.</SourceLine>
   <SourceLine>Return EventDesc</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>EventID</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub EventID(assigns value as integer)</SourceLine>
   <SourceLine>// Part of the UndoableAction interface.</SourceLine>
   <SourceLine>EventDesc = value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>assigns value as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Redo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Redo()</SourceLine>
   <SourceLine>if owner = nil then Return</SourceLine>
   <SourceLine>owner.Replace(offset, originalText.len, text)</SourceLine>
   <SourceLine>owner.SelStart = min(owner.TextLength, max(0, owner.CaretPos))</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Undo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Undo()</SourceLine>
   <SourceLine>if owner = nil then Return</SourceLine>
   <SourceLine>owner.Replace(offset, text.len, originalText)</SourceLine>
   <SourceLine>owner.SelStart = min(owner.TextLength, max(0, oldCaretPos))</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>EventDesc</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>EventDesc As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>EventDesc As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>offset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>offset As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>offset As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>oldCaretPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>oldCaretPos As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>oldCaretPos As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>originalText</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>originalText As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>originalText As string</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>owner</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>owner As CustomEditField</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>owner As CustomEditField</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>if me.Reference &lt;&gt; nil then</SourceLine>
   <SourceLine>return CustomEditField(me.Reference.Value)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>return nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Reference</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Reference As weakRef</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Reference As weakRef</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>text</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>text As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>text As string</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="1752326185">
 <ObjName>UndoManager</ObjName>
 <ObjContainerID>2112788476</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>addActionToRedoStack</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub addActionToRedoStack(action as undoableAction)</SourceLine>
   <SourceLine>RedoStack.Append action</SourceLine>
   <SourceLine>undoStackIndex = undoStackIndex - 1</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>action as undoableAction</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>addActionToUndoStack</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub addActionToUndoStack(action as undoableAction)</SourceLine>
   <SourceLine>UndoStack.Append action</SourceLine>
   <SourceLine>undoStackIndex = undoStackIndex + 1</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>action as undoableAction</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>mEnabled = true</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>IsDirty</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsDirty() As boolean</SourceLine>
   <SourceLine>Return undoStackIndex &lt;&gt; 0</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>IsUndoing</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsUndoing() As boolean</SourceLine>
   <SourceLine>Return undoing</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Push</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Push(action as undoableAction)</SourceLine>
   <SourceLine>if undoing or not mEnabled then Return</SourceLine>
   <SourceLine>if action = nil then Return</SourceLine>
   <SourceLine>addActionToUndoStack(action)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>redim RedoStack(-1)</SourceLine>
   <SourceLine>EnableMenuItems</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>action as undoableAction</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Redo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Redo()</SourceLine>
   <SourceLine>if not CanRedo then Return</SourceLine>
   <SourceLine>dim ID as Integer = RedoStack(UBound(RedoStack)).EventID</SourceLine>
   <SourceLine>redo(ID)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Redo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Redo(id as integer)</SourceLine>
   <SourceLine>if not CanRedo then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>undoing = true</SourceLine>
   <SourceLine>dim match as Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if id = RedoStack(UBound(RedoStack)).EventID then</SourceLine>
   <SourceLine>dim action as UndoableAction = RedoStack.Pop</SourceLine>
   <SourceLine>addActionToUndoStack(action)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>action.Redo</SourceLine>
   <SourceLine>match = true</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>undoing = False</SourceLine>
   <SourceLine>if id &lt;&gt; 0 and CanRedo and match then Redo(ID)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>EnableMenuItems</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>id as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Reset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Reset()</SourceLine>
   <SourceLine>ReDim UndoStack(-1)</SourceLine>
   <SourceLine>ReDim RedoStack(-1)</SourceLine>
   <SourceLine>undoStackIndex = 0</SourceLine>
   <SourceLine>undoing = False</SourceLine>
   <SourceLine>EnableMenuItems</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ResetDirtyFlag</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ResetDirtyFlag()</SourceLine>
   <SourceLine>undoStackIndex = 0</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Undo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Undo()</SourceLine>
   <SourceLine>if not CanUndo then Return</SourceLine>
   <SourceLine>dim ID as Integer = UndoStack(UBound(UndoStack)).EventID</SourceLine>
   <SourceLine>Undo(ID)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Undo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Undo(ID as integer)</SourceLine>
   <SourceLine>if not CanUndo then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>undoing = true</SourceLine>
   <SourceLine>dim match as Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if id = UndoStack(UBound(UndoStack)).EventID then</SourceLine>
   <SourceLine>dim action as UndoableAction = UndoStack.Pop</SourceLine>
   <SourceLine>addActionToRedoStack(action)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>action.Undo</SourceLine>
   <SourceLine>match = true</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>undoing = False</SourceLine>
   <SourceLine>if id &lt;&gt; 0 and CanUndo and match then undo(ID)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>EnableMenuItems</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>ID as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Note>
  <ItemName>About</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>About</NoteLine>
   <NoteLine>Part of CustomEditField</NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>CanRedo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CanRedo As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CanRedo As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return mEnabled and UBound(RedoStack) &gt; -1</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>CanUndo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CanUndo As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CanUndo As boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return mEnabled and UBound(UndoStack) &gt; -1</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Enabled</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Enabled As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Enabled As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mEnabled = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mEnabled</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>mEnabled</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mEnabled As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mEnabled As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>RedoStack()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>RedoStack() As undoableAction</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>RedoStack() As undoableAction</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>undoing</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>undoing As boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>undoing As boolean</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>UndoStack()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>UndoStack() As undoableAction</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>UndoStack() As undoableAction</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>undoStackIndex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>undoStackIndex As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>undoStackIndex As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>CanRedo</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>CanUndo</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Enabled</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="118815767">
 <ObjName>XsltParser</ObjName>
 <ObjContainerID>0</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>CreateParser</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine> Shared Function CreateParser(type As ParserType) As XsltParser</SourceLine>
   <SourceLine>// function: CreateParser</SourceLine>
   <SourceLine>// parameters: type As ParserType</SourceLine>
   <SourceLine>// return: XsltParser</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Factory function to return a certain type of XsltParser class based in the passed</SourceLine>
   <SourceLine>// "type" parameter</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Select Case type</SourceLine>
   <SourceLine>Case ParserType.expat</SourceLine>
   <SourceLine>Return New ExpatParser()</SourceLine>
   <SourceLine>Case ParserType.libxslt</SourceLine>
   <SourceLine>Return New XmlStarletParser()</SourceLine>
   <SourceLine>Case ParserType.saxon</SourceLine>
   <SourceLine>//Return New SaxonParser()</SourceLine>
   <SourceLine>Case ParserType.xalan</SourceLine>
   <SourceLine>//Return New XalanParser()</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Raise New UnsupportedFormatException</SourceLine>
   <SourceLine>End Select</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>1</Shared>
  <ItemParams>type As ParserType</ItemParams>
  <ItemResult>XsltParser</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>// function: Constructor</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Set up a generic XSLT parser.  This should include functions that occur in</SourceLine>
   <SourceLine>// (nearly) every type of XSLT parser.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>parserShell = New Shell</SourceLine>
   <SourceLine>tmpXmlPath = App.TmpDirectory.Child("xml.xml").ShellPath</SourceLine>
   <SourceLine>tmpXsltPath = App.TmpDirectory.Child("xsl.xsl").ShellPath</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Tidy</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Tidy(sourceXml As String, xmlDeclaration As Boolean = True) As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>sourceXml As String, xmlDeclaration As Boolean = True</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>Transform</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Transform(xml As String, xslt As String, rootNode As String = "") As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>xml As String, xslt As String, rootNode As String = ""</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>AnalyzeXpath</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function AnalyzeXpath(sourceXml As String, xPath As String) As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>sourceXml As String, xPath As String</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Property>
  <ItemName>parserShell</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>parserShell As Shell</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>parserShell As Shell</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>tmpXmlPath</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>tmpXmlPath As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>tmpXmlPath As String</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>tmpXsltPath</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>tmpXsltPath As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>tmpXsltPath As String</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>parserExePath</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>parserExePath As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>parserExePath As String</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>XSLT_TIDY_NO_DECLARATION</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>XSLT_TIDY_NO_DECLARATION</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:transform version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;&lt;xsl:output omit-xml-declaration="yes" indent="yes"/&gt;&lt;xsl:strip-space elements="*"/&gt;&lt;xsl:template match="node()|@*"&gt;&lt;xsl:copy&gt;&lt;xsl:apply-templates select="node()|@*" /&gt;&lt;/xsl:copy&gt;&lt;/xsl:template&gt;&lt;/xsl:transform&gt;</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>XSLT_TIDY_DECLARATION</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>XSLT_TIDY_DECLARATION</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:transform version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;&lt;xsl:output omit-xml-declaration="no" indent="yes"/&gt;&lt;xsl:strip-space elements="*"/&gt;&lt;xsl:template match="node()|@*"&gt;&lt;xsl:copy&gt;&lt;xsl:apply-templates select="node()|@*" /&gt;&lt;/xsl:copy&gt;&lt;/xsl:template&gt;&lt;/xsl:transform&gt;</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Enumeration>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>ParserType</ItemName>
  <ItemFlags>0</ItemFlags>
  <ItemType>Integer</ItemType>
  <ItemName>ParserType</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>expat</SourceLine>
   <SourceLine>libxslt</SourceLine>
   <SourceLine>saxon</SourceLine>
   <SourceLine>xalan</SourceLine>
  </ItemSource>
 </Enumeration>
</block>
<block type="Module" ID="685587570">
 <ObjName>XmlStarletParser</ObjName>
 <ObjContainerID>0</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>XsltParser</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>// function: Constructor</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Returns a new instance of this class by calling its Super's constructor</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Super.Constructor</SourceLine>
   <SourceLine>parserExePath = App.LibDirectory.Child("xmlstarlet").Child("xmlstarlet").ShellPath</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>4096</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Tidy</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Tidy(sourceXml As String, xmlDeclaration As Boolean = True) As String</SourceLine>
   <SourceLine>// function: Tidy</SourceLine>
   <SourceLine>// parameters: sourceXml As String, xmlDeclaration As Boolean = True</SourceLine>
   <SourceLine>// return: String</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// TIDYs XML -- via libxslt's method -- and returns it</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>FileIO.SaveXmlViaFilepath(sourceXml, tmpXmlPath)</SourceLine>
   <SourceLine>If Not xmlDeclaration Then</SourceLine>
   <SourceLine>FileIO.SaveXmlViaFilepath(XSLT_TIDY_NO_DECLARATION, tmpXsltPath)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>FileIO.SaveXmlViaFilepath(XSLT_TIDY_DECLARATION, tmpXsltPath)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#If TargetWin32 Then</SourceLine>
   <SourceLine>parserShell.Execute(parserExePath + " tr " + tmpXsltPath + " " + tmpXmlPath + " &amp;&amp; del " + tmpXmlPath + " " + tmpXsltPath)</SourceLine>
   <SourceLine>#Elseif TargetMacOS</SourceLine>
   <SourceLine>parserShell.Execute(parserExePath + " tr " + tmpXsltPath + " " + tmpXmlPath + " &amp;&amp; rm " + tmpXmlPath + " " + tmpXsltPath)</SourceLine>
   <SourceLine>#Endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If parserShell.ErrorCode = 0 Then</SourceLine>
   <SourceLine>Return parserShell.Result</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>App.DisplayWarningMsg("There was a shell error while TIDYing:" + EndOfLine + EndOfLine + "Error code " + Str(parserShell.errorCode))</SourceLine>
   <SourceLine>Return sourceXml</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>sourceXml As String, xmlDeclaration As Boolean = True</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>Transform</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Transform(xml As String, xslt As String, rootNode As String = "") As String</SourceLine>
   <SourceLine>// function: Transform</SourceLine>
   <SourceLine>// parameters: xml As String, xslt As String, rootNode As String = ""</SourceLine>
   <SourceLine>// return: String</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Create a new XML document, load the sourced XML into it,</SourceLine>
   <SourceLine>// and run the provided XSLT against it via libxslt</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Define a new XmlDocument</SourceLine>
   <SourceLine>Dim xmlDoc As XmlDocument = New XmlDocument</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Only execute logic if there is non-empty XML and XSL</SourceLine>
   <SourceLine>If xml &lt;&gt; "" And xslt &lt;&gt; "" Then</SourceLine>
   <SourceLine>Try</SourceLine>
   <SourceLine>If rootNode &lt;&gt; "" Then</SourceLine>
   <SourceLine>// NOTE: since the CustomEditField stores text in UTF-16 (for speedier performance),</SourceLine>
   <SourceLine>// we need to transform it to UTF-8 before the encoding happens</SourceLine>
   <SourceLine>xmlDoc.LoadXml("&lt;" + rootNode + "&gt;" + xml.ConvertEncoding(Encodings.UTF8) + "&lt;/" + rootNode + "&gt;")</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>// NOTE: since the CustomEditField stores text in UTF-16 (for speedier performance),</SourceLine>
   <SourceLine>// we need to transform it to UTF-8 before the encoding happens</SourceLine>
   <SourceLine>xmlDoc.LoadXml(xml.ConvertEncoding(Encodings.UTF8))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// If everything is valid, save XML and XSLT to temporary files and run xmlstarlet on them</SourceLine>
   <SourceLine>FileIO.SaveXmlViaFilepath(xmlDoc.ToString, tmpXmlPath)</SourceLine>
   <SourceLine>FileIO.SaveXmlViaFilepath(xslt, tmpXsltPath)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#If TargetWin32</SourceLine>
   <SourceLine>parserShell.Execute(parserExePath + " tr " + tmpXsltPath + " " + tmpXmlPath + " &amp;&amp; del " + tmpXmlPath + " " + tmpXsltPath)</SourceLine>
   <SourceLine>#Elseif TargetMacOS</SourceLine>
   <SourceLine>parserShell.Execute(parserExePath + " tr " + tmpXsltPath + " " + tmpXmlPath + " &amp;&amp; rm " + tmpXmlPath + " " + tmpXsltPath)</SourceLine>
   <SourceLine>#Endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If parserShell.ErrorCode = 0 Then</SourceLine>
   <SourceLine>// If xmlstarlet returns all-good, then return its results</SourceLine>
   <SourceLine>Return parserShell.Result</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>// Otherwise, display the error code and return the original XML</SourceLine>
   <SourceLine>App.DisplayWarningMsg("There was a shell error while transforming the data:" + EndOfLine + EndOfLine + "Error code " + Str(parserShell.errorCode))</SourceLine>
   <SourceLine>Return xml</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Catch err As XmlException</SourceLine>
   <SourceLine>// Some sort of XML exception happened</SourceLine>
   <SourceLine>App.DisplayWarningMsg("2. There was an XML error while transforming the data." + EndOfLine + EndOfLine + err.Message)</SourceLine>
   <SourceLine>Return xml</SourceLine>
   <SourceLine>End Try</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>// If the user hasn't put text into either the XML or XSLT editor windows</SourceLine>
   <SourceLine>App.DisplayWarningMsg("Not enough data to transform." + EndOfLine + EndOfLine + "Please ensure you have valid XML and XSL before running the Transform operation.")</SourceLine>
   <SourceLine>Return xml</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>xml As String, xslt As String, rootNode As String = ""</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>AnalyzeXpath</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function AnalyzeXpath(sourceXml As String, xPath As String) As String</SourceLine>
   <SourceLine>// function: Tidy</SourceLine>
   <SourceLine>// parameters: sourceXml As String, xmlDeclaration As Boolean = True</SourceLine>
   <SourceLine>// return: String</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// TIDYs XML -- via libxslt's method -- and returns it</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>FileIO.SaveXmlViaFilepath(sourceXml, tmpXmlPath)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#If TargetWin32</SourceLine>
   <SourceLine>parserShell.Execute(parserExePath + " sel -R -t -c """ + xPath + """ " + tmpXmlPath + " &amp;&amp; del " + tmpXmlPath)</SourceLine>
   <SourceLine>#Elseif TargetMacOS</SourceLine>
   <SourceLine>parserShell.Execute(parserExePath + " sel -R -t -c """ + xPath + """ " + tmpXmlPath + " &amp;&amp; rm " + tmpXmlPath)</SourceLine>
   <SourceLine>#Endif</SourceLine>
   <SourceLine>If parserShell.ErrorCode = 0 Then</SourceLine>
   <SourceLine>Return Transform(parserShell.Result, XSLT_TIDY_NO_DECLARATION)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>App.DisplayWarningMsg("There was a shell error during analysis:" + EndOfLine + EndOfLine + "Error code " + Str(parserShell.errorCode))</SourceLine>
   <SourceLine>Return sourceXml</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>sourceXml As String, xPath As String</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="1420539641">
 <ObjName>SaxonParser</ObjName>
 <ObjContainerID>0</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>XsltParser</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="1434059394">
 <ObjName>XalanParser</ObjName>
 <ObjContainerID>0</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>XsltParser</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="1924304712">
 <ObjName>ExpatParser</ObjName>
 <ObjContainerID>0</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>XsltParser</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>// function: Constructor</SourceLine>
   <SourceLine>// parameters: none</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Returns a new instance of this class by calling its Super's constructor</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Super.Constructor</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>4096</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Tidy</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Tidy(sourceXml As String, xmlDeclaration As Boolean = True) As String</SourceLine>
   <SourceLine>// function: Tidy</SourceLine>
   <SourceLine>// parameters: sourceXml As String, xmlDeclaration As Boolean = True</SourceLine>
   <SourceLine>// return: String</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// TIDYs XML -- via Expat's method -- and returns it</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Try</SourceLine>
   <SourceLine>Dim xmlDoc As XmlDocument = New XmlDocument</SourceLine>
   <SourceLine>xmlDoc.LoadXml(sourceXml.ConvertEncoding(Encodings.UTF8))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not xmlDeclaration Then</SourceLine>
   <SourceLine>Return xmlDoc.Transform(XSLT_TIDY_NO_DECLARATION)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Return xmlDoc.Transform(XSLT_TIDY_DECLARATION)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Catch err As XmlException</SourceLine>
   <SourceLine>App.DisplayWarningMsg("There was an error while TIDYing:" + EndOfLine + EndOfLine + err.Message)</SourceLine>
   <SourceLine>Return sourceXml</SourceLine>
   <SourceLine>End Try</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>sourceXml As String, xmlDeclaration As Boolean = True</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>Transform</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Transform(xml As String, xslt As String, rootNode As String = "") As String</SourceLine>
   <SourceLine>// function: Transform</SourceLine>
   <SourceLine>// parameters: xml As String, xslt As String, rootNode As String = ""</SourceLine>
   <SourceLine>// return: String</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Create a new XML document, load the sourced XML into it,</SourceLine>
   <SourceLine>// and run the provided XSLT against it via Expat</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Define a new XmlDocument</SourceLine>
   <SourceLine>Dim xmlDoc As XmlDocument = New XmlDocument</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Only execute logic if there is non-empty XML and XSL</SourceLine>
   <SourceLine>If xml &lt;&gt; "" And xslt &lt;&gt; "" Then</SourceLine>
   <SourceLine>Try</SourceLine>
   <SourceLine>If rootNode &lt;&gt; "" Then</SourceLine>
   <SourceLine>// NOTE: since the CustomEditField stores text in UTF-16 (for speedier performance),</SourceLine>
   <SourceLine>// we need to transform it to UTF-8 before the encoding happens</SourceLine>
   <SourceLine>xmlDoc.LoadXml("&lt;" + rootNode + "&gt;" + xml.ConvertEncoding(Encodings.UTF8) + "&lt;/" + rootNode + "&gt;")</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>// NOTE: since the CustomEditField stores text in UTF-16 (for speedier performance),</SourceLine>
   <SourceLine>// we need to transform it to UTF-8 before the encoding happens</SourceLine>
   <SourceLine>xmlDoc.LoadXml(xml.ConvertEncoding(Encodings.UTF8))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Try</SourceLine>
   <SourceLine>// If everything is valid, run the transformation</SourceLine>
   <SourceLine>// NOTE: since the CustomEditField stores text in UTF-16 (for speedier performance),</SourceLine>
   <SourceLine>// we need to transform it to UTF-8 before the encoding happens</SourceLine>
   <SourceLine>Return xmlDoc.Transform(xslt.ConvertEncoding(Encodings.UTF8))</SourceLine>
   <SourceLine>Catch err As XmlException</SourceLine>
   <SourceLine>App.DisplayWarningMsg("There was an XML error while transforming the data." + EndOfLine + EndOfLine + err.Message)</SourceLine>
   <SourceLine>Return xml</SourceLine>
   <SourceLine>End Try</SourceLine>
   <SourceLine>Catch err As XmlException</SourceLine>
   <SourceLine>App.DisplayWarningMsg("There was an XML error while transforming the data." + EndOfLine + EndOfLine + err.Message)</SourceLine>
   <SourceLine>Return xml</SourceLine>
   <SourceLine>End Try</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>App.DisplayWarningMsg("Not enough data to transform." + EndOfLine + EndOfLine + "Please ensure you have valid XML and XSL before running the Transform operation.")</SourceLine>
   <SourceLine>Return xml</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>xml As String, xslt As String, rootNode As String = ""</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>AnalyzeXpath</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function AnalyzeXpath(sourceXml As String, xPath As String) As String</SourceLine>
   <SourceLine>// function: AnalyzeXpath</SourceLine>
   <SourceLine>// parameters: sourceXml As String, xPath As String</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Runs the provided XPath against the provided XML</SourceLine>
   <SourceLine>// and returns the XmlNodeList that results</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Try</SourceLine>
   <SourceLine>Dim xmlDocument As XmlDocument = New XmlDocument</SourceLine>
   <SourceLine>Dim xPathResults As XmlNodeList</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>xmlDocument.LoadXml(sourceXml.ConvertEncoding(Encodings.UTF8))</SourceLine>
   <SourceLine>xPathResults = xmlDocument.Xql(xPath)</SourceLine>
   <SourceLine>Return Transform(xPathResults.ToString, XSLT_TIDY_NO_DECLARATION, "xsl-select")</SourceLine>
   <SourceLine>Catch err As XmlException</SourceLine>
   <SourceLine>App.DisplayWarningMsg("There was an error during analysis." + EndOfLine + EndOfLine + err.Message)</SourceLine>
   <SourceLine>End Try</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>sourceXml As String, xPath As String</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="1483389899">
 <ObjName>FileIO</ObjName>
 <ObjContainerID>223830211</ObjContainerID>
 <IsClass>0</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>OpenViaDialog</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function OpenViaDialog(validFileTypes As FileType) As String()</SourceLine>
   <SourceLine>// function: OpenViaDialog</SourceLine>
   <SourceLine>// parameters: validFileTypes As FileType</SourceLine>
   <SourceLine>// return: Array(fileName, fileContents)</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Opens a text file and returns its contents</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim file As FolderItem</SourceLine>
   <SourceLine>Dim fileContents As String</SourceLine>
   <SourceLine>Dim inputStream As TextInputStream</SourceLine>
   <SourceLine>Dim ret() As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>file = GetOpenFolderItem(validFileTypes)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If file &lt;&gt; Nil Then</SourceLine>
   <SourceLine>// Open an input stream to the XML file and read its contents</SourceLine>
   <SourceLine>Try</SourceLine>
   <SourceLine>// Attempt to open the text file and return its text contents</SourceLine>
   <SourceLine>inputStream = file.OpenAsTextFile</SourceLine>
   <SourceLine>fileContents = inputStream.ReadAll</SourceLine>
   <SourceLine>return Array(file.Name, fileContents)</SourceLine>
   <SourceLine>Catch err as NilObjectException</SourceLine>
   <SourceLine>App.DisplayWarningMsg("There was an error while opening the file:" + EndOfLine + EndOfLine + err.Message)</SourceLine>
   <SourceLine>Finally</SourceLine>
   <SourceLine>inputStream.Close</SourceLine>
   <SourceLine>End Try</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>validFileTypes As FileType</ItemParams>
  <ItemResult>String()</ItemResult>
 </Method>
 <Method>
  <ItemName>SaveXmlViaDialog</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SaveXmlViaDialog(xml As String, defaultFileName As String)</SourceLine>
   <SourceLine>// function: SaveViaDialog</SourceLine>
   <SourceLine>// parameters: xml As String, defaultFileName As String</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Takes an XML string and saves it to a file (chosen by user)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim folder As FolderItem</SourceLine>
   <SourceLine>Dim xmlDocument As XmlDocument</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If xml &lt;&gt; "" Then</SourceLine>
   <SourceLine>// Allow the user to choose a save location</SourceLine>
   <SourceLine>folder = GetSaveFolderItem(FileTypes_XmlFiletypes.TextXml, defaultFilename)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// If a valid location is chosen, save the XML document to it</SourceLine>
   <SourceLine>If folder &lt;&gt; Nil Then</SourceLine>
   <SourceLine>Try</SourceLine>
   <SourceLine>xmlDocument = New XmlDocument</SourceLine>
   <SourceLine>xmlDocument.LoadXml(xml.ConvertEncoding(Encodings.UTF8))</SourceLine>
   <SourceLine>xmlDocument.SaveXml(folder)</SourceLine>
   <SourceLine>Catch err As XmlException</SourceLine>
   <SourceLine>App.DisplayWarningMsg("There was an error saving the XML." + EndOfLine + EndOfLine + err.Message)</SourceLine>
   <SourceLine>End Try</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>App.DisplayWarningMsg("No data to save." + EndOfLine + EndOfLine + "Cannot save a blank file.")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>xml As String, defaultFileName As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SaveXmlViaFilepath</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SaveXmlViaFilepath(xml As String, filePath As String)</SourceLine>
   <SourceLine>// function: SaveViaFilepath</SourceLine>
   <SourceLine>// parameters: xml As String, filePath As String</SourceLine>
   <SourceLine>// return: none</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Takes an XML string and saves it to a file (chosen by user)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Allow the user to choose a save location</SourceLine>
   <SourceLine>Dim folder As FolderItem = GetFolderItem(filePath, FolderItem.PathTypeShell)</SourceLine>
   <SourceLine>Dim xmlDocument As XmlDocument</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If xml &lt;&gt; "" Then</SourceLine>
   <SourceLine>// If a valid location is chosen, save the XML document to it</SourceLine>
   <SourceLine>If folder &lt;&gt; Nil Then</SourceLine>
   <SourceLine>Try</SourceLine>
   <SourceLine>xmlDocument = New XmlDocument</SourceLine>
   <SourceLine>xmlDocument.LoadXml(xml.ConvertEncoding(Encodings.UTF8))</SourceLine>
   <SourceLine>xmlDocument.SaveXml(folder)</SourceLine>
   <SourceLine>Catch err As XmlException</SourceLine>
   <SourceLine>App.DisplayWarningMsg("There was an error saving the XML." + EndOfLine + EndOfLine + err.Message)</SourceLine>
   <SourceLine>End Try</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>App.DisplayWarningMsg("No data to save." + EndOfLine + EndOfLine + "Cannot save a blank file.")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//Dim t as TextOutputStream = TextOutputStream.Create(f)</SourceLine>
   <SourceLine>//t.Write ConvertEncoding(xml, Encodings.UTF8)</SourceLine>
   <SourceLine>//t.Close()</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>xml As String, filePath As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="UIState" ID="0">
 <WindowState>
  <OpenTab>
   <ObjContainerID>0</ObjContainerID>
   <EditSplit>199</EditSplit>
   <ProjectListSortColumn>3</ProjectListSortColumn>
   <ProjectListColumnSortDirection>1</ProjectListColumnSortDirection>
  </OpenTab>
  <OpenTab>
   <ObjContainerID>118815767</ObjContainerID>
   <AlternateEditorID>1</AlternateEditorID>
   <LeftSplitter>160</LeftSplitter>
   <EmptyEventState>0</EmptyEventState>
   <CodeItemID>0</CodeItemID>
  </OpenTab>
  <OpenTab>
   <ObjContainerID>1924304712</ObjContainerID>
   <AlternateEditorID>1</AlternateEditorID>
   <LeftSplitter>160</LeftSplitter>
   <EmptyEventState>0</EmptyEventState>
   <CodeItemID>0</CodeItemID>
  </OpenTab>
  <OpenTab>
   <ObjContainerID>685587570</ObjContainerID>
   <AlternateEditorID>1</AlternateEditorID>
   <LeftSplitter>160</LeftSplitter>
   <EmptyEventState>0</EmptyEventState>
   <CodeItemID>0</CodeItemID>
  </OpenTab>
  <OpenTab>
   <ObjContainerID>531424011</ObjContainerID>
   <LeftSplitter>138</LeftSplitter>
   <RightSplitter>172</RightSplitter>
   <ScrollX>0</ScrollX>
   <ScrollY>0</ScrollY>
   <LastPositionH>64</LastPositionH>
   <LastPositionV>64</LastPositionV>
   <Control>0</Control>
  </OpenTab>
  <OpenTab>
   <ObjContainerID>531424011</ObjContainerID>
   <AlternateEditorID>1</AlternateEditorID>
   <LeftSplitter>160</LeftSplitter>
   <EmptyEventState>0</EmptyEventState>
   <CodeItemID>0</CodeItemID>
  </OpenTab>
  <OpenTab>
   <ObjContainerID>258881810</ObjContainerID>
   <RightSplitter>215</RightSplitter>
  </OpenTab>
  <OpenTab>
   <ObjContainerID>1045599458</ObjContainerID>
   <AlternateEditorID>1</AlternateEditorID>
   <LeftSplitter>160</LeftSplitter>
   <EmptyEventState>0</EmptyEventState>
   <CodeItemID>0</CodeItemID>
  </OpenTab>
  <LastLocation>XmlStarletParser.AnalyzeXpath</LastLocation>
  <EditBounds><Rect left="0" top="42" width="1920" height="998"/></EditBounds>
 </WindowState>
</block>
</RBProject>
